{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/parser/xml-serialize.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/dom/break.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/dom/symbol.ts","webpack://docx/./src/dom/tab.ts","webpack://docx/./src/dom/text.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/hyperlink.ts","webpack://docx/./src/dom/table-cell.ts","webpack://docx/./src/dom/table.ts","webpack://docx/./src/dom/drawing.ts","webpack://docx/./src/dom/table-row.ts","webpack://docx/./src/dom/image.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/word-document.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/common/package.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/border.ts","webpack://docx/./src/dom/fieldChar.ts","webpack://docx/./src/dom/instructions.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/dom/document.ts","webpack://docx/./src/dom/body.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","parent","className","cssStyle","DocxElement","children","DocxContainer","schemaSymbol","deserializeSchema","output","schema","text","prop","convert","textContent","attributes","length","attr","item","attrs","localName","getPrototypeXmlSchema","proto","target","elemName","elements","cs","attrName","schemaObj","v","$attr","deserializeElement","getPrototypeOf","elem","child","obj","push","props","RunElement","element","TextElement","SymbolElement","TabElement","BreakElement","InstructionTextElement","FieldCharElement","parseRunProperty","xml","styleName","border","parseBorder","fonts","parseRunFonts","shading","parseShading","highlight","spacing","lengthAttr","stretch","percentageAttr","color","fontSize","LengthUsage","FontSize","bold","boolAttr","strike","doubleStrike","italics","underline","type","caps","smallCaps","imprint","outline","verticalAlignment","ascii","hAscii","eastAsia","foreground","background","result","ParagraphElement","BookmarkStartElement","BookmarkEndElement","parseParagraphProperty","namespaceURI","wordml","tabs","parseTabs","sectionProps","parseSectionProperties","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","intAttr","runProps","parseRunProperties","map","e","position","leader","style","id","level","path","load","pkg","loadRelationships","this","then","rels","Part","Dxa","mul","unit","Emu","Border","Point","Percent","LineHeight","val","usage","parseInt","appendClass","classList","si","lastIndexOf","substring","array","by","reduce","a","x","parse","xmlString","skipDeclaration","replace","DOMParser","parseFromString","firstChild","childNodes","nodeType","node","defaultValue","floatAttr","parseFloat","convertPercentage","convertLength","XmlParser","globalXmlParser","fromAttribute","RelationshipTypes","xmlParser","targetMode","parseColumns","numberOfColumns","space","separator","equalWidth","columns","width","SectionType","section","pageSize","height","orientation","pageMargins","left","right","top","bottom","header","footer","gutter","fromText","anchor","HyperlinkElement","TableCellElement","TableElement","DrawingElement","TableRowElement","ImageElement","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","WordDocument","doc","render","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","Package","find","OfficeDocument","loadRelationshipPart","Promise","resolve","exists","part","documentPart","DocumentPart","FontTable","fontTablePart","FontTablePart","Numbering","numberingPart","NumberingPart","Styles","stylesPart","StylesPart","folder","splitPath","rel","all","loadDocumentImage","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","el","parseFonts","parseFont","family","altName","fontKey","refId","_zip","files","input","save","generateAsync","file","async","relsPath","parseRelationships","_documentParser","documentElement","parseDocumentFile","assign","parseNumberingPart","domNumberings","parseNumberingFile","overrides","abstractId","parseNumberingLevelOverrride","parseAbstractNumbering","levels","multiLevelType","numberingStyleLink","styleLink","parseNumberingLevel","start","restart","format","justification","bulletPictureId","paragraphProps","parseParagraphProperties","numberingLevel","parseNumberingBulletPicture","pict","shape","imagedata","referenceId","numberings","abstractNumberings","bulletPictures","before","after","line","lineRule","size","offset","frame","shadow","parseStylesPart","domStyles","parseStylesFile","styles","defaults","parseDocumentDefaults","parseStyle","pPrElem","rPrElem","customStyle","default","basedOn","aliases","split","link","next","autoRedefine","hidden","semiHidden","locked","uiPriority","autos","shd","SizeType","xmlDoc","DocumentElement","body","BodyElement","xbody","foreach","parseParagraph","parseTable","xstyles","parseDefaultStyles","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","linked","parseTableStyle","console","warn","selector","xnums","mapping","bullets","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","src","bullet","filter","levelText","parseRun","parseHyperlink","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","parseDrawing","run","parseDrawingWrapper","isAnchor","wrapType","simplePos","posX","relative","align","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","blipFill","blip","spPr","xfrm","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","parseTableCell","parseTableRowProperties","row","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","firstLine","end","toFixed","cb","nodeName","defValue","autoColor","convertSize","indexOf","intVal","trim","b","checkMask","num","mask","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","processStyles","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","wrapper","renderWrapper","appentElements","fontsPart","f","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","pBreakIndex","rBreakIndex","findIndex","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","renderColor","test","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderText","renderSymbol","renderTab","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderChildren","into","elems","__docxElement","renderClass","renderStyleValues","styleClassName","renderRunProperties","renderShading","renderBorder","renderRunFonts","renderUnderline","renderRunVerticalAlignment","href","display","textIndent","createTextNode","fontFamily","font","innerHTML","char","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","export class DocxElement {\r\n    className: string = null;\r\n    cssStyle: Record<string, string> = {};\r\n\r\n    constructor(public parent?: DocxElement) {\r\n    }\r\n}\r\n\r\nexport class DocxContainer extends DocxElement {\r\n    children: DocxElement[] = [];\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","const schemaSymbol = Symbol(\"open-xml-schema\");\r\n\r\nexport type Converter = (val: string) => any;\r\n\r\nexport function element(name: string) {\r\n    return function(target: any) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.elemName = name;\r\n    }\r\n}\r\n\r\nexport function children(...elements: any[]) {\r\n    return function(target) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.children = {};\r\n        for(let c of elements) {\r\n            let cs = getPrototypeXmlSchema(c.prototype);\r\n            schema.children[cs.elemName] = { proto: c.prototype, schema: cs };\r\n        }\r\n    }\r\n}\r\n\r\nexport function fromText(convert: Converter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.text = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromAttribute(attrName: string, convert: Converter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.attrs[attrName] = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function buildXmlSchema(schemaObj: any): OpenXmlSchema {\r\n    var schema: OpenXmlSchema = {\r\n        text: null,\r\n        attrs: {},\r\n        elemName: null,\r\n        children: null\r\n    };\r\n\r\n    for(let p in schemaObj) {\r\n        let v = schemaObj[p];\r\n\r\n        if(p == \"$elem\") {\r\n            schema.elemName = v;\r\n        }\r\n        else if(v.$attr) {\r\n            schema.attrs[v.$attr] = { prop: p, convert: null };\r\n        }\r\n    }\r\n\r\n    return schema;\r\n}\r\n\r\nexport function deserializeElement<T = any>(n: Element, output: T): T {\r\n    var proto = Object.getPrototypeOf(output);\r\n    var schema = proto[schemaSymbol];\r\n\r\n    if (schema == null)\r\n        return output;\r\n\r\n    deserializeSchema(n, output, schema);\r\n\r\n    for (let i = 0, l = n.children.length; i < l; i ++) {\r\n        let elem = n.children.item(i);\r\n        let child = schema.children[elem.localName];\r\n\r\n        if (child) {\r\n            let obj = Object.create(child.proto);\r\n            deserializeElement(elem, obj);\r\n            (output as any).children.push(obj);\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function deserializeSchema(n: Element, output: any, schema: OpenXmlSchema) {\r\n    if (schema.text) {\r\n        let prop = schema.text;\r\n        output[prop.prop] = prop.convert ? prop.convert(n.textContent) : n.textContent; \r\n    }\r\n\r\n    for (let i = 0, l = n.attributes.length; i < l; i++) {\r\n        let attr = n.attributes.item(i);\r\n        let prop = schema.attrs[attr.localName];\r\n\r\n        if(prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert ? prop.convert(attr.value) : attr.value; \r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport interface OpenXmlSchema {\r\n    elemName: string;\r\n    text: OpenXmlSchemaProperty;\r\n    attrs: Record<string, OpenXmlSchemaProperty>;\r\n    children: Record<string, any>;\r\n}\r\n\r\nexport interface OpenXmlSchemaProperty {\r\n    prop: string;\r\n    convert: Converter;\r\n}\r\n\r\nfunction getPrototypeXmlSchema(proto: any): OpenXmlSchema {\r\n    return proto[schemaSymbol] || (proto[schemaSymbol] = {\r\n        text: null,\r\n        attrs: {},\r\n        children: {}\r\n    });\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { Border, parseBorder } from \"./border\";\r\nimport { BreakElement } from \"./break\";\r\nimport { Length, LengthUsage, Underline } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\nimport { FieldCharElement } from \"./fieldChar\";\r\nimport { InstructionTextElement } from \"./instructions\";\r\nimport { SymbolElement } from \"./symbol\";\r\nimport { TabElement } from \"./tab\";\r\nimport { TextElement } from \"./text\";\r\n\r\n@element('r')\r\n@children(TextElement, SymbolElement, TabElement, BreakElement, InstructionTextElement, FieldCharElement)\r\nexport class RunElement extends DocxContainer {\r\n    id?: string;\r\n    styleName: string;\r\n    props: RunProperties = <RunProperties>{};\r\n}\r\n\r\nexport interface RunProperties {\r\n    styleName: string;\r\n    fontSize: Length;\r\n    color: string;\r\n    bold: boolean;\r\n    italics: boolean;\r\n    caps: boolean;\r\n    smallCaps: boolean;\r\n    strike: boolean;\r\n    doubleStrike: boolean;\r\n    outline: boolean;\r\n    imprint: boolean;\r\n    underline: Underline;\r\n    border: Border;\r\n    fonts: RunFonts;\r\n    shading: Shading;\r\n    highlight: string;\r\n    spacing: Length;\r\n    stretch: number;\r\n    verticalAlignment: 'baseline' | 'superscript' | 'subscript' | string;\r\n}\r\n\r\nexport interface Shading {\r\n    foreground: string,\r\n    background: string,\r\n    type: string\r\n}\r\n\r\nexport interface RunFonts {\r\n    ascii: string;\r\n    hAscii: string;\r\n    cs: string;\r\n    eastAsia: string;\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    switch (elem.localName) {\r\n        case 'rStyle': \r\n            props.styleName = xml.attr(elem, 'val');\r\n            break;\r\n\r\n        case 'bdr': \r\n            props.border = parseBorder(elem, xml);\r\n            break;\r\n\r\n        case 'rFonts': \r\n            props.fonts = parseRunFonts(elem, xml);\r\n            break;\r\n\r\n        case 'shd': \r\n            props.shading = parseShading(elem, xml);\r\n            break;\r\n\r\n        case 'highlight': \r\n            props.highlight = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'spacing':\r\n            props.spacing = xml.lengthAttr(elem, 'val');\r\n            break;\r\n\r\n        case 'w':\r\n            props.stretch = xml.percentageAttr(elem, 'val');\r\n            break;\r\n\r\n            case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        case \"b\":\r\n            props.bold = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"strike\":\r\n            props.strike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"dstrike\":\r\n            props.doubleStrike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"i\":\r\n            props.italics = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"u\":\r\n            props.underline = {\r\n                color: xml.attr(elem, \"color\"),\r\n                type: xml.attr(elem, 'val')\r\n            };\r\n            break;\r\n            \r\n        case 'caps':\r\n            props.caps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'smallCaps':\r\n            props.smallCaps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'imprint':\r\n            props.imprint = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'outline':\r\n            props.outline = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'vertAlign':\r\n            props.verticalAlignment = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'emboss':\r\n        case 'shadow':\r\n        case 'vanish':\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseRunFonts(elem: Element, xml: XmlParser): RunFonts {\r\n    return {\r\n        ascii: xml.attr(elem, 'ascii'),\r\n        hAscii: xml.attr(elem, 'hAscii'),\r\n        cs: xml.attr(elem, 'cs'),\r\n        eastAsia: xml.attr(elem, 'eastAsia'),\r\n    };\r\n}\r\n\r\nexport function parseShading(elem: Element, xml: XmlParser): Shading {\r\n    return {\r\n        type: xml.attr(elem, 'val'),\r\n        foreground: xml.attr(elem, 'color'),\r\n        background: xml.attr(elem, 'fill')\r\n    };\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { Length, ns } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { BookmarkEndElement, BookmarkStartElement } from \"./bookmark\";\r\n\r\n@element(\"p\")\r\n@children(BookmarkStartElement, BookmarkEndElement)\r\nexport class ParagraphElement extends DocxContainer {\r\n    props: ParagraphProperties = {} as ParagraphProperties;\r\n}\r\n\r\nexport interface ParagraphProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Underline {\r\n    color: string;\r\n    type: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}","import { DocxElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: DocxElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertPercentage  } from \"../dom/common\";\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    percentageAttr(node: Element, attrName: string): number {\r\n        return convertPercentage(this.attr(node, attrName));\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('br')\r\nexport class BreakElement extends DocxElement {\r\n    @fromAttribute(\"type\")\r\n    type: \"page\" | \"column\" | \"textWrapping\";\r\n    \r\n    @fromAttribute(\"clear\")\r\n    clear: \"all\" | \"left\" | \"right\" | \"none\";\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('sym')\r\nexport class SymbolElement extends DocxElement {\r\n    @fromAttribute('font')\r\n    font: string;\r\n    @fromAttribute('char')\r\n    char: string;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('tab')\r\nexport class TabElement extends DocxElement {\r\n}","import { element, fromText } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('t')\r\nexport class TextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"bookmarkStart\")\r\nexport class BookmarkStartElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n    @fromAttribute(\"name\")\r\n    name: string;\r\n    @fromAttribute(\"colFirst\")\r\n    colFirst: number;\r\n    @fromAttribute(\"colLast\")\r\n    colLast: number;\r\n}\r\n\r\n@element(\"bookmarkEnd\")\r\nexport class BookmarkEndElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n}","import globalXmlParser from \"../parser/xml-parser\";\r\nimport { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element('hyperlink')\r\nexport class HyperlinkElement extends DocxContainer {\r\n    @fromAttribute('anchor')\r\n    anchor?: string;\r\n\r\n    protected parse(elem: Element) {\r\n        this.anchor = globalXmlParser.attr(elem, \"anchor\");\r\n    }\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class TableCellElement extends DocxContainer {\r\n    span?: number;\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class TableElement extends DocxContainer {\r\n    columns?: TableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface TableColumn {\r\n    width?: string;\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class DrawingElement extends DocxContainer {\r\n\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class TableRowElement extends DocxContainer {\r\n\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class ImageElement extends DocxContainer {\r\n    src: string;\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(el => {\r\n                this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    static load(input): Promise<Package> {\r\n        return JSZip.loadAsync(input).then(zip => new Package(zip));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    documentElement: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                this.documentElement = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseNumberingPart(xml, pkg.xmlParser));\r\n                this.domNumberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('fldChar')\r\nexport class FieldCharElement extends DocxElement {\r\n    @fromAttribute('fldCharType')\r\n    type: 'begin' | 'end' | 'separate'; \r\n}","import { fromText, element } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"instrText\")\r\nexport class InstructionTextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, Style, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseStylesPart(xml, pkg.xmlParser));\r\n                this.domStyles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n\r\n    paragraphStyle: any;\r\n    runStyle: any;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseRunProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\nexport interface Style {\r\n    id: string;\r\n    type: StyleType;\r\n    customStyle: boolean\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): Style {\r\n    let result = {\r\n        id: xml.attr(elem, 'styleId'),\r\n        type: xml.attr(elem, 'type'),\r\n        customStyle: xml.boolAttr(elem, 'customStyle', false),\r\n        default: xml.boolAttr(elem, 'default', false),\r\n    } as Style;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { DocxElement, IDomNumbering, NumberingPicBullet } from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, RunElement } from './dom/run';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\nimport { BodyElement } from './dom/body';\r\nimport { BreakElement } from './dom/break';\r\nimport { HyperlinkElement } from './dom/hyperlink';\r\nimport { TableCellElement } from './dom/table-cell';\r\nimport { TableColumn, TableElement } from './dom/table';\r\nimport { DrawingElement } from './dom/drawing';\r\nimport { TableRowElement } from './dom/table-row';\r\nimport { ImageElement } from './dom/image';\r\nimport { deserializeElement } from './parser/xml-serialize';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        const result = new DocumentElement();\r\n\r\n        result.body = new BodyElement();\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.body.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.body.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.body.sectionProps = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): ParagraphElement {\r\n        const result = deserializeElement(node, new ParagraphElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph.props, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: DocxElement): HyperlinkElement {\r\n        var result = deserializeElement(node, new HyperlinkElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: DocxElement): RunElement {\r\n        var result = deserializeElement(node, new RunElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(deserializeElement(c, new BreakElement()));\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n\r\n        Object.assign(run.props, parseRunProperties(elem, globalXmlParser));\r\n\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): DocxElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): DocxElement {\r\n        var result = new DrawingElement();\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): DocxElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): ImageElement {\r\n        var result = new ImageElement();\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): TableElement {\r\n        var result = new TableElement();\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): TableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: TableElement) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: TableElement) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): TableRowElement {\r\n        var result = new TableRowElement();\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: TableRowElement) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): TableCellElement {\r\n        var result = new TableCellElement();\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: TableCellElement) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { BodyElement } from \"./body\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\nexport class DocumentElement extends DocxElement {\r\n    body: BodyElement;\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { SectionProperties } from \"./section\";\r\n\r\nexport class BodyElement extends DocxContainer {\r\n    sectionProps: SectionProperties;\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomNumbering, DocxContainer, DocxElement } from './dom/dom';\r\nimport { Length, Underline } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunFonts, RunProperties, Shading } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\nimport { Border } from './dom/border';\r\nimport { BodyElement } from './dom/body';\r\nimport { TableColumn, TableElement } from './dom/table';\r\nimport { TableRowElement } from './dom/table-row';\r\nimport { TableCellElement } from './dom/table-cell';\r\nimport { HyperlinkElement } from './dom/hyperlink';\r\nimport { DrawingElement } from './dom/drawing';\r\nimport { ImageElement } from './dom/image';\r\nimport { BreakElement } from './dom/break';\r\nimport { TabElement } from './dom/tab';\r\nimport { SymbolElement } from './dom/symbol';\r\nimport { TextElement } from './dom/text';\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n    currentParagrashStyle: any; \r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.domStyles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.documentElement.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: DocxElement) {\r\n        if (\"children\" in element) {\r\n            for (var e of (element as DocxContainer).children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e instanceof TableElement) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: TableElement) {\r\n        for (var r of table.children) {\r\n            for (var c of (r as DocxContainer).children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: BodyElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.sectionProps);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: DocxElement[]): { sectProps: SectionProperties, elements: DocxElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if (elem instanceof ParagraphElement) {\r\n                const styleName = elem.props.styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem instanceof ParagraphElement)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex((r: DocxContainer) => {\r\n                        rBreakIndex = r.children?.findIndex((t: BreakElement) => t instanceof BreakElement && t.type == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex] as RunElement;\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = Object.assign(new ParagraphElement(), elem, { children: children.slice(pBreakIndex) });\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  Object.assign(new RunElement(), breakRun, { children: runChildren.slice(0, rBreakIndex) });\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderColor(c: string, autoColor: string = 'black'): string {\r\n        if (/[a-f0-9]{6}/i.test(c))\r\n            return `#${c}`;\r\n\r\n        return c === 'auto' ? autoColor : c;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: DocxElement, parent: DocxElement): Node {\r\n        if (elem instanceof ParagraphElement) {\r\n            return this.renderParagraph(elem);\r\n        } else if (elem instanceof BookmarkStartElement) {\r\n            return this.renderBookmarkStart(elem);\r\n        } else if (elem instanceof RunElement) {\r\n            return this.renderRun(elem);\r\n        } else if (elem instanceof TextElement) {\r\n            return this.renderText(elem);\r\n        } else if (elem instanceof SymbolElement) {\r\n            return this.renderSymbol(elem);\r\n        } else if (elem instanceof TabElement) {\r\n            return this.renderTab(elem);\r\n        } else if (elem instanceof TableElement) {\r\n            return this.renderTable(elem);\r\n        } else if (elem instanceof TableRowElement) {\r\n            return this.renderTableRow(elem);\r\n        } else if (elem instanceof TableCellElement) {\r\n            return this.renderTableCell(elem);\r\n        } else if (elem instanceof HyperlinkElement) {\r\n            return this.renderHyperlink(elem);\r\n        } else if (elem instanceof DrawingElement) {\r\n            return this.renderDrawing(elem);\r\n        }else if (elem instanceof ImageElement) {\r\n            return this.renderImage(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: DocxContainer, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: DocxElement[], parent: DocxElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => {\r\n            let n = this.renderElement(e, parent);\r\n\r\n            if(n)\r\n                (n as any).__docxElement = e;\r\n\r\n            return n;\r\n        }).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.props.numbering) {\r\n            var numberingClass = this.numberingClass(elem.props.numbering.id, elem.props.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.props.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.props.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch (p as keyof(RunProperties)) {\r\n                case 'highlight':\r\n                    style['background'] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'shading':\r\n                    style['background'] = this.renderShading(v);\r\n                    break;\r\n\r\n                case 'border':\r\n                    style['border'] = this.renderBorder(v);\r\n                    break;\r\n\r\n                case 'color':\r\n                    style[\"color\"] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'fontSize':\r\n                    style[\"font-size\"] = this.renderLength(v);\r\n                    break;\r\n\r\n                case 'bold':\r\n                    style[\"font-weight\"] = v ? 'bold' : 'normal';\r\n                    break;\r\n\r\n                case 'italics':\r\n                    style[\"font-style\"] = v ? 'italic' : 'normal';\r\n                    break;\r\n\r\n                case 'smallCaps':\r\n                    style[\"font-size\"] = v ? 'smaller' : 'none';\r\n                case 'caps':\r\n                    style[\"text-transform\"] = v ? 'uppercase' : 'none';\r\n                    break;\r\n\r\n                case 'strike':\r\n                case 'strike':\r\n                    style[\"text-decoration\"] = v ? 'line-through' : 'none';\r\n                    break;\r\n\r\n                case 'fonts':\r\n                    style[\"font-family\"] = this.renderRunFonts(v);\r\n                    break;\r\n    \r\n                case 'underline':\r\n                    this.renderUnderline(style, v);\r\n                    break;\r\n                \r\n                case 'verticalAlignment':\r\n                    this.renderRunVerticalAlignment(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderRunVerticalAlignment(style: any, align: string) {\r\n        switch(align) {\r\n            case 'subscript': \r\n                style['vertical-align'] = 'sub';\r\n                style['font-size'] = 'small';\r\n                break;\r\n\r\n            case 'superscript': \r\n                style['vertical-align'] = 'super';\r\n                style['font-size'] = 'small';\r\n                break;\r\n        }\r\n    }\r\n\r\n    renderRunFonts(fonts: RunFonts) {\r\n        return [fonts.ascii, fonts.hAscii, fonts.cs, fonts.eastAsia].filter(x => x).map(x => `'${x}'`).join(',');\r\n    }\r\n\r\n    renderBorder(border: Border) {\r\n        if (border.type == 'nil')\r\n            return 'none';\r\n\r\n        return `${this.renderLength(border.size)} solid ${this.renderColor(border.color)}`;\r\n    }\r\n    \r\n    renderShading(shading: Shading) {\r\n        if (shading.type == 'clear')\r\n            return this.renderColor(shading.background, autos.shd);\r\n        \r\n        return this.renderColor(shading.background, autos.shd);\r\n    }\r\n    \r\n    renderUnderline(style: any, underline: Underline) {\r\n        if (underline.type == null || underline.type == \"none\")\r\n            return;\r\n\r\n        switch (underline.type) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        if (underline.color)\r\n            style[\"text-decoration-color\"] = this.renderColor(underline.color);\r\n    }\r\n\r\n    renderHyperlink(elem: HyperlinkElement) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.anchor)\r\n            result.href = elem.anchor;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: DrawingElement) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: ImageElement) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: TabElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, ParagraphElement);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        //this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderRunProperties(result.style, elem.props);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: TableElement) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: TableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: TableRowElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: TableCellElement) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: DocxElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends DocxElement>(elem: DocxElement, type: any): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && !(parent instanceof type))\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}