{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/config.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/breaks.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/document.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/drawing.ts","webpack://docx/./src/document/fields.ts","webpack://docx/./src/document/hyperlink.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/document/table-cell.ts","webpack://docx/./src/document/table-row.ts","webpack://docx/./src/document/table.ts","webpack://docx/./src/document/text.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/parser/xml-serialize.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__792__","_zip","xmlParser","XmlParser","exists","path","this","files","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","text","parseRelationships","parseXmlString","firstElementChild","_package","all","rels","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","trimXmlDeclaration","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","keepOrigin","deserialize","elem","output","deserializeElement","parseDocumentFile","xmlDoc","xbody","element","result","DocumentElement","body","BodyElement","xml","foreach","localName","children","push","parseParagraph","parseTable","parseFooter","FooterElement","parseHeader","HeaderElement","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","ParagraphElement","parseRun","parseHyperlink","paragraph","cssStyle","parseParagraphProperty","props","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","HyperlinkElement","RunElement","d","parseDrawing","run","Object","assign","parseDrawingWrapper","DrawingElement","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","textContent","sizeValue","g","parseGraphic","graphicData","parsePicture","ImageElement","blipFill","blip","spPr","xfrm","TableElement","parseTableRow","parseTableProperties","parseTableColumns","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","TableRowElement","parseTableCell","parseTableRowProperties","row","TableCellElement","parseTableCellProperties","cell","span","verticalMerge","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","fromAttribute","BookmarkStartElement","DocxElement","BookmarkEndElement","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","BreakElement","LastRenderedPageBreakElement","ns","wordml","mul","unit","LineHeight","usage","value","defaultValue","pkg","parser","_documentParser","documentElement","DocumentPart","fromElement","parseSectionProperties","DocxContainer","FieldCharElement","convertBoolean","FieldSimpleElement","parse","anchor","namespaceURI","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleId","position","leader","TextElement","SymbolElement","TabElement","InstructionTextElement","parseRunProperty","styleName","border","fonts","parseRunFonts","shading","parseShading","spacing","stretch","percentageAttr","fontSize","bold","strike","doubleStrike","italics","underline","caps","smallCaps","imprint","outline","verticalAlignment","hAscii","cs","eastAsia","foreground","background","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","columns","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","fromText","default","data","bodyContainer","styleContainer","userOptions","renderer","HtmlRenderer","window","document","options","ignoreHeight","ignoreFonts","breakPages","ignoreLastRenderedPageBreak","experimental","inWrapper","WordDocument","doc","render","parseFonts","FontTablePart","el","family","altName","fontKey","refId","footerElement","FooterPart","headerElement","HeaderPart","htmlDocument","renderHeaders","renderFooters","domStyleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processDomStyles","domStyles","styleMap","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","keyBy","baseStyle","mergeDeep","domStylesMap","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","getOwnPropertyNames","key","hasOwnProperty","createElement","tagName","renderContainer","renderElements","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectProps","sectionElement","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","renderColor","test","listStyleType","styleText","rootCounters","numberingClass","num","toLowerCase","styleToString","loadNumberingImage","numFormatToCssValue","counter","numberingCounter","levelTextToContent","join","stylesMap","subStyles","linkedStyle","concat","subStyle","renderParagraphProperties","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderText","renderSymbol","renderTab","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderHeader","renderFooter","renderChildren","into","elems","$$docxElement","renderClass","renderStyleValues","appendClass","styleClassName","renderLineSpacing","renderRunProperties","renderShading","renderBorder","renderRunFonts","renderUnderline","renderRunVerticalAlignment","href","display","textIndent","loadDocumentImage","createTextNode","fontFamily","font","innerHTML","char","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","container","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","t","borderBottom","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","XMLSerializer","serializeToString","Array","from","Node","ELEMENT_NODE","item","attributes","floatAttr","parseFloat","convertPercentage","convertLength","globalXmlParser","schemaSymbol","Symbol","deserializeSchema","schema","prop","convert","getPrototypeXmlSchema","proto","prototype","elemName","schemaObj","$attr","ops","getPrototypeOf","$$xmlElement","child","obj","create","pPrElem","rPrElem","customStyle","link","autoRedefine","hidden","semiHidden","locked","uiPriority","parseStylesPart","defaults","parseDocumentDefaults","StylesPart","classList","isObject","isArray","si","lastIndexOf","array","by","reduce","sources","source","shift","parts","partsMap","blob","_parser","OfficeDocument","loadRelationshipPart","part","FontTable","Numbering","Styles","Footer","Header","folder","rel","loadResource","URL","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","substr","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__792__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType): Promise<any> {\r\n        return this._zip.files[path]?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"string\").then(text => {\r\n            if (!text)\r\n                return;\r\n\r\n            return parseRelationships(parseXmlString(text).firstElementChild, this.xmlParser);\r\n        })\r\n    }\r\n}","import { parseXmlString, serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path, 'string').then(text => {\r\n                this._xmlDocument = parseXmlString(text);\r\n                this.parseXml(this._xmlDocument.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","export default {\r\n    trimXmlDeclaration: false\r\n}","import { DocxElement, IDomNumbering, NumberingPicBullet } from './document/dom';\r\nimport * as utils from './utils';\r\nimport { BodyElement, DocumentElement } from './document/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, RunElement } from './document/run';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { BreakElement } from './document/breaks';\r\nimport { HyperlinkElement } from './document/hyperlink';\r\nimport { TableCellElement } from './document/table-cell';\r\nimport { TableColumn, TableElement } from './document/table';\r\nimport { DrawingElement, ImageElement } from './document/drawing';\r\nimport { TableRowElement } from './document/table-row';\r\nimport { deserializeElement } from './parser/xml-serialize';\r\nimport { FooterElement } from './footer/footer';\r\nimport { HeaderElement } from './header/header';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n    keepOrigin: boolean = false;\r\n\r\n    private deserialize<T>(elem: Element, output: T): T {\r\n        return deserializeElement(elem, output, { keepOrigin: this.keepOrigin });\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        const result = new DocumentElement();\r\n\r\n        result.body = this.deserialize(xbody, new BodyElement());\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.body.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.body.children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): FooterElement {\r\n        const result = new FooterElement();\r\n    \r\n        xml.foreach(xmlDoc, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): HeaderElement {\r\n        const result = new HeaderElement();\r\n    \r\n        xml.foreach(xmlDoc, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): ParagraphElement {\r\n        const result = this.deserialize(node, new ParagraphElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph.props, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: DocxElement): HyperlinkElement {\r\n        var result = this.deserialize(node, new HyperlinkElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: DocxElement): RunElement {\r\n        var result = this.deserialize(node, new RunElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n\r\n        Object.assign(run.props, parseRunProperties(elem, globalXmlParser));\r\n\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): DocxElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): DocxElement {\r\n        var result = new DrawingElement();\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): DocxElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): ImageElement {\r\n        var result = new ImageElement();\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): TableElement {\r\n        var result = this.deserialize(node, new TableElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): TableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: TableElement) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: TableElement) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): TableRowElement {\r\n        var result = this.deserialize(node, new TableRowElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: TableRowElement) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): TableCellElement {\r\n        var result = this.deserialize(node, new TableCellElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: TableCellElement) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    cell.verticalMerge = xml.sizeAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"bookmarkStart\")\r\nexport class BookmarkStartElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n    @fromAttribute(\"name\")\r\n    name: string;\r\n    @fromAttribute(\"colFirst\")\r\n    colFirst: number;\r\n    @fromAttribute(\"colLast\")\r\n    colLast: number;\r\n}\r\n\r\n@element(\"bookmarkEnd\")\r\nexport class BookmarkEndElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('br')\r\nexport class BreakElement extends DocxElement {\r\n    @fromAttribute(\"type\")\r\n    type: \"page\" | \"column\" | \"textWrapping\";\r\n    \r\n    @fromAttribute(\"clear\")\r\n    clear: \"all\" | \"left\" | \"right\" | \"none\";\r\n}\r\n\r\n@element('lastRenderedPageBreak')\r\nexport class LastRenderedPageBreakElement extends DocxElement {\r\n}","export const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Underline {\r\n    color: string;\r\n    type: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    documentElement: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.documentElement = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","import { element, fromElement } from \"../parser/xml-serialize\";\r\nimport { DocxContainer, DocxElement } from \"./dom\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\n\r\n@element(\"document\")\r\nexport class DocumentElement extends DocxElement {\r\n    body: BodyElement;\r\n}\r\n\r\n@element(\"body\")\r\nexport class BodyElement extends DocxContainer {\r\n    @fromElement(\"sectPr\", parseSectionProperties)\r\n    sectionProps: SectionProperties;\r\n}","export class DocxElement {\r\n    className: string = null;\r\n    cssStyle: Record<string, string> = {};\r\n\r\n    constructor(public parent?: DocxElement) {\r\n    }\r\n}\r\n\r\nexport class DocxContainer extends DocxElement {\r\n    children: DocxElement[] = [];\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { DocxContainer } from \"./dom\";\r\n\r\nexport class DrawingElement extends DocxContainer {\r\n\r\n}\r\n\r\nexport class ImageElement extends DocxContainer {\r\n    src: string;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { convertBoolean, convertLength } from \"./common\";\r\nimport { DocxContainer, DocxElement } from \"./dom\";\r\n\r\n@element('fldChar')\r\nexport class FieldCharElement extends DocxElement {\r\n    @fromAttribute('fldCharType')\r\n    type: 'begin' | 'end' | 'separate'; \r\n}\r\n\r\n@element('fldSimple')\r\nexport class FieldSimpleElement extends DocxContainer {\r\n    @fromAttribute(\"dirty\", convertBoolean)\r\n    dirty: boolean;\r\n\r\n    @fromAttribute(\"fldLock\", convertBoolean)\r\n    lock: boolean;\r\n\r\n    @fromAttribute(\"instr\")\r\n    instruction: string;\r\n}","import globalXmlParser from \"../parser/xml-parser\";\r\nimport { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element('hyperlink')\r\nexport class HyperlinkElement extends DocxContainer {\r\n    @fromAttribute('anchor')\r\n    anchor?: string;\r\n\r\n    protected parse(elem: Element) {\r\n        this.anchor = globalXmlParser.attr(elem, \"anchor\");\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { Length, ns } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { BookmarkEndElement, BookmarkStartElement } from \"./bookmarks\";\r\nimport { FieldSimpleElement } from \"./fields\";\r\n\r\n@element(\"p\")\r\n@children(BookmarkStartElement, BookmarkEndElement, FieldSimpleElement)\r\nexport class ParagraphElement extends DocxContainer {\r\n    props: ParagraphProperties = {} as ParagraphProperties;\r\n}\r\n\r\nexport interface ParagraphProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleId: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleId = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { Border, parseBorder } from \"./border\";\r\nimport { BreakElement, LastRenderedPageBreakElement } from \"./breaks\";\r\nimport { Length, LengthUsage, Underline } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\nimport { FieldCharElement } from \"./fields\";\r\nimport { InstructionTextElement, SymbolElement, TabElement, TextElement } from \"./text\";\r\n\r\n@element('r')\r\n@children(TextElement, SymbolElement, TabElement, BreakElement, InstructionTextElement, FieldCharElement, LastRenderedPageBreakElement)\r\nexport class RunElement extends DocxContainer {\r\n    id?: string;\r\n    styleName: string;\r\n    props: RunProperties = <RunProperties>{};\r\n}\r\n\r\nexport interface RunProperties {\r\n    styleName: string;\r\n    fontSize: Length;\r\n    color: string;\r\n    bold: boolean;\r\n    italics: boolean;\r\n    caps: boolean;\r\n    smallCaps: boolean;\r\n    strike: boolean;\r\n    doubleStrike: boolean;\r\n    outline: boolean;\r\n    imprint: boolean;\r\n    underline: Underline;\r\n    border: Border;\r\n    fonts: RunFonts;\r\n    shading: Shading;\r\n    highlight: string;\r\n    spacing: Length;\r\n    stretch: number;\r\n    verticalAlignment: 'baseline' | 'superscript' | 'subscript' | string;\r\n}\r\n\r\nexport interface Shading {\r\n    foreground: string,\r\n    background: string,\r\n    type: string\r\n}\r\n\r\nexport interface RunFonts {\r\n    ascii: string;\r\n    hAscii: string;\r\n    cs: string;\r\n    eastAsia: string;\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    switch (elem.localName) {\r\n        case 'rStyle': \r\n            props.styleName = xml.attr(elem, 'val');\r\n            break;\r\n\r\n        case 'bdr': \r\n            props.border = parseBorder(elem, xml);\r\n            break;\r\n\r\n        case 'rFonts': \r\n            props.fonts = parseRunFonts(elem, xml);\r\n            break;\r\n\r\n        case 'shd': \r\n            props.shading = parseShading(elem, xml);\r\n            break;\r\n\r\n        case 'highlight': \r\n            props.highlight = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'spacing':\r\n            props.spacing = xml.lengthAttr(elem, 'val');\r\n            break;\r\n\r\n        case 'w':\r\n            props.stretch = xml.percentageAttr(elem, 'val');\r\n            break;\r\n\r\n            case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        case \"b\":\r\n            props.bold = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"strike\":\r\n            props.strike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"dstrike\":\r\n            props.doubleStrike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"i\":\r\n            props.italics = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"u\":\r\n            props.underline = {\r\n                color: xml.attr(elem, \"color\"),\r\n                type: xml.attr(elem, 'val')\r\n            };\r\n            break;\r\n            \r\n        case 'caps':\r\n            props.caps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'smallCaps':\r\n            props.smallCaps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'imprint':\r\n            props.imprint = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'outline':\r\n            props.outline = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'vertAlign':\r\n            props.verticalAlignment = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'emboss':\r\n        case 'shadow':\r\n        case 'vanish':\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseRunFonts(elem: Element, xml: XmlParser): RunFonts {\r\n    return {\r\n        ascii: xml.attr(elem, 'ascii'),\r\n        hAscii: xml.attr(elem, 'hAscii'),\r\n        cs: xml.attr(elem, 'cs'),\r\n        eastAsia: xml.attr(elem, 'eastAsia'),\r\n    };\r\n}\r\n\r\nexport function parseShading(elem: Element, xml: XmlParser): Shading {\r\n    return {\r\n        type: xml.attr(elem, 'val'),\r\n        foreground: xml.attr(elem, 'color'),\r\n        background: xml.attr(elem, 'fill')\r\n    };\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tc\")\r\nexport class TableCellElement extends DocxContainer {\r\n    span?: number;\r\n    verticalMerge: string;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tr\")\r\nexport class TableRowElement extends DocxContainer {\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { element, fromElement } from \"../parser/xml-serialize\";\r\nimport { Length } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tbl\")\r\nexport class TableElement extends DocxContainer {\r\n    @fromElement(\"tblGrid\", parseTableColumns)\r\n    columns?: TableColumn[];\r\n\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface TableColumn {\r\n    width?: Length;\r\n}\r\n\r\nexport function parseTableColumns(elem: Element, xml: XmlParser = globalXmlParser): TableColumn[] {\r\n    return xml.elements(elem, 'gridCol').map(e => (<TableColumn>{\r\n        width: xml.lengthAttr(e, \"w\")\r\n    }));\r\n}","import { element, fromAttribute, fromText } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('t')\r\nexport class TextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}\r\n\r\n@element('sym')\r\nexport class SymbolElement extends DocxElement {\r\n    @fromAttribute('font')\r\n    font: string;\r\n    @fromAttribute('char')\r\n    char: string;\r\n}\r\n\r\n@element('tab')\r\nexport class TabElement extends DocxElement {\r\n}\r\n\r\n@element(\"instrText\")\r\nexport class InstructionTextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport { default as config } from './config';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    keepOrigin: boolean;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options: Options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        ignoreLastRenderedPageBreak: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        keepOrigin: false,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug;\r\n    parser.keepOrigin = options.keepOrigin;\r\n\r\n    renderer.className = options.className;\r\n    renderer.inWrapper = options.inWrapper;\r\n    renderer.keepOrigin = options.keepOrigin;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { FooterElement } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: FooterElement;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DocxContainer } from \"../document/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"ftr\")\r\nexport class FooterElement extends DocxContainer {\r\n\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { HeaderElement } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: HeaderElement;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DocxContainer } from \"../document/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"hdr\")\r\nexport class HeaderElement extends DocxContainer {\r\n\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomNumbering, DocxContainer, DocxElement } from './document/dom';\r\nimport { Length, Underline } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { ParagraphElement, ParagraphProperties } from './document/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './document/section';\r\nimport { RunElement, RunFonts, RunProperties, Shading } from './document/run';\r\nimport { BookmarkStartElement } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\nimport { Border } from './document/border';\r\nimport { TableColumn, TableElement } from './document/table';\r\nimport { TableRowElement } from './document/table-row';\r\nimport { TableCellElement } from './document/table-cell';\r\nimport { HyperlinkElement } from './document/hyperlink';\r\nimport { DrawingElement, ImageElement } from './document/drawing';\r\nimport { BreakElement, LastRenderedPageBreakElement } from './document/breaks';\r\nimport { SymbolElement, TabElement, TextElement } from './document/text';\r\nimport { LineSpacing } from './document/line-spacing';\r\nimport { Style } from './styles/style';\r\nimport { HeaderElement } from './header/header';\r\nimport { FooterElement } from './footer/footer';\r\nimport { BodyElement } from './document/document';\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    domStyleMap: Record<string, IDomStyle>;\r\n    styleMap: Record<string, Style>;\r\n    keepOrigin: boolean = false;\r\n    renderHeaders: boolean = true;\r\n    renderFooters: boolean = true;\r\n\r\n    constructor(private htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.domStyleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.domStyleMap = this.processDomStyles(document.stylesPart.domStyles);\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.documentElement.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: Style[]) {\r\n        const styleMap = keyBy(styles, s => s.id);\r\n\r\n        for(let style of styles.filter(s => s.basedOn)) {\r\n            const baseStyle = styleMap[style.basedOn];\r\n        \r\n            if(baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n            } else if (this.options.debug) {\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n            }\r\n        }\r\n\r\n        return styleMap;\r\n    }\r\n\r\n    processDomStyles(styles: IDomStyle[]) {\r\n        var domStylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            domStylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = domStylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return domStylesMap;\r\n    }\r\n\r\n    processElement(element: DocxElement) {\r\n        if (\"children\" in element) {\r\n            for (var e of (element as DocxContainer).children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e instanceof TableElement) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: TableElement) {\r\n        for (var r of table.children) {\r\n            for (var c of (r as DocxContainer).children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private createElement(tagName) {\r\n        return this.htmlDocument.createElement(tagName);\r\n    }\r\n\r\n    private renderContainer(elem: DocxContainer, tagName: string): HTMLElement {\r\n        const result = this.createElement(tagName);\r\n        this.renderElements(elem.children, elem, result);\r\n        return result;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: BodyElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            const sectionProps = section.sectProps || document.sectionProps;\r\n            var sectionElement = this.createSection(this.className, sectionProps);\r\n\r\n            // if(this.renderHeaders && sectionProps.headerRefs) {\r\n            //     for(const headerRef of sectionProps.headerRefs) {\r\n            //     }\r\n            // }\r\n\r\n            this.renderElements(section.elements, document, sectionElement);\r\n\r\n            // if(this.renderFooters && sectionProps.footerRefs) {\r\n            //     for(const headerRef of sectionProps.footerRefs) {\r\n            //         const partPath = this.document.getPathById(this.document.documentPart, headerRef.id);\r\n            //         const part = this.document.partsMap[partPath] as FooterPart;\r\n\r\n            //         this.processElement(part.footerElement);\r\n            //         sectionElement.appendChild(this.renderElement(part.footerElement, null))\r\n            //     }\r\n            // }\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isPageBreakElement(elem: DocxElement): boolean {\r\n        if (elem instanceof LastRenderedPageBreakElement)\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return elem instanceof BreakElement && elem.type === \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: DocxElement[]): { sectProps: SectionProperties, elements: DocxElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if (elem instanceof ParagraphElement) {\r\n                const styleName = elem.props.styleId;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem instanceof ParagraphElement)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children.length > 0) {\r\n                    pBreakIndex = p.children.findIndex((r: DocxContainer) => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex] as RunElement;\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = Object.assign(new ParagraphElement(), elem, { children: children.slice(pBreakIndex) });\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  Object.assign(new RunElement(), breakRun, { children: runChildren.slice(0, rBreakIndex) });\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderColor(c: string, autoColor: string = 'black'): string {\r\n        if (/[a-f0-9]{6}/i.test(c))\r\n            return `#${c}`;\r\n\r\n        return c === 'auto' ? autoColor : c;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && (num.format == \"decimal\" || num.format == \"lowerLetter\")) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.domStyleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                if (style.paragraphProps && subStyle.target == \"p\") {\r\n                    this.renderParagraphProperties(subStyle.values, style.paragraphProps);\r\n                }\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: DocxElement, parent: DocxElement): Node {\r\n        if (elem instanceof ParagraphElement) {\r\n            return this.renderParagraph(elem);\r\n        } else if (elem instanceof BookmarkStartElement) {\r\n            return this.renderBookmarkStart(elem);\r\n        } else if (elem instanceof RunElement) {\r\n            return this.renderRun(elem);\r\n        } else if (elem instanceof TextElement) {\r\n            return this.renderText(elem);\r\n        } else if (elem instanceof SymbolElement) {\r\n            return this.renderSymbol(elem);\r\n        } else if (elem instanceof TabElement) {\r\n            return this.renderTab(elem);\r\n        } else if (elem instanceof TableElement) {\r\n            return this.renderTable(elem);\r\n        } else if (elem instanceof TableRowElement) {\r\n            return this.renderTableRow(elem);\r\n        } else if (elem instanceof TableCellElement) {\r\n            return this.renderTableCell(elem);\r\n        } else if (elem instanceof HyperlinkElement) {\r\n            return this.renderHyperlink(elem);\r\n        } else if (elem instanceof DrawingElement) {\r\n            return this.renderDrawing(elem);\r\n        } else if (elem instanceof ImageElement) {\r\n            return this.renderImage(elem);\r\n        } else if (elem instanceof HeaderElement) {\r\n            return this.renderHeader(elem);\r\n        } else if (elem instanceof FooterElement) {\r\n            return this.renderFooter(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: DocxContainer, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: DocxElement[], parent: DocxElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => {\r\n            let n = this.renderElement(e, parent);\r\n\r\n            if(n && this.keepOrigin)\r\n                (n as any).$$docxElement = e;\r\n\r\n            return n;\r\n        }).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.renderContainer(elem, \"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        const style = elem.props.styleId && this.styleMap?.[elem.props.styleId]; \r\n        const numbering = elem.props.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level ?? 0);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.props.styleId) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.props.styleId));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraphProperties(style: any, props: ParagraphProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch(p as keyof(ParagraphProperties)) {\r\n                case \"lineSpacing\":\r\n                    this.renderLineSpacing(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderLineSpacing(style: any, spacing: LineSpacing) {   \r\n        //TODO\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch (p as keyof(RunProperties)) {\r\n                case 'highlight':\r\n                    style['background'] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'shading':\r\n                    style['background'] = this.renderShading(v);\r\n                    break;\r\n\r\n                case 'border':\r\n                    style['border'] = this.renderBorder(v);\r\n                    break;\r\n\r\n                case 'color':\r\n                    style[\"color\"] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'fontSize':\r\n                    style[\"font-size\"] = this.renderLength(v);\r\n                    break;\r\n\r\n                case 'bold':\r\n                    style[\"font-weight\"] = v ? 'bold' : 'normal';\r\n                    break;\r\n\r\n                case 'italics':\r\n                    style[\"font-style\"] = v ? 'italic' : 'normal';\r\n                    break;\r\n\r\n                case 'smallCaps':\r\n                    style[\"font-size\"] = v ? 'smaller' : 'none';\r\n                case 'caps':\r\n                    style[\"text-transform\"] = v ? 'uppercase' : 'none';\r\n                    break;\r\n\r\n                case 'strike':\r\n                case 'strike':\r\n                    style[\"text-decoration\"] = v ? 'line-through' : 'none';\r\n                    break;\r\n\r\n                case 'fonts':\r\n                    style[\"font-family\"] = this.renderRunFonts(v);\r\n                    break;\r\n    \r\n                case 'underline':\r\n                    this.renderUnderline(style, v);\r\n                    break;\r\n                \r\n                case 'verticalAlignment':\r\n                    this.renderRunVerticalAlignment(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderRunVerticalAlignment(style: any, align: string) {\r\n        switch(align) {\r\n            case 'subscript': \r\n                style['vertical-align'] = 'sub';\r\n                style['font-size'] = 'small';\r\n                break;\r\n\r\n            case 'superscript': \r\n                style['vertical-align'] = 'super';\r\n                style['font-size'] = 'small';\r\n                break;\r\n        }\r\n    }\r\n\r\n    renderRunFonts(fonts: RunFonts) {\r\n        return [fonts.ascii, fonts.hAscii, fonts.cs, fonts.eastAsia].filter(x => x).map(x => `'${x}'`).join(',');\r\n    }\r\n\r\n    renderBorder(border: Border) {\r\n        if (border.type == 'nil')\r\n            return 'none';\r\n\r\n        return `${this.renderLength(border.size)} solid ${this.renderColor(border.color)}`;\r\n    }\r\n    \r\n    renderShading(shading: Shading) {\r\n        if (shading.type == 'clear')\r\n            return this.renderColor(shading.background, autos.shd);\r\n        \r\n        return this.renderColor(shading.background, autos.shd);\r\n    }\r\n    \r\n    renderUnderline(style: any, underline: Underline) {\r\n        if (underline.type == null || underline.type == \"none\")\r\n            return;\r\n\r\n        switch (underline.type) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        if (underline.color)\r\n            style[\"text-decoration-color\"] = this.renderColor(underline.color);\r\n    }\r\n\r\n    renderHyperlink(elem: HyperlinkElement) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.anchor)\r\n            result.href = elem.anchor;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: DrawingElement) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: ImageElement) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeader(elem: HeaderElement) {\r\n        return this.renderContainer(elem, \"header\");\r\n    }\r\n\r\n    renderFooter(elem: HeaderElement) {\r\n        return this.renderContainer(elem, \"footer\");\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: TabElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, ParagraphElement);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        var result = this.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        //this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderRunProperties(result.style, elem.props);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: TableElement) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: TableColumn[]) {\r\n        const result = this.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n            colElem.style.width = this.renderLength(col.width);\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: TableRowElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: TableCellElement) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key of Object.getOwnPropertyNames(style)) {\r\n            ouput.style[key] = style[key];\r\n        }\r\n    }\r\n\r\n    renderClass(input: DocxElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText) \r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string, numformat: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends DocxElement>(elem: DocxElement, type: any): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && !(parent instanceof type))\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertPercentage, convertBoolean  } from \"../document/common\";\r\nimport config from '../config';\r\n\r\nexport function parseXmlString(xmlString: string): Document {\r\n    if (config.trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n    return new DOMParser().parseFromString(xmlString, \"application/xml\");\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport function elements(elem: Element) {\r\n    return Array.from(elem.childNodes).filter(x => x.nodeType == Node.ELEMENT_NODE);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    percentageAttr(node: Element, attrName: string): number {\r\n        return convertPercentage(this.attr(node, attrName));\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","const schemaSymbol = Symbol(\"open-xml-schema\");\r\n\r\nexport type ValueConverter = (val: string) => any;\r\n\r\nexport type ElementConverter = (val: Element) => any;\r\n\r\nexport function element(name: string) {\r\n    return function(target: any) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.elemName = name;\r\n    }\r\n}\r\n\r\nexport function children(...elements: any[]) {\r\n    return function(target) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.children = {};\r\n        for(let c of elements) {\r\n            let cs = getPrototypeXmlSchema(c.prototype);\r\n            schema.children[cs.elemName] = { proto: c.prototype, schema: cs };\r\n        }\r\n    }\r\n}\r\n\r\nexport function fromText(convert: ValueConverter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.text = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromAttribute(attrName: string, convert: ValueConverter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.attrs[attrName] = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromElement(elemName: string, convert: ElementConverter) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.elements[elemName] = { prop, convert };\r\n    }   \r\n}\r\n\r\nexport function buildXmlSchema(schemaObj: any): OpenXmlSchema {\r\n    var schema: OpenXmlSchema = {\r\n        text: null,\r\n        attrs: {},\r\n        elements: {},\r\n        elemName: null,\r\n        children: null\r\n    };\r\n\r\n    for(let p in schemaObj) {\r\n        let v = schemaObj[p];\r\n\r\n        if(p == \"$elem\") {\r\n            schema.elemName = v;\r\n        }\r\n        else if(v.$attr) {\r\n            schema.attrs[v.$attr] = { prop: p, convert: null };\r\n        }\r\n    }\r\n\r\n    return schema;\r\n}\r\n\r\nexport function deserializeElement<T = any>(n: Element, output: T, ops: DeserializeOptions): T {\r\n    var proto = Object.getPrototypeOf(output);\r\n    var schema = proto[schemaSymbol];\r\n\r\n    if (ops?.keepOrigin) {\r\n        (output as any).$$xmlElement = n;\r\n    }  \r\n\r\n    if (schema == null)\r\n        return output;\r\n\r\n    deserializeSchema(n, output, schema);\r\n\r\n    for (let i = 0, l = n.children.length; i < l; i ++) {\r\n        let elem = n.children.item(i);\r\n        let child = schema.children[elem.localName];\r\n\r\n        if (child) {\r\n            let obj = Object.create(child.proto);\r\n            deserializeElement(elem, obj, ops);\r\n            (output as any).children.push(obj);\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function deserializeSchema(n: Element, output: any, schema: OpenXmlSchema) {\r\n    if (schema.text) {\r\n        let prop = schema.text;\r\n        output[prop.prop] = prop.convert ? prop.convert(n.textContent) : n.textContent; \r\n    }\r\n\r\n    for (let i = 0, l = n.attributes.length; i < l; i++) {\r\n        const attr = n.attributes.item(i);\r\n        const prop = schema.attrs[attr.localName];\r\n\r\n        if(prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert ? prop.convert(attr.value) : attr.value; \r\n    }\r\n\r\n    for (let i = 0, l = n.childNodes.length; i < l; i ++) {\r\n        const elem = n.childNodes.item(i) as Element;\r\n        const prop = elem.nodeType === Node.ELEMENT_NODE ? schema.elements[elem.localName] : null;\r\n\r\n        if (prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert(elem); \r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport interface DeserializeOptions {\r\n    keepOrigin: boolean\r\n}\r\n\r\nexport interface OpenXmlSchema {\r\n    elemName: string;\r\n    text: OpenXmlSchemaProperty;\r\n    attrs: Record<string, OpenXmlSchemaProperty>;\r\n    elements: Record<string, any>;\r\n    children: Record<string, any>;\r\n}\r\n\r\nexport interface OpenXmlSchemaProperty {\r\n    prop: string;\r\n    convert: ValueConverter;\r\n}\r\n\r\nfunction getPrototypeXmlSchema(proto: any): OpenXmlSchema {\r\n    return proto[schemaSymbol] || (proto[schemaSymbol] = {\r\n        text: null,\r\n        attrs: {},\r\n        children: {},\r\n        elements: {}\r\n    });\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n\r\n    paragraphStyle: any;\r\n    runStyle: any;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseRunProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\nexport interface Style {\r\n    id: string;\r\n    type: StyleType;\r\n    customStyle: boolean\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): Style {\r\n    let result = {\r\n        id: xml.attr(elem, 'styleId'),\r\n        type: xml.attr(elem, 'type'),\r\n        customStyle: xml.boolAttr(elem, 'customStyle', false),\r\n        default: xml.boolAttr(elem, 'default', false),\r\n    } as Style;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { keyBy } from \"../utils\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, Style, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n    \r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseStylesPart(root, this._package.xmlParser));\r\n        this.domStyles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { DocxElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: DocxElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n    \r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        return rel ? splitPath(part.path)[0] + rel.target : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"sourceRoot":""}