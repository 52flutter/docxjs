{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/header-footer/elements.ts","webpack://docx/./src/header-footer/parts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/notes/elements.ts","webpack://docx/./src/notes/parts.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/settings/settings-part.ts","webpack://docx/./src/settings/settings.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd {\"root\":\"JSZip\",\"commonjs\":\"jszip\",\"commonjs2\":\"jszip\",\"amd\":\"jszip\"}","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jszip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jszip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"jszip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__626__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n\tEndnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement, NoteReferenceElement\r\n} from './document/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseNotes(xmlDoc: Element, elemName: string, elemClass: any): any[] {\r\n        var result = [];\r\n\r\n        for (let el of globalXmlParser.elements(xmlDoc, elemName)) {\r\n            const node = new elemClass();\r\n            node.id = globalXmlParser.attr(el, \"id\");\r\n            node.noteType = globalXmlParser.attr(el, \"type\");\r\n            node.children = this.parseBodyElements(el);\r\n            result.push(node);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var background = globalXmlParser.element(xmlDoc, \"background\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xml.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n            //case \"numbering\": result.target = \"p\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyleName: undefined,\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pStyle\":\r\n                    result.pStyleName = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <WmlParagraph>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): WmlRun {\r\n        var result: WmlRun = <WmlRun>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"noBreakHyphen\":\r\n                    result.children.push({ type: DomType.NoBreakHyphen });\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<NoteReferenceElement>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.stringAttr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n\t\t\t\tcase \"endnoteReference\":\r\n\t\t\t\t\tresult.children.push(<NoteReferenceElement>{ \r\n\t\t\t\t\t\ttype: DomType.EndnoteReference, \r\n\t\t\t\t\t\tid: xml.stringAttr(c, \"id\")\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.verticalAlign = \"sub\"; break;\r\n                        case \"superscript\": run.verticalAlign = \"super\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        pos.relative = globalXmlParser.attr(n, \"relativeFrom\") ?? pos.relative;\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"vanish\":\r\n                    if (xml.boolAttr(c, \"val\", true))\r\n                        style[\"display\"] = \"none\";\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null)\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"none\":\r\n                style[\"text-decoration\"] = \"none\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\r\n\r\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\r\n\r\n        if (fonts.length > 0)\r\n            style[\"font-family\"] = fonts;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == Node.ELEMENT_NODE)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        if (v) {\r\n            if (v == \"auto\") {\r\n                return autoColor;\r\n            } else if (knownColors.includes(v)) {\r\n                return v;\r\n            }\r\n\r\n            return `#${v}`;\r\n        }\r\n\r\n        var themeColor = xml.stringAttr(node, \"themeColor\");\r\n\r\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        return globalXmlParser.intAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static themeValue(c: Element, attr: string) {\r\n        var val = xml.stringAttr(c, attr); \r\n        return val ? `var(--docx-${val}-font)` : null;\r\n    }\r\n    \r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlBookmarkStart extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface WmlBookmarkEnd extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): WmlBookmarkStart {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): WmlBookmarkEnd {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    if (!val) {\r\n        return null;\r\n    }\r\n\r\n    //\"simplified\" docx documents use pt's as units\r\n    if (val.endsWith('pt')) {\r\n        return { value: parseFloat(val), type: 'pt' };\r\n    }\r\n\r\n    if (val.endsWith('%')) {\r\n        return { value: parseFloat(val), type: '%' };\r\n    }\r\n\r\n    return { value: parseInt(val) * usage.mul, type: usage.unit };\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    NoBreakHyphen = \"noBreakHyphen\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n\tEndnoteReference = \"endnoteReference\",\r\n    Footnote = \"footnote\",\r\n    Endnote = \"endnote\",\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface NoteReferenceElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyleName: string;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    suff: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface WmlParagraph extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlRun extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Borders, parseBorders } from \"./border\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    pageBorders: Borders;\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n    titlePage: boolean;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n\r\n            case \"titlePg\":\r\n                section.titlePage = xml.boolAttr(e, \"val\", true);\r\n                break;\r\n\r\n            case \"pgBorders\":\r\n                section.pageBorders = parseBorders(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n\trenderEndnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true,\r\n\trenderEndnotes: true\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nconst embedFontTypeMap = {\r\n    embedRegular: 'regular',\r\n    embedBold: 'bold',\r\n    embedItalic: 'italic',\r\n    embedBoldItalic: 'boldItalic',\r\n}\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    embedFontRefs: EmbedFontRef[];\r\n}\r\n\r\nexport interface EmbedFontRef {\r\n    id: string;\r\n    key: string;\r\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\r\n}\r\n\r\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\r\n    return xml.elements(root).map(el => parseFont(el, xml));\r\n}\r\n\r\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xml.attr(elem, \"name\"),\r\n        embedFontRefs: []\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n            case \"embedBold\":\r\n            case \"embedItalic\":\r\n            case \"embedBoldItalic\":\r\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\r\n    return { \r\n        id: xml.attr(elem, \"id\"), \r\n        key: xml.attr(elem, \"fontKey\"),\r\n        type: embedFontTypeMap[elem.localName]\r\n    };\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { OpenXmlElement } from \"../document/dom\";\r\nimport { WmlHeader, WmlFooter } from \"./elements\";\r\n\r\nexport abstract class BaseHeaderFooterPart<T extends OpenXmlElement = OpenXmlElement> extends Part {\r\n    rootElement: T;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.rootElement = this.createRootElement();\r\n        this.rootElement.children = this._documentParser.parseBodyElements(root);\r\n    }\r\n\r\n    protected abstract createRootElement(): T;\r\n}\r\n\r\nexport class HeaderPart extends BaseHeaderFooterPart<WmlHeader> {\r\n    protected createRootElement(): WmlHeader {\r\n        return new WmlHeader();\r\n    }\r\n}\r\n\r\nexport class FooterPart extends BaseHeaderFooterPart<WmlFooter> {\r\n    protected createRootElement(): WmlFooter {\r\n        return new WmlFooter();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement, NoteReferenceElement\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph } from './document/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { FooterHeaderReference, SectionProperties } from './document/section';\r\nimport { WmlRun, RunProperties } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { WmlBaseNote, WmlFootnote } from './notes/elements';\r\nimport { ThemePart } from './theme/theme-part';\r\nimport { BaseHeaderFooterPart } from './header-footer/parts';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: Record<string, IDomStyle> = {};\r\n\r\n    footnoteMap: Record<string, WmlFootnote> = {};\r\n\tendnoteMap: Record<string, WmlFootnote> = {};\r\n    currentFootnoteIds: string[];\r\n    currentEndnoteIds: string[] = [];\r\n    usedHederFooterParts: any[] = [];\r\n\r\n\tdefaultTabSize: Length;\t\r\n\tcurrentTabs: any[] = [];\r\n\ttabsTimeout: any = 0;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.themePart) {\r\n            appendComment(styleContainer, \"docxjs document theme values\");\r\n            this.renderTheme(document.themePart, styleContainer);\r\n        }\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docxjs document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            this.prodessNumberings(document.numberingPart.domNumberings);\r\n\r\n            appendComment(styleContainer, \"docxjs document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.endnotesPart) {\r\n            this.endnoteMap = keyBy(document.endnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.settingsPart) {\r\n\t\t\tthis.defaultTabSize = document.settingsPart.settings?.defaultTabStop;\r\n\t\t}\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\r\n        } else {\r\n            appendChildren(bodyContainer, sectionElements);\r\n        }\r\n\r\n\t\tthis.refreshTabStops();\r\n    }\r\n\r\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\r\n        const variables = {};\r\n        const fontScheme = themePart.theme?.fontScheme;\r\n\r\n        if (fontScheme) {\r\n            if (fontScheme.majorFont) {\r\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\r\n            }\r\n\r\n            if (fontScheme.minorFont) {\r\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\r\n            }\r\n        }\r\n\r\n        const colorScheme = themePart.theme?.colorScheme;\r\n\r\n        if (colorScheme) {\r\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\r\n                variables[`--docx-${k}-color`] = `#${v}`;\r\n            }\r\n        }\r\n\r\n        const cssText = this.styleToString(`.${this.className}`, variables);\r\n        styleContainer.appendChild(createStyleElement(cssText));\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts) {\r\n            for (let ref of f.embedFontRefs) {\r\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\r\n                    var cssValues = {\r\n                        'font-family': f.name,\r\n                        'src': `url(${fontData})`\r\n                    };\r\n\r\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-weight'] = 'bold';\r\n                    }\r\n\r\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-style'] = 'italic';\r\n                    }\r\n\r\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\r\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\r\n                    styleContainer.appendChild(createStyleElement(cssText));\r\n\t\t\t\t\tthis.refreshTabStops();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.find(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues) {\r\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\r\n                    }\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    prodessNumberings(numberings: IDomNumbering[]) {\r\n        for (let num of numberings.filter(n => n.pStyleName)) {\r\n            const style = this.styleMap && this.styleMap[num.pStyleName];\r\n\r\n            if (style?.paragraphProps?.numbering) {\r\n                style.paragraphProps.numbering.level = num.level;\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\t\tconst sections = this.splitBySection(document.children);\r\n\r\n        for (let i = 0, l = sections.length; i < l; i++) {\r\n            this.currentFootnoteIds = [];\r\n\r\n\t\t\tconst section = sections[i];\r\n            const props = section.sectProps || document.props;\r\n            const sectionElement = this.createSection(this.className, props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n\r\n            this.options.renderHeaders && this.renderHeaderFooter(props.headerRefs, props, result.length, sectionElement);\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements, contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderNotes(this.currentFootnoteIds, this.footnoteMap, sectionElement);\r\n            }\r\n\r\n\t\t\tif (this.options.renderEndnotes && i == l - 1) {\r\n                this.renderNotes(this.currentEndnoteIds, this.endnoteMap, sectionElement);\r\n\t\t\t}\r\n\r\n            this.options.renderFooters && this.renderHeaderFooter(props.footerRefs, props, result.length, sectionElement);\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, into: HTMLElement) {\r\n        if (!refs) return;\r\n\r\n        var ref = props.titlePage ? refs.find(x => x.type == \"first\") \r\n            : (page == 0 ? refs.find(x => x.type == \"first\") : null)\r\n            ?? (page % 2 == 0 ? refs.find(x => x.type == \"even\") : null)\r\n            ?? refs.find(x => x.type == \"default\");\r\n\r\n        var part = ref && this.document.findPartByRelId(ref.id, this.document.documentPart) as BaseHeaderFooterPart;\r\n\r\n        if (part) {\r\n            if (!this.usedHederFooterParts.includes(part.path)) {\r\n                this.processElement(part.rootElement);\r\n                this.usedHederFooterParts.push(part.path);\r\n            }\r\n            this.renderElements([part.rootElement], into);\r\n        }\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as WmlParagraph).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value.toFixed(2)}${l.type ?? ''}` : null;\r\n    }\r\n\r\n    renderWrapper(children: HTMLElement[]) {\r\n        return this.createElement(\"div\", { className: `${this.className}-wrapper` }, children);\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; overflow: hidden; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n        var defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNotes(noteIds: string[], notesMap: Record<string, WmlBaseNote>, into: HTMLElement) {\r\n        var notes = noteIds.map(id => notesMap[id]).filter(x => x);\r\n\r\n        if (notes.length > 0) {\r\n            var result = this.createElement(\"ol\", null, this.renderElements(notes));\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<WmlParagraph>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<WmlBookmarkStart>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<WmlRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n\t\t\tcase DomType.Endnote:\r\n\t\t\t\treturn this.renderContainer(elem, \"li\");\r\n\r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as NoteReferenceElement);\r\n\r\n\t\t\tcase DomType.EndnoteReference:\r\n\t\t\t\treturn this.renderEndnoteReference(elem as NoteReferenceElement);\r\n\t\r\n\t\t\tcase DomType.NoBreakHyphen:\r\n                return this.createElement(\"wbr\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\r\n        return this.createElement(tagName, null, this.renderChildren(elem));\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        const style = elem.styleName && this.styleMap && this.styleMap[elem.styleName];\r\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: NoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n\trenderEndnoteReference(elem: NoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentEndnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentEndnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n\t\t\tvar stops = findParent<WmlParagraph>(elem, DomType.Paragraph)?.tabs;\r\n\t\t\tthis.currentTabs.push({ stops, span: tabSpan });\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.verticalAlign) {\r\n            result.style.verticalAlign = elem.verticalAlign;\r\n            result.style.fontSize ||= \"small\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.createElement(\"colgroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key of Object.getOwnPropertyNames(style)) {\r\n            ouput.style[key] = style[key];\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",\r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n\r\n\trefreshTabStops() {\r\n\t\tif (!this.options.experimental) \r\n\t\t\treturn;\r\n\r\n\t\tclearTimeout(this.tabsTimeout);\r\n\r\n\t\tthis.tabsTimeout = setTimeout(() => {\r\n\t\t\tfor (let tab of this.currentTabs) {\r\n\t\t\t\tupdateTabStop(tab.span, tab.stops, this.defaultTabSize);\r\n\t\t\t}\r\n\t\t}, 500);\r\n\t}\r\n\r\n    createElement = createElement;\r\n}\r\n\r\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\r\n    tagName: T,\r\n    props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\r\n    children: Node[] = undefined\r\n): HTMLElementTagNameMap[T] {\r\n    var result = Object.assign(document.createElement(tagName), props);\r\n    children && appendChildren(result, children);\r\n    return result;\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction appendChildren(elem: HTMLElement, children: Node[]) {\r\n    children.forEach(c => elem.appendChild(c));\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    return createElement(\"style\", { innerHTML: cssText });\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { Length } from \"./document/common\";\r\nimport { ParagraphTab } from \"./document/paragraph\";\r\n\r\nconst defaultTab: ParagraphTab = { position: { value: 0, type: \"pt\" }, leader: \"none\", style: \"left\" };\r\nconst maxTabs = 50;\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], defaultTabSize: Length, pixelToPoint: number = 72 / 96) {\r\n\r\n    const p = elem.closest(\"p\");\r\n\r\n    const tbb = elem.getBoundingClientRect();\r\n    const pbb = p.getBoundingClientRect();\r\n    const pcs = getComputedStyle(p);\r\n\r\n\ttabs = tabs && tabs.length > 0 ? tabs.sort((a, b) => a.position.value - b.position.value) : [defaultTab];\r\n\r\n\tconst lastTab = tabs[tabs.length - 1];\r\n\tconst pWidthPt = pbb.width / pixelToPoint;\r\n\tconst size = defaultTabSize.value;\r\n\r\n\tfor (let pos = lastTab.position.value + defaultTabSize.value; pos < pWidthPt && tabs.length < maxTabs; pos += size) {\r\n\t\ttabs.push({ ...defaultTab, position: { value: pos, type: \"pt\" } });\r\n\t}\r\n\r\n    const marginLeft = parseFloat(pcs.marginLeft);\r\n    const textIntent = parseFloat(pcs.textIndent);\r\n    const pOffset = pbb.left + marginLeft;\r\n    let left = (tbb.left - pOffset) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    let width: any = 1;\r\n\r\n    if (tab.style == \"right\") {\r\n        const range = document.createRange();\r\n        range.setStart(p.firstChild, 0);\r\n        range.setEndAfter(p);\r\n\r\n        const nextBB = range.getBoundingClientRect();\r\n        const prevRight = (nextBB.width + marginLeft + textIntent) * pixelToPoint;\r\n        width = `${Math.floor(tab.position.value - prevRight)}pt`;\r\n    } else {\r\n        width = `${(tab.position.value - left)}pt`;\r\n    }\r\n\r\n    elem.innerHTML = \"&nbsp;\";\r\n    elem.style.textDecoration = \"inherit\";\r\n    elem.style.wordSpacing = width;\r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.textDecoration = \"underline\";\r\n            elem.style.textDecorationStyle = \"dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.textDecoration = \"underline\";\r\n            break;\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport abstract class WmlBaseNote implements OpenXmlElement {\r\n    id: string;\r\n\ttype: DomType;\r\n\tnoteType: string;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFootnote extends WmlBaseNote {\r\n\ttype = DomType.Footnote\r\n}\r\n\r\nexport class WmlEndnote extends WmlBaseNote {\r\n\ttype = DomType.Endnote\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlBaseNote, WmlEndnote, WmlFootnote } from \"./elements\";\r\n\r\nexport class BaseNotePart<T extends WmlBaseNote> extends Part {\r\n    protected _documentParser: DocumentParser;\r\n\r\n    notes: T[]\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n}\r\n\r\nexport class FootnotesPart extends BaseNotePart<WmlFootnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"footnote\", WmlFootnote);\r\n    }\r\n}\r\n\r\nexport class EndnotesPart extends BaseNotePart<WmlEndnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"endnote\", WmlEndnote);\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphStyle: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pStyle\":\r\n                result.paragraphStyle = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { WmlSettings, parseSettings } from \"./settings\";\r\n\r\nexport class SettingsPart extends Part {\r\n\tsettings: WmlSettings;\r\n\r\n\tconstructor(pkg: OpenXmlPackage, path: string) {\r\n\t\tsuper(pkg, path);\r\n\t}\r\n\r\n\tparseXml(root: Element) {\r\n\t\tthis.settings = parseSettings(root, this._package.xmlParser);\r\n\t}\r\n}","import { DocumentParser } from \"../document-parser\";\r\nimport { Length } from \"../document/common\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface WmlSettings {\r\n\tdefaultTabStop: Length;\r\n\tfootnoteProps: NoteProperties;\r\n\tendnoteProps: NoteProperties;\r\n\tautoHyphenation: boolean;\r\n}\r\n\r\nexport interface NoteProperties {\r\n\tnummeringFormat: string;\r\n\tdefaultNoteIds: string[];\r\n}\r\n\r\nexport function parseSettings(elem: Element, xml: XmlParser) {\r\n\tvar result = {} as WmlSettings; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"defaultTabStop\": result.defaultTabStop = xml.lengthAttr(el, \"val\"); break;\r\n\t\t\tcase \"footnotePr\": result.footnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"endnotePr\": result.endnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"autoHyphenation\": result.autoHyphenation = xml.boolAttr(el, \"val\"); break;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNoteProperties(elem: Element, xml: XmlParser) {\r\n\tvar result = {\r\n\t\tdefaultNoteIds: []\r\n\t} as NoteProperties; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"numFmt\": \r\n\t\t\t\tresult.nummeringFormat = xml.attr(el, \"val\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"footnote\": \r\n\t\t\tcase \"endnote\": \r\n\t\t\t\tresult.defaultNoteIds.push(xml.attr(el, \"id\"));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"http://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart, HeaderPart } from \"./header-footer/parts\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { EndnotesPart, FootnotesPart } from \"./notes/parts\";\r\nimport { SettingsPart } from \"./settings/settings-part\";\r\n\r\nconst topLevelRels = [\r\n\t{ type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n\t{ type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n\t{ type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n\tprivate _package: OpenXmlPackage;\r\n\tprivate _parser: DocumentParser;\r\n\r\n\trels: Relationship[];\r\n\tparts: Part[] = [];\r\n\tpartsMap: Record<string, Part> = {};\r\n\r\n\tdocumentPart: DocumentPart;\r\n\tfontTablePart: FontTablePart;\r\n\tnumberingPart: NumberingPart;\r\n\tstylesPart: StylesPart;\r\n\tfootnotesPart: FootnotesPart;\r\n\tendnotesPart: EndnotesPart;\r\n\tthemePart: ThemePart;\r\n\tcorePropsPart: CorePropsPart;\r\n\textendedPropsPart: ExtendedPropsPart;\r\n\tsettingsPart: SettingsPart;\r\n\r\n\tstatic load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n\t\tvar d = new WordDocument();\r\n\r\n\t\td._parser = parser;\r\n\r\n\t\treturn OpenXmlPackage.load(blob, options)\r\n\t\t\t.then(pkg => {\r\n\t\t\t\td._package = pkg;\r\n\r\n\t\t\t\treturn d._package.loadRelationships();\r\n\t\t\t}).then(rels => {\r\n\t\t\t\td.rels = rels;\r\n\r\n\t\t\t\tconst tasks = topLevelRels.map(rel => {\r\n\t\t\t\t\tconst r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n\t\t\t\t\treturn d.loadRelationshipPart(r.target, r.type);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.all(tasks);\r\n\t\t\t}).then(() => d);\r\n\t}\r\n\r\n\tsave(type = \"blob\"): Promise<any> {\r\n\t\treturn this._package.save(type);\r\n\t}\r\n\r\n\tprivate loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n\t\tif (this.partsMap[path])\r\n\t\t\treturn Promise.resolve(this.partsMap[path]);\r\n\r\n\t\tif (!this._package.get(path))\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tlet part: Part = null;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase RelationshipTypes.OfficeDocument:\r\n\t\t\t\tthis.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.FontTable:\r\n\t\t\t\tthis.fontTablePart = part = new FontTablePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Numbering:\r\n\t\t\t\tthis.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Styles:\r\n\t\t\t\tthis.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Theme:\r\n\t\t\t\tthis.themePart = part = new ThemePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footnotes:\r\n\t\t\t\tthis.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Endnotes:\r\n\t\t\t\tthis.endnotesPart = part = new EndnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footer:\r\n\t\t\t\tpart = new FooterPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Header:\r\n\t\t\t\tpart = new HeaderPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CoreProperties:\r\n\t\t\t\tthis.corePropsPart = part = new CorePropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.ExtendedProperties:\r\n\t\t\t\tthis.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Settings:\r\n\t\t\t\tthis.settingsPart = part = new SettingsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (part == null)\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tthis.partsMap[path] = part;\r\n\t\tthis.parts.push(part);\r\n\r\n\t\treturn part.load().then(() => {\r\n\t\t\tif (part.rels == null || part.rels.length == 0)\r\n\t\t\t\treturn part;\r\n\r\n\t\t\tconst [folder] = splitPath(part.path);\r\n\t\t\tconst rels = part.rels.map(rel => {\r\n\t\t\t\treturn this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n\t\t\t});\r\n\r\n\t\t\treturn Promise.all(rels).then(() => part);\r\n\t\t});\r\n\t}\r\n\r\n\tloadDocumentImage(id: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.documentPart, id, \"blob\")\r\n\t\t\t.then(x => x ? URL.createObjectURL(x) : null);\r\n\t}\r\n\r\n\tloadNumberingImage(id: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.numberingPart, id, \"blob\")\r\n\t\t\t.then(x => x ? URL.createObjectURL(x) : null);\r\n\t}\r\n\r\n\tloadFont(id: string, key: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n\t\t\t.then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n\t}\r\n\r\n\tfindPartByRelId(id: string, basePart: Part = null) {\r\n\t\tvar rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n\t\tconst folder = basePart ? splitPath(basePart.path)[0] : '';\r\n\t\treturn rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n\t}\r\n\r\n\tgetPathById(part: Part, id: string): string {\r\n\t\tconst rel = part.rels.find(x => x.id == id);\r\n\t\tconst [folder] = splitPath(part.path);\r\n\t\treturn rel ? resolvePath(rel.target, folder) : null;\r\n\t}\r\n\r\n\tprivate loadResource(part: Part, id: string, outputType: OutputType) {\r\n\t\tconst path = this.getPathById(part, id);\r\n\t\treturn path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n\t}\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n\tconst len = 16;\r\n\tconst trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n\tconst numbers = new Array(len);\r\n\r\n\tfor (let i = 0; i < len; i++)\r\n\t\tnumbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n\tfor (let i = 0; i < 32; i++)\r\n\t\tdata[i] = data[i] ^ numbers[i % len]\r\n\r\n\treturn data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__626__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(771);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__626__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseNotes","elemName","elemClass","result","el","node","noteType","children","parseBodyElements","push","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyleName","undefined","pStyle","rStyle","suff","bullet","find","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","EndnoteReference","instrText","d","parseDrawing","run","verticalAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","join","length","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","knownColors","cb","i","childNodes","nodeType","Node","ELEMENT_NODE","nodeName","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertSize","test","intVal","parseInt","Border","Percent","replace","valueOfBold","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","ns","wordml","drawingml","picture","mul","unit","LineHeight","usage","endsWith","parseFloat","defaultValue","namespaceURI","fontSize","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","titlePage","pageBorders","parseBorders","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","renderEndnotes","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","parseFonts","FontTablePart","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","WmlHeader","Header","WmlFooter","Footer","rootElement","createRootElement","BaseHeaderFooterPart","HeaderPart","FooterPart","htmlDocument","styleMap","footnoteMap","endnoteMap","currentEndnoteIds","usedHederFooterParts","currentTabs","tabsTimeout","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","prodessNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","notes","endnotesPart","settingsPart","defaultTabSize","settings","defaultTabStop","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appendChildren","refreshTabStops","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","Object","entries","colors","k","cssText","styleToString","createStyleElement","fontsPart","f","ref","loadFont","fontData","cssValues","processClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","numberings","processElement","processTable","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","sections","splitBySection","l","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","renderHeaderFooter","contentElement","renderElements","renderNotes","refs","page","into","part","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","defautStyles","subStyles","linkedStyle","concat","subStyle","noteIds","notesMap","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","Footnote","Endnote","renderFootnoteReference","renderEndnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","stops","findParent","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","numformat","substring","clearTimeout","setTimeout","tab","updateTabStop","assign","comment","createComment","defaultTab","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","pcs","getComputedStyle","lastTab","sort","pWidthPt","marginLeft","textIntent","pOffset","t","range","createRange","setStart","firstChild","setEndAfter","prevRight","Math","floor","textDecoration","wordSpacing","textDecorationStyle","WmlBaseNote","WmlFootnote","WmlEndnote","BaseNotePart","FootnotesPart","EndnotesPart","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","elementAttr","attrLocalName","attributes","floatAttr","convertBoolean","convertLength","globalXmlParser","parseSettings","SettingsPart","parseNoteProperties","defaultNoteIds","nummeringFormat","footnoteProps","endnoteProps","autoHyphenation","StylesPart","parseTheme","ThemePart","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","DmlTheme","themeElements","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","FontTable","Numbering","Styles","Theme","Footnotes","Endnotes","corePropsPart","extendedPropsPart","Settings","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}