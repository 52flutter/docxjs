{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/custom-props-part.ts","webpack://docx/./src/document-props/custom-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/header-footer/elements.ts","webpack://docx/./src/header-footer/parts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/notes/elements.ts","webpack://docx/./src/notes/parts.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/settings/settings-part.ts","webpack://docx/./src/settings/settings.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd {\"root\":\"JSZip\",\"commonjs\":\"jszip\",\"commonjs2\":\"jszip\",\"amd\":\"jszip\"}","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jszip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jszip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"jszip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__626__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n\tEndnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\r\n\tCustomProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/custom-properties\",\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement, NoteReferenceElement\r\n} from './document/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFieldChar, WmlFieldSimple, WmlInstructionText } from './document/fields';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseNotes(xmlDoc: Element, elemName: string, elemClass: any): any[] {\r\n        var result = [];\r\n\r\n        for (let el of globalXmlParser.elements(xmlDoc, elemName)) {\r\n            const node = new elemClass();\r\n            node.id = globalXmlParser.attr(el, \"id\");\r\n            node.noteType = globalXmlParser.attr(el, \"type\");\r\n            node.children = this.parseBodyElements(el);\r\n            result.push(node);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var background = globalXmlParser.element(xmlDoc, \"background\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xml.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n\t\t\t\tcase \"sdt\":\r\n\t\t\t\t\tthis.parseSdt(elem).forEach(el => children.push(el));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n            //case \"numbering\": result.target = \"p\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyleName: undefined,\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pStyle\":\r\n                    result.pStyleName = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\tparseSdt(node: Element): OpenXmlElement[] {\r\n\t\tconst sdtContent = globalXmlParser.element(node, \"sdtContent\");\r\n\t\treturn sdtContent ? this.parseBodyElements(sdtContent) : [];\r\n\t}\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <WmlParagraph>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): WmlRun {\r\n        var result: WmlRun = <WmlRun>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldSimple\":\r\n                    result.children.push(<WmlFieldSimple>{\r\n                        type: DomType.SimpleField,\r\n                        instruction: xml.stringAttr(c, \"instr\"),\r\n                        lock: xml.boolAttr(c, \"lock\", false),\r\n                        dirty: xml.boolAttr(c, \"dirty\", false)\r\n                    });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n\t\t\t\t\tresult.fieldRun = true;\r\n                    result.children.push(<WmlInstructionText>{\r\n                        type: DomType.Instruction,\r\n                        text: c.textContent\r\n                    });\r\n                    break;\r\n    \r\n                case \"fldChar\":\r\n\t\t\t\t\tresult.fieldRun = true;\r\n                    result.children.push(<WmlFieldChar>{\r\n                        type: DomType.ComplexField,\r\n                        charType: xml.stringAttr(c, \"fldCharType\"),\r\n                        lock: xml.boolAttr(c, \"lock\", false),\r\n                        dirty: xml.boolAttr(c, \"dirty\", false)\r\n                    });\r\n                    break;\r\n\r\n                case \"noBreakHyphen\":\r\n                    result.children.push({ type: DomType.NoBreakHyphen });\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<NoteReferenceElement>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.stringAttr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n\t\t\t\tcase \"endnoteReference\":\r\n\t\t\t\t\tresult.children.push(<NoteReferenceElement>{ \r\n\t\t\t\t\t\ttype: DomType.EndnoteReference, \r\n\t\t\t\t\t\tid: xml.stringAttr(c, \"id\")\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.verticalAlign = \"sub\"; break;\r\n                        case \"superscript\": run.verticalAlign = \"super\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        pos.relative = globalXmlParser.attr(n, \"relativeFrom\") ?? pos.relative;\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"vanish\":\r\n                    if (xml.boolAttr(c, \"val\", true))\r\n                        style[\"display\"] = \"none\";\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null)\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"none\":\r\n                style[\"text-decoration\"] = \"none\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\r\n\r\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\r\n\r\n        if (fonts.length > 0)\r\n            style[\"font-family\"] = fonts;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == Node.ELEMENT_NODE)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        if (v) {\r\n            if (v == \"auto\") {\r\n                return autoColor;\r\n            } else if (knownColors.includes(v)) {\r\n                return v;\r\n            }\r\n\r\n            return `#${v}`;\r\n        }\r\n\r\n        var themeColor = xml.stringAttr(node, \"themeColor\");\r\n\r\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        return globalXmlParser.intAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static themeValue(c: Element, attr: string) {\r\n        var val = xml.stringAttr(c, attr); \r\n        return val ? `var(--docx-${val}-font)` : null;\r\n    }\r\n    \r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { CustomProperty, parseCustomProps } from \"./custom-props\";\r\n\r\nexport class CustomPropsPart extends Part {\r\n    props: CustomProperty[];\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCustomProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CustomProperty {\r\n\tformatId: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport function parseCustomProps(root: Element, xml: XmlParser): CustomProperty[] {\r\n\treturn xml.elements(root, \"property\").map(e => {\r\n\t\tconst firstChild = e.firstChild;\r\n\r\n\t\treturn {\r\n\t\t\tformatId: xml.attr(e, \"fmtid\"),\r\n\t\t\tname: xml.attr(e, \"name\"),\r\n\t\t\ttype: firstChild.nodeName,\r\n\t\t\tvalue: firstChild.textContent\r\n\t\t};\r\n\t});\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlBookmarkStart extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface WmlBookmarkEnd extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): WmlBookmarkStart {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): WmlBookmarkEnd {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    if (!val) {\r\n        return null;\r\n    }\r\n\r\n    //\"simplified\" docx documents use pt's as units\r\n    if (val.endsWith('pt')) {\r\n        return { value: parseFloat(val), type: 'pt' };\r\n    }\r\n\r\n    if (val.endsWith('%')) {\r\n        return { value: parseFloat(val), type: '%' };\r\n    }\r\n\r\n    return { value: parseInt(val) * usage.mul, type: usage.unit };\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    NoBreakHyphen = \"noBreakHyphen\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n\tEndnoteReference = \"endnoteReference\",\r\n    Footnote = \"footnote\",\r\n    Endnote = \"endnote\",\r\n    SimpleField = \"simpleField\",\r\n    ComplexField = \"complexField\",\r\n    Instruction = \"instruction\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface NoteReferenceElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyleName: string;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    suff: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface WmlParagraph extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlRun extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n\tfieldRun?: boolean;  \r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Borders, parseBorders } from \"./border\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageNumber {\r\n    start: number;\r\n    chapSep: \"colon\" | \"emDash\" | \"endash\" | \"hyphen\" | \"period\" | string;\r\n    chapStyle: string;\r\n    format: \"none\" | \"cardinalText\" | \"decimal\" | \"decimalEnclosedCircle\" | \"decimalEnclosedFullstop\" \r\n        | \"decimalEnclosedParen\" | \"decimalZero\" | \"lowerLetter\" | \"lowerRoman\"\r\n        | \"ordinalText\" | \"upperLetter\" | \"upperRoman\" | string;\r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    pageBorders: Borders;\r\n    pageNumber: PageNumber;\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n    titlePage: boolean;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n\r\n            case \"titlePg\":\r\n                section.titlePage = xml.boolAttr(e, \"val\", true);\r\n                break;\r\n\r\n            case \"pgBorders\":\r\n                section.pageBorders = parseBorders(e, xml);\r\n                break;\r\n\r\n            case \"pgNumType\":\r\n                section.pageNumber = parsePageNumber(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parsePageNumber(elem: Element, xml: XmlParser): PageNumber {\r\n    return {\r\n        chapSep: xml.attr(elem, \"chapSep\"),\r\n        chapStyle: xml.attr(elem, \"chapStyle\"),\r\n        format: xml.attr(elem, \"fmt\"),\r\n        start: xml.intAttr(elem, \"start\")\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n\trenderEndnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true,\r\n\trenderEndnotes: true\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nconst embedFontTypeMap = {\r\n    embedRegular: 'regular',\r\n    embedBold: 'bold',\r\n    embedItalic: 'italic',\r\n    embedBoldItalic: 'boldItalic',\r\n}\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    embedFontRefs: EmbedFontRef[];\r\n}\r\n\r\nexport interface EmbedFontRef {\r\n    id: string;\r\n    key: string;\r\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\r\n}\r\n\r\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\r\n    return xml.elements(root).map(el => parseFont(el, xml));\r\n}\r\n\r\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xml.attr(elem, \"name\"),\r\n        embedFontRefs: []\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n            case \"embedBold\":\r\n            case \"embedItalic\":\r\n            case \"embedBoldItalic\":\r\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\r\n    return { \r\n        id: xml.attr(elem, \"id\"), \r\n        key: xml.attr(elem, \"fontKey\"),\r\n        type: embedFontTypeMap[elem.localName]\r\n    };\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { OpenXmlElement } from \"../document/dom\";\r\nimport { WmlHeader, WmlFooter } from \"./elements\";\r\n\r\nexport abstract class BaseHeaderFooterPart<T extends OpenXmlElement = OpenXmlElement> extends Part {\r\n    rootElement: T;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.rootElement = this.createRootElement();\r\n        this.rootElement.children = this._documentParser.parseBodyElements(root);\r\n    }\r\n\r\n    protected abstract createRootElement(): T;\r\n}\r\n\r\nexport class HeaderPart extends BaseHeaderFooterPart<WmlHeader> {\r\n    protected createRootElement(): WmlHeader {\r\n        return new WmlHeader();\r\n    }\r\n}\r\n\r\nexport class FooterPart extends BaseHeaderFooterPart<WmlFooter> {\r\n    protected createRootElement(): WmlFooter {\r\n        return new WmlFooter();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement, NoteReferenceElement\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph } from './document/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { computePixelToPoint, updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { FooterHeaderReference, SectionProperties } from './document/section';\r\nimport { WmlRun, RunProperties } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { WmlBaseNote, WmlFootnote } from './notes/elements';\r\nimport { ThemePart } from './theme/theme-part';\r\nimport { BaseHeaderFooterPart } from './header-footer/parts';\r\nimport { Part } from './common/part';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: Record<string, IDomStyle> = {};\r\n\tcurrentPart: Part = null;\r\n\r\n    footnoteMap: Record<string, WmlFootnote> = {};\r\n\tendnoteMap: Record<string, WmlFootnote> = {};\r\n    currentFootnoteIds: string[];\r\n    currentEndnoteIds: string[] = [];\r\n    usedHederFooterParts: any[] = [];\r\n\r\n\tdefaultTabSize: Length;\t\r\n\tcurrentTabs: any[] = [];\r\n\ttabsTimeout: any = 0;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.themePart) {\r\n            appendComment(styleContainer, \"docxjs document theme values\");\r\n            this.renderTheme(document.themePart, styleContainer);\r\n        }\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docxjs document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            this.prodessNumberings(document.numberingPart.domNumberings);\r\n\r\n            appendComment(styleContainer, \"docxjs document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.endnotesPart) {\r\n            this.endnoteMap = keyBy(document.endnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.settingsPart) {\r\n\t\t\tthis.defaultTabSize = document.settingsPart.settings?.defaultTabStop;\r\n\t\t}\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\r\n        } else {\r\n            appendChildren(bodyContainer, sectionElements);\r\n        }\r\n\r\n\t\tthis.refreshTabStops();\r\n    }\r\n\r\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\r\n        const variables = {};\r\n        const fontScheme = themePart.theme?.fontScheme;\r\n\r\n        if (fontScheme) {\r\n            if (fontScheme.majorFont) {\r\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\r\n            }\r\n\r\n            if (fontScheme.minorFont) {\r\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\r\n            }\r\n        }\r\n\r\n        const colorScheme = themePart.theme?.colorScheme;\r\n\r\n        if (colorScheme) {\r\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\r\n                variables[`--docx-${k}-color`] = `#${v}`;\r\n            }\r\n        }\r\n\r\n        const cssText = this.styleToString(`.${this.className}`, variables);\r\n        styleContainer.appendChild(createStyleElement(cssText));\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts) {\r\n            for (let ref of f.embedFontRefs) {\r\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\r\n                    const cssValues = {\r\n                        'font-family': f.name,\r\n                        'src': `url(${fontData})`\r\n                    };\r\n\r\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-weight'] = 'bold';\r\n                    }\r\n\r\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-style'] = 'italic';\r\n                    }\r\n\r\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\r\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\r\n                    styleContainer.appendChild(createStyleElement(cssText));\r\n\t\t\t\t\tthis.refreshTabStops();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\r\n\r\n        for (const style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n\r\n                for (const baseValues of baseStyle.styles) {\r\n                    const styleValues = style.styles.find(x => x.target == baseValues.target);\r\n\r\n\t\t\t\t\tif (styleValues) {\r\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstyle.styles.push({ target: baseValues.target, values: { ...baseValues.values } });\r\n                    }\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    prodessNumberings(numberings: IDomNumbering[]) {\r\n        for (let num of numberings.filter(n => n.pStyleName)) {\r\n            const style = this.styleMap && this.styleMap[num.pStyleName];\r\n\r\n            if (style?.paragraphProps?.numbering) {\r\n                style.paragraphProps.numbering.level = num.level;\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\t\tconst sections = this.splitBySection(document.children);\r\n\t\tlet prevProps = null;\r\n\r\n        for (let i = 0, l = sections.length; i < l; i++) {\r\n            this.currentFootnoteIds = [];\r\n\r\n\t\t\tconst section = sections[i];\r\n            const props = section.sectProps || document.props;\r\n            const sectionElement = this.createSection(this.className, props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n\r\n            this.options.renderHeaders && this.renderHeaderFooter(props.headerRefs, props, \r\n\t\t\t\tresult.length, prevProps != props, sectionElement);\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements, contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderNotes(this.currentFootnoteIds, this.footnoteMap, sectionElement);\r\n            }\r\n\r\n\t\t\tif (this.options.renderEndnotes && i == l - 1) {\r\n                this.renderNotes(this.currentEndnoteIds, this.endnoteMap, sectionElement);\r\n\t\t\t}\r\n\r\n            this.options.renderFooters && this.renderHeaderFooter(props.footerRefs, props, \r\n\t\t\t\tresult.length, prevProps != props, sectionElement);\r\n\r\n            result.push(sectionElement);\r\n\t\t\tprevProps = props;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, firstOfSection: boolean, into: HTMLElement) {\r\n        if (!refs) return;\r\n\r\n        var ref = (props.titlePage && firstOfSection ? refs.find(x => x.type == \"first\") : null)\r\n            ?? (page % 2 == 1 ? refs.find(x => x.type == \"even\") : null)\r\n            ?? refs.find(x => x.type == \"default\");\r\n\r\n        var part = ref && this.document.findPartByRelId(ref.id, this.document.documentPart) as BaseHeaderFooterPart;\r\n\r\n        if (part) {\r\n\t\t\tthis.currentPart = part;\r\n            if (!this.usedHederFooterParts.includes(part.path)) {\r\n                this.processElement(part.rootElement);\r\n                this.usedHederFooterParts.push(part.path);\r\n            }\r\n            this.renderElements([part.rootElement], into);\r\n\t\t\tthis.currentPart = null;\r\n        }\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as WmlParagraph).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value.toFixed(2)}${l.type ?? ''}` : null;\r\n    }\r\n\r\n    renderWrapper(children: HTMLElement[]) {\r\n        return this.createElement(\"div\", { className: `${this.className}-wrapper` }, children);\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; overflow: hidden; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; overflow-wrap: break-word; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        const stylesMap = this.styleMap;\r\n        const defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (const style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (const subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNotes(noteIds: string[], notesMap: Record<string, WmlBaseNote>, into: HTMLElement) {\r\n        var notes = noteIds.map(id => notesMap[id]).filter(x => x);\r\n\r\n        if (notes.length > 0) {\r\n            var result = this.createElement(\"ol\", null, this.renderElements(notes));\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<WmlParagraph>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<WmlBookmarkStart>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<WmlRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n\t\t\tcase DomType.Endnote:\r\n\t\t\t\treturn this.renderContainer(elem, \"li\");\r\n\r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as NoteReferenceElement);\r\n\r\n\t\t\tcase DomType.EndnoteReference:\r\n\t\t\t\treturn this.renderEndnoteReference(elem as NoteReferenceElement);\r\n\t\r\n\t\t\tcase DomType.NoBreakHyphen:\r\n                return this.createElement(\"wbr\");\r\n\t\t}\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\r\n        return this.createElement(tagName, null, this.renderChildren(elem));\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        const style = elem.styleName && this.styleMap && this.styleMap[elem.styleName];\r\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src, this.currentPart).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: NoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n\trenderEndnoteReference(elem: NoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentEndnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentEndnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n\t\t\ttabSpan.className = this.tabStopClass();\r\n\t\t\tvar stops = findParent<WmlParagraph>(elem, DomType.Paragraph)?.tabs;\r\n\t\t\tthis.currentTabs.push({ stops, span: tabSpan });\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n\t\tif (elem.fieldRun)\r\n\t\t\treturn null;\r\n\r\n        const result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.verticalAlign) {\r\n            result.style.verticalAlign = elem.verticalAlign;\r\n            result.style.fontSize ||= \"small\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.createElement(\"colgroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key of Object.getOwnPropertyNames(style)) {\r\n            ouput.style[key] = style[key];\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n\ttabStopClass() {\r\n        return `${this.className}-tab-stop`;\r\n\t}\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",\r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n\r\n\trefreshTabStops() {\r\n\t\tif (!this.options.experimental) \r\n\t\t\treturn;\r\n\r\n\t\tclearTimeout(this.tabsTimeout);\r\n\r\n\t\tthis.tabsTimeout = setTimeout(() => {\r\n\t\t\tconst pixelToPoint = computePixelToPoint();\r\n\r\n\t\t\tfor (let tab of this.currentTabs) {\r\n\t\t\t\tupdateTabStop(tab.span, tab.stops, this.defaultTabSize, pixelToPoint);\r\n\t\t\t}\r\n\t\t}, 500);\r\n\t}\r\n\r\n    createElement = createElement;\r\n}\r\n\r\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\r\n    tagName: T,\r\n    props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\r\n    children: Node[] = undefined\r\n): HTMLElementTagNameMap[T] {\r\n    var result = Object.assign(document.createElement(tagName), props);\r\n    children && appendChildren(result, children);\r\n    return result;\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction appendChildren(elem: HTMLElement, children: Node[]) {\r\n    children.forEach(c => elem.appendChild(c));\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    return createElement(\"style\", { innerHTML: cssText });\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { Length } from \"./document/common\";\r\nimport { ParagraphTab } from \"./document/paragraph\";\r\n\r\nconst defaultTab: ParagraphTab = { position: { value: 0, type: \"pt\" }, leader: \"none\", style: \"left\" };\r\nconst maxTabs = 50;\r\n\r\nexport function computePixelToPoint(container: HTMLElement = document.body) {\r\n\tconst temp = document.createElement(\"div\");\r\n\ttemp.style.width = '100pt';\r\n\t\r\n\tcontainer.appendChild(temp);\r\n\tconst result = 100 / temp.offsetWidth;\r\n\tcontainer.removeChild(temp);\r\n\r\n\treturn result\r\n}\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], defaultTabSize: Length, pixelToPoint: number = 72 / 96) {\r\n    const p = elem.closest(\"p\");\r\n\r\n    const ebb = elem.getBoundingClientRect();\r\n    const pbb = p.getBoundingClientRect();\r\n    const pcs = getComputedStyle(p);\r\n\r\n\ttabs = tabs && tabs.length > 0 ? tabs.sort((a, b) => a.position.value - b.position.value) : [defaultTab];\r\n\r\n\tconst lastTab = tabs[tabs.length - 1];\r\n\tconst pWidthPt = pbb.width * pixelToPoint;\r\n\tconst size = defaultTabSize.value;\r\n    let pos = lastTab.position.value + defaultTabSize.value;\r\n\r\n    if (pos < pWidthPt) {\r\n        tabs = [...tabs];\r\n\r\n        for (; pos < pWidthPt && tabs.length < maxTabs; pos += size) {\r\n            tabs.push({ ...defaultTab, position: { value: pos, type: \"pt\" } });\r\n        }\r\n    }\r\n\r\n    const marginLeft = parseFloat(pcs.marginLeft);\r\n    const pOffset = pbb.left + marginLeft;\r\n    const left = (ebb.left - pOffset) * pixelToPoint;\r\n    const tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    let width: number = 1;\r\n\r\n    if (tab.style == \"right\" || tab.style == \"center\") {\r\n\t\tconst tabStops = Array.from(p.querySelectorAll(`.${elem.className}`));\r\n\t\tconst nextIdx = tabStops.indexOf(elem) + 1;\r\n        const range = document.createRange();\r\n        range.setStart(elem, 1);\r\n\r\n\t\tif (nextIdx < tabStops.length) {\r\n\t\t\trange.setEndBefore(tabStops[nextIdx]);\r\n\t\t} else {\r\n\t\t\trange.setEndAfter(p);\r\n\t\t}\r\n\r\n\t\tconst mul = tab.style == \"center\" ? 0.5 : 1;\r\n        const nextBB = range.getBoundingClientRect();\r\n\t\tconst offset = nextBB.left + mul * nextBB.width - (pbb.left - marginLeft);\r\n\r\n\t\twidth = tab.position.value - offset * pixelToPoint;\r\n    } else {\r\n        width = tab.position.value - left;\r\n    }\r\n\r\n    elem.innerHTML = \"&nbsp;\";\r\n    elem.style.textDecoration = \"inherit\";\r\n    elem.style.wordSpacing = `${width.toFixed(0)}pt`;\r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.textDecoration = \"underline\";\r\n            elem.style.textDecorationStyle = \"dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.textDecoration = \"underline\";\r\n            break;\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport abstract class WmlBaseNote implements OpenXmlElement {\r\n    id: string;\r\n\ttype: DomType;\r\n\tnoteType: string;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFootnote extends WmlBaseNote {\r\n\ttype = DomType.Footnote\r\n}\r\n\r\nexport class WmlEndnote extends WmlBaseNote {\r\n\ttype = DomType.Endnote\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlBaseNote, WmlEndnote, WmlFootnote } from \"./elements\";\r\n\r\nexport class BaseNotePart<T extends WmlBaseNote> extends Part {\r\n    protected _documentParser: DocumentParser;\r\n\r\n    notes: T[]\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n}\r\n\r\nexport class FootnotesPart extends BaseNotePart<WmlFootnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"footnote\", WmlFootnote);\r\n    }\r\n}\r\n\r\nexport class EndnotesPart extends BaseNotePart<WmlEndnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"endnote\", WmlEndnote);\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphStyle: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pStyle\":\r\n                result.paragraphStyle = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { WmlSettings, parseSettings } from \"./settings\";\r\n\r\nexport class SettingsPart extends Part {\r\n\tsettings: WmlSettings;\r\n\r\n\tconstructor(pkg: OpenXmlPackage, path: string) {\r\n\t\tsuper(pkg, path);\r\n\t}\r\n\r\n\tparseXml(root: Element) {\r\n\t\tthis.settings = parseSettings(root, this._package.xmlParser);\r\n\t}\r\n}","import { DocumentParser } from \"../document-parser\";\r\nimport { Length } from \"../document/common\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface WmlSettings {\r\n\tdefaultTabStop: Length;\r\n\tfootnoteProps: NoteProperties;\r\n\tendnoteProps: NoteProperties;\r\n\tautoHyphenation: boolean;\r\n}\r\n\r\nexport interface NoteProperties {\r\n\tnummeringFormat: string;\r\n\tdefaultNoteIds: string[];\r\n}\r\n\r\nexport function parseSettings(elem: Element, xml: XmlParser) {\r\n\tvar result = {} as WmlSettings; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"defaultTabStop\": result.defaultTabStop = xml.lengthAttr(el, \"val\"); break;\r\n\t\t\tcase \"footnotePr\": result.footnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"endnotePr\": result.endnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"autoHyphenation\": result.autoHyphenation = xml.boolAttr(el, \"val\"); break;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNoteProperties(elem: Element, xml: XmlParser) {\r\n\tvar result = {\r\n\t\tdefaultNoteIds: []\r\n\t} as NoteProperties; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"numFmt\": \r\n\t\t\t\tresult.nummeringFormat = xml.attr(el, \"val\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"footnote\": \r\n\t\t\tcase \"endnote\": \r\n\t\t\t\tresult.defaultNoteIds.push(xml.attr(el, \"id\"));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"http://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart, HeaderPart } from \"./header-footer/parts\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { EndnotesPart, FootnotesPart } from \"./notes/parts\";\r\nimport { SettingsPart } from \"./settings/settings-part\";\r\nimport { CustomPropsPart } from \"./document-props/custom-props-part\";\r\n\r\nconst topLevelRels = [\r\n\t{ type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n\t{ type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n\t{ type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n\t{ type: RelationshipTypes.CustomProperties, target: \"docProps/custom.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n\tprivate _package: OpenXmlPackage;\r\n\tprivate _parser: DocumentParser;\r\n\r\n\trels: Relationship[];\r\n\tparts: Part[] = [];\r\n\tpartsMap: Record<string, Part> = {};\r\n\r\n\tdocumentPart: DocumentPart;\r\n\tfontTablePart: FontTablePart;\r\n\tnumberingPart: NumberingPart;\r\n\tstylesPart: StylesPart;\r\n\tfootnotesPart: FootnotesPart;\r\n\tendnotesPart: EndnotesPart;\r\n\tthemePart: ThemePart;\r\n\tcorePropsPart: CorePropsPart;\r\n\textendedPropsPart: ExtendedPropsPart;\r\n\tsettingsPart: SettingsPart;\r\n\r\n\tstatic load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n\t\tvar d = new WordDocument();\r\n\r\n\t\td._parser = parser;\r\n\r\n\t\treturn OpenXmlPackage.load(blob, options)\r\n\t\t\t.then(pkg => {\r\n\t\t\t\td._package = pkg;\r\n\r\n\t\t\t\treturn d._package.loadRelationships();\r\n\t\t\t}).then(rels => {\r\n\t\t\t\td.rels = rels;\r\n\r\n\t\t\t\tconst tasks = topLevelRels.map(rel => {\r\n\t\t\t\t\tconst r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n\t\t\t\t\treturn d.loadRelationshipPart(r.target, r.type);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.all(tasks);\r\n\t\t\t}).then(() => d);\r\n\t}\r\n\r\n\tsave(type = \"blob\"): Promise<any> {\r\n\t\treturn this._package.save(type);\r\n\t}\r\n\r\n\tprivate loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n\t\tif (this.partsMap[path])\r\n\t\t\treturn Promise.resolve(this.partsMap[path]);\r\n\r\n\t\tif (!this._package.get(path))\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tlet part: Part = null;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase RelationshipTypes.OfficeDocument:\r\n\t\t\t\tthis.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.FontTable:\r\n\t\t\t\tthis.fontTablePart = part = new FontTablePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Numbering:\r\n\t\t\t\tthis.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Styles:\r\n\t\t\t\tthis.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Theme:\r\n\t\t\t\tthis.themePart = part = new ThemePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footnotes:\r\n\t\t\t\tthis.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Endnotes:\r\n\t\t\t\tthis.endnotesPart = part = new EndnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footer:\r\n\t\t\t\tpart = new FooterPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Header:\r\n\t\t\t\tpart = new HeaderPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CoreProperties:\r\n\t\t\t\tthis.corePropsPart = part = new CorePropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.ExtendedProperties:\r\n\t\t\t\tthis.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CustomProperties:\r\n\t\t\t\tpart = new CustomPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase RelationshipTypes.Settings:\r\n\t\t\t\tthis.settingsPart = part = new SettingsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (part == null)\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tthis.partsMap[path] = part;\r\n\t\tthis.parts.push(part);\r\n\r\n\t\treturn part.load().then(() => {\r\n\t\t\tif (part.rels == null || part.rels.length == 0)\r\n\t\t\t\treturn part;\r\n\r\n\t\t\tconst [folder] = splitPath(part.path);\r\n\t\t\tconst rels = part.rels.map(rel => {\r\n\t\t\t\treturn this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n\t\t\t});\r\n\r\n\t\t\treturn Promise.all(rels).then(() => part);\r\n\t\t});\r\n\t}\r\n\r\n\tloadDocumentImage(id: string, part?: Part): PromiseLike<string> {\r\n\t\treturn this.loadResource(part ?? this.documentPart, id, \"blob\")\r\n\t\t\t.then(x => x ? URL.createObjectURL(x) : null);\r\n\t}\r\n\r\n\tloadNumberingImage(id: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.numberingPart, id, \"blob\")\r\n\t\t\t.then(x => x ? URL.createObjectURL(x) : null);\r\n\t}\r\n\r\n\tloadFont(id: string, key: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n\t\t\t.then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n\t}\r\n\r\n\tfindPartByRelId(id: string, basePart: Part = null) {\r\n\t\tvar rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n\t\tconst folder = basePart ? splitPath(basePart.path)[0] : '';\r\n\t\treturn rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n\t}\r\n\r\n\tgetPathById(part: Part, id: string): string {\r\n\t\tconst rel = part.rels.find(x => x.id == id);\r\n\t\tconst [folder] = splitPath(part.path);\r\n\t\treturn rel ? resolvePath(rel.target, folder) : null;\r\n\t}\r\n\r\n\tprivate loadResource(part: Part, id: string, outputType: OutputType) {\r\n\t\tconst path = this.getPathById(part, id);\r\n\t\treturn path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n\t}\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n\tconst len = 16;\r\n\tconst trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n\tconst numbers = new Array(len);\r\n\r\n\tfor (let i = 0; i < len; i++)\r\n\t\tnumbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n\tfor (let i = 0; i < 32; i++)\r\n\t\tdata[i] = data[i] ^ numbers[i % len]\r\n\r\n\treturn data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__626__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(771);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__626__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","f","fn","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseNotes","elemName","elemClass","result","el","node","noteType","children","parseBodyElements","push","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","parseParagraph","parseTable","parseSdt","forEach","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyleName","undefined","pStyle","rStyle","suff","bullet","find","levelText","format","sdtContent","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","SimpleField","instruction","lock","dirty","fieldRun","Instruction","ComplexField","charType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","EndnoteReference","d","parseDrawing","run","verticalAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","join","length","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","knownColors","cb","i","childNodes","nodeType","Node","ELEMENT_NODE","nodeName","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertSize","test","intVal","parseInt","Border","Percent","replace","valueOfBold","size","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseCustomProps","CustomPropsPart","firstChild","formatId","value","parseExtendedProps","ExtendedPropsPart","safeParseToInt","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","parseBorder","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","ns","wordml","drawingml","picture","mul","unit","LineHeight","usage","endsWith","parseFloat","defaultValue","namespaceURI","fontSize","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","parsePageNumber","chapSep","chapStyle","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","titlePage","pageBorders","parseBorders","pageNumber","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","renderEndnotes","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","parseFonts","FontTablePart","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","WmlHeader","Header","WmlFooter","Footer","rootElement","createRootElement","BaseHeaderFooterPart","HeaderPart","FooterPart","htmlDocument","styleMap","currentPart","footnoteMap","endnoteMap","currentEndnoteIds","usedHederFooterParts","currentTabs","tabsTimeout","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","prodessNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","notes","endnotesPart","settingsPart","defaultTabSize","settings","defaultTabStop","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appendChildren","refreshTabStops","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","Object","entries","colors","k","cssText","styleToString","createStyleElement","fontsPart","ref","loadFont","fontData","cssValues","processClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","numberings","processElement","processTable","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","sections","splitBySection","prevProps","l","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","renderHeaderFooter","contentElement","renderElements","renderNotes","refs","page","firstOfSection","into","part","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","defautStyles","subStyles","linkedStyle","concat","subStyle","noteIds","notesMap","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","Footnote","Endnote","renderFootnoteReference","renderEndnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","tabStopClass","stops","findParent","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","numformat","substring","clearTimeout","setTimeout","pixelToPoint","computePixelToPoint","tab","updateTabStop","assign","comment","createComment","defaultTab","container","temp","offsetWidth","removeChild","closest","ebb","getBoundingClientRect","pbb","pcs","getComputedStyle","lastTab","sort","pWidthPt","marginLeft","pOffset","t","tabStops","Array","from","querySelectorAll","nextIdx","indexOf","range","createRange","setStart","setEndBefore","setEndAfter","nextBB","textDecoration","wordSpacing","textDecorationStyle","WmlBaseNote","WmlFootnote","WmlEndnote","BaseNotePart","FootnotesPart","EndnotesPart","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","elementAttr","attrLocalName","attributes","floatAttr","convertBoolean","convertLength","globalXmlParser","parseSettings","SettingsPart","parseNoteProperties","defaultNoteIds","nummeringFormat","footnoteProps","endnoteProps","autoHyphenation","StylesPart","parseTheme","ThemePart","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","DmlTheme","themeElements","classList","isObject","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","CustomProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","FontTable","Numbering","Styles","Theme","Footnotes","Endnotes","corePropsPart","extendedPropsPart","Settings","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}