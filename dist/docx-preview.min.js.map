{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/custom-props-part.ts","webpack://docx/./src/document-props/custom-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/header-footer/elements.ts","webpack://docx/./src/header-footer/parts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/notes/elements.ts","webpack://docx/./src/notes/parts.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/settings/settings-part.ts","webpack://docx/./src/settings/settings.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd {\"root\":\"JSZip\",\"commonjs\":\"jszip\",\"commonjs2\":\"jszip\",\"amd\":\"jszip\"}","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jszip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jszip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"jszip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__626__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n\tEndnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\r\n\tCustomProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/custom-properties\",\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, WmlTable, IDomNumbering,\r\n    WmlHyperlink, IDomImage, OpenXmlElement, WmlTableColumn, WmlTableCell,\r\n    WmlTableRow, NumberingPicBullet, WmlText, WmlSymbol, WmlBreak, WmlNoteReference\r\n} from './document/dom';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport xml from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFieldChar, WmlFieldSimple, WmlInstructionText } from './document/fields';\r\nimport { convertLength, LengthUsage, LengthUsageType } from './document/common';\r\n\r\nexport var autos = {\r\n    shd: \"inherit\",\r\n    color: \"black\",\r\n\tborderColor: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseNotes(xmlDoc: Element, elemName: string, elemClass: any): any[] {\r\n        var result = [];\r\n\r\n        for (let el of xml.elements(xmlDoc, elemName)) {\r\n            const node = new elemClass();\r\n            node.id = xml.attr(el, \"id\");\r\n            node.noteType = xml.attr(el, \"type\");\r\n            node.children = this.parseBodyElements(el);\r\n            result.push(node);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = xml.element(xmlDoc, \"body\");\r\n        var background = xml.element(xmlDoc, \"background\");\r\n        var sectPr = xml.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, xml) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xmlUtil.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xmlUtil.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n\t\t\t\tcase \"sdt\":\r\n\t\t\t\t\tthis.parseSdt(elem).forEach(el => children.push(el));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xmlUtil.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.attr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.attr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n            //case \"numbering\": result.target = \"p\"; break;\r\n        }\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.attr(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.attr(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.attr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, xml);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, xml);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.attr(node, \"type\");\r\n        var selector = \"\";\r\n        var modificator = \"\";\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase \"firstRow\":\r\n\t\t\t\tmodificator = \".first-row\";\r\n\t\t\t\tselector = \"tr.first-row td\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"lastRow\":\r\n\t\t\t\tmodificator = \".last-row\";\r\n\t\t\t\tselector = \"tr.last-row td\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"firstCol\":\r\n\t\t\t\tmodificator = \".first-col\";\r\n\t\t\t\tselector = \"td.first-col\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"lastCol\":\r\n\t\t\t\tmodificator = \".last-col\";\r\n\t\t\t\tselector = \"td.last-col\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"band1Vert\":\r\n\t\t\t\tmodificator = \":not(.no-vband)\";\r\n\t\t\t\tselector = \"td.odd-col\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"band2Vert\":\r\n\t\t\t\tmodificator = \":not(.no-vband)\";\r\n\t\t\t\tselector = \"td.even-col\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"band1Horz\":\r\n\t\t\t\tmodificator = \":not(.no-hband)\";\r\n\t\t\t\tselector = \"tr.odd-row\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"band2Horz\":\r\n\t\t\t\tmodificator = \":not(.no-hband)\";\r\n\t\t\t\tselector = \"tr.even-row\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: return [];\r\n\t\t}\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: `${selector} p`,\r\n\t\t\t\t\t\tmod: modificator,\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: `${selector} span`,\r\n\t\t\t\t\t\tmod: modificator,\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n\t\t\t\t\t\tmod: modificator,\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xmlUtil.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.attr(n, \"numId\");\r\n                    var abstractNumId = xml.elementAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.element(elem, \"pict\");\r\n        var shape = pict && xml.element(pict, \"shape\");\r\n        var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.attr(imagedata, \"id\"),\r\n            style: xml.attr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.attr(node, \"abstractNumId\");\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyleName: undefined,\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pStyle\":\r\n                    result.pStyleName = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.attr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\tparseSdt(node: Element): OpenXmlElement[] {\r\n\t\tconst sdtContent = xml.element(node, \"sdtContent\");\r\n\t\treturn sdtContent ? this.parseBodyElements(sdtContent) : [];\r\n\t}\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <WmlParagraph>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, xml));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, xml));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, xml))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n\t\t\t\t\tparagraph.styleName = xml.attr(c, \"val\");\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    paragraph.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.attr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): WmlHyperlink {\r\n        var result: WmlHyperlink = <WmlHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.attr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): WmlRun {\r\n        var result: WmlRun = <WmlRun>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<WmlText>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldSimple\":\r\n                    result.children.push(<WmlFieldSimple>{\r\n                        type: DomType.SimpleField,\r\n                        instruction: xml.attr(c, \"instr\"),\r\n                        lock: xml.boolAttr(c, \"lock\", false),\r\n                        dirty: xml.boolAttr(c, \"dirty\", false)\r\n                    });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n\t\t\t\t\tresult.fieldRun = true;\r\n                    result.children.push(<WmlInstructionText>{\r\n                        type: DomType.Instruction,\r\n                        text: c.textContent\r\n                    });\r\n                    break;\r\n    \r\n                case \"fldChar\":\r\n\t\t\t\t\tresult.fieldRun = true;\r\n                    result.children.push(<WmlFieldChar>{\r\n                        type: DomType.ComplexField,\r\n                        charType: xml.attr(c, \"fldCharType\"),\r\n                        lock: xml.boolAttr(c, \"lock\", false),\r\n                        dirty: xml.boolAttr(c, \"dirty\", false)\r\n                    });\r\n                    break;\r\n\r\n                case \"noBreakHyphen\":\r\n                    result.children.push({ type: DomType.NoBreakHyphen });\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<WmlBreak>{ \r\n                        type: DomType.Break, \r\n                        break: xml.attr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<WmlBreak>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<WmlSymbol>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.attr(c, \"font\"),\r\n                        char: xml.attr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<WmlNoteReference>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.attr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n\t\t\t\tcase \"endnoteReference\":\r\n\t\t\t\t\tresult.children.push(<WmlNoteReference>{ \r\n\t\t\t\t\t\ttype: DomType.EndnoteReference, \r\n\t\t\t\t\t\tid: xml.attr(c, \"id\")\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.styleName = xml.attr(c, \"val\");\r\n                    break;\r\n\r\n\t\t\t\tcase \"vertAlign\":\r\n\t\t\t\t\trun.verticalAlign = values.valueOfVertAlign(c, true);\r\n\t\t\t\t\tbreak;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.lengthAttr(n, \"x\", LengthUsage.Emu);\r\n                        posY.offset = xml.lengthAttr(n, \"y\", LengthUsage.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.lengthAttr(n, \"cx\", LengthUsage.Emu);\r\n                    result.cssStyle[\"height\"] = xml.lengthAttr(n, \"cy\", LengthUsage.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.element(n, \"align\");\r\n                        var offsetNode = xml.element(n, \"posOffset\");\r\n\r\n                        pos.relative = xml.attr(n, \"relativeFrom\") ?? pos.relative;\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xmlUtil.sizeValue(offsetNode, LengthUsage.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.element(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = xml.element(elem, \"blipFill\");\r\n        var blip = xml.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.attr(blip, \"embed\");\r\n\r\n        var spPr = xml.element(elem, \"spPr\");\r\n        var xfrm = xml.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.lengthAttr(n, \"cx\", LengthUsage.Emu);\r\n                    result.cssStyle[\"height\"] = xml.lengthAttr(n, \"cy\", LengthUsage.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.lengthAttr(n, \"x\", LengthUsage.Emu);\r\n                    result.cssStyle[\"top\"] = xml.lengthAttr(n, \"y\", LengthUsage.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): WmlTable {\r\n        var result: WmlTable = { type: DomType.Table, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): WmlTableColumn[] {\r\n        var result = [];\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.lengthAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: WmlTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.styleName = xml.attr(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n\t\t\t\t\ttable.className = values.classNameOftblLook(c);\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n\t\t\t\tcase \"tblStyleColBandSize\":\r\n\t\t\t\t\ttable.colBandSize = xml.intAttr(c, \"val\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"tblStyleRowBandSize\":\r\n\t\t\t\t\ttable.rowBandSize = xml.intAttr(c, \"val\");\r\n\t\t\t\t\tbreak;\r\n\t\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: WmlTable) {\r\n        var topFromText = xml.lengthAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.lengthAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.lengthAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.lengthAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): WmlTableRow {\r\n        var result: WmlTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: WmlTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n\t\t\t\tcase \"tblHeader\":\r\n\t\t\t\t\trow.isHeader = xml.boolAttr(c, \"val\");\r\n\t\t\t\t\tbreak;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: WmlTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: WmlTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\":\r\n\t\t\t\t\tcell.verticalMerge = xml.attr(c, \"val\") ?? \"continue\";\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n        xmlUtil.foreach(elem, c => {\r\n\t\t\tif (handler?.(c))\r\n\t\t\t\treturn;\r\n\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xmlUtil.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.lengthAttr(c, \"val\", LengthUsage.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xmlUtil.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xmlUtil.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n\t\t\t\t\t//TODO\r\n                    // style.verticalAlign = values.valueOfVertAlign(c);\r\n                    break;\r\n\r\n\t\t\t\tcase \"position\":\r\n\t\t\t\t\tstyle.verticalAlign = xml.lengthAttr(c, \"val\", LengthUsage.FontSize);\r\n\t\t\t\t\tbreak;\r\n\t\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"vanish\":\r\n                    if (xml.boolAttr(c, \"val\", true))\r\n                        style[\"display\"] = \"none\";\r\n                    break;\r\n\r\n\t\t\t\tcase \"kern\":\r\n\t\t\t\t\t//TODO\r\n\t\t\t\t\t//style['letter-spacing'] = xml.lengthAttr(elem, 'val', LengthUsage.FontSize);\r\n\t\t\t\t\tbreak;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n\t\t\t\tcase \"wordWrap\":\r\n\t\t\t\t\tif (xml.boolAttr(c, \"val\")) //TODO: test with examples\r\n\t\t\t\t\t\tstyle[\"overflow-wrap\"] = \"break-word\";\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bCs\":  \r\n\t\t\t\tcase \"iCs\":\r\n\t\t\t\tcase \"szCs\":\r\n\t\t\t\tcase \"tabs\": //ignore - tabs is parsed by other parser\r\n\t\t\t\tcase \"outlineLvl\": //TODO\r\n\t\t\t\tcase \"contextualSpacing\": //TODO\r\n\t\t\t\tcase \"tblStyleColBandSize\": //TODO\r\n\t\t\t\tcase \"tblStyleRowBandSize\": //TODO\r\n                case \"webHidden\": //TODO - maybe web-hidden should be implemented\r\n\t\t\t\tcase \"pageBreakBefore\": //TODO - maybe ignore \r\n\t\t\t\tcase \"suppressLineNumbers\": //TODO - maybe ignore\r\n\t\t\t\tcase \"keepLines\": //TODO - maybe ignore\r\n\t\t\t\tcase \"keepNext\": //TODO - maybe ignore\r\n\t\t\t\tcase \"lang\":\r\n\t\t\t\tcase \"widowControl\": //TODO - maybe ignore \r\n\t\t\t\tcase \"bidi\": //TODO - maybe ignore\r\n\t\t\t\tcase \"rtl\": //TODO - maybe ignore\r\n                case \"noProof\": //ignore spellcheck\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (this.options.debug)\r\n                        console.warn(`DOCX: Unknown document element: ${elem.localName}.${c.localName}` );\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.attr(node, \"val\");\r\n\r\n        if (val == null)\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"none\":\r\n                style[\"text-decoration\"] = \"none\";\r\n                break;\r\n        }\r\n\r\n        var col = xmlUtil.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.attr(node, \"ascii\");\r\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\r\n\r\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\r\n\r\n        if (fonts.length > 0)\r\n            style[\"font-family\"] = fonts;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.lengthAttr(node, \"firstLine\");\r\n        var hanging = xml.lengthAttr(node, \"hanging\");\r\n        var left = xml.lengthAttr(node, \"left\");\r\n        var start = xml.lengthAttr(node, \"start\");\r\n        var right = xml.lengthAttr(node, \"right\");\r\n        var end = xml.lengthAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.lengthAttr(node, \"before\");\r\n        var after = xml.lengthAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.attr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.attr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.lengthAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.lengthAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nclass xmlUtil {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == Node.ELEMENT_NODE)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.attr(node, attrName);\r\n\r\n        if (v) {\r\n            if (v == \"auto\") {\r\n                return autoColor;\r\n            } else if (knownColors.includes(v)) {\r\n                return v;\r\n            }\r\n\r\n            return `#${v}`;\r\n        }\r\n\r\n        var themeColor = xml.attr(node, \"themeColor\");\r\n\r\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\r\n    }\r\n\r\n    static sizeValue(node: Element, type: LengthUsageType = LengthUsage.Dxa) {\r\n        return convertLength(node.textContent, type);\r\n    }\r\n}\r\n\r\nclass values {\r\n    static themeValue(c: Element, attr: string) {\r\n        var val = xml.attr(c, attr); \r\n        return val ? `var(--docx-${val}-font)` : null;\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type = LengthUsage.Dxa;\r\n\r\n        switch (xml.attr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = LengthUsage.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.lengthAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.lengthAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xmlUtil.colorAttr(c, \"color\");\r\n        var size = xml.lengthAttr(c, \"sz\", LengthUsage.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? autos.borderColor : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        const val = xml.attr(c, \"val\");\r\n\t\tconst classes = [\r\n\t\t\t'first-row', 'last-row', 'first-col', 'last-col', \r\n\t\t\t'odd-col', 'even-col', 'odd-row', 'even-row', \r\n\t\t\t'ne-cell', 'nw-cell', 'se-cell', 'sw-cell'\r\n\t\t];\r\n\r\n\t\treturn classes.filter((_, i) => val[i] == '1').join(' ');\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfVertAlign(c: Element, asTagName: boolean = false) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"subscript\": return \"sub\";\r\n            case \"superscript\": return asTagName ? \"sup\" : \"super\";\r\n        }\r\n\r\n        return asTagName ? null : type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n\t\tconst val = xml.hexAttr(c, \"val\", 0);\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstRow\") || (val & 0x0020)) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastRow\") || (val & 0x0040)) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"firstColumn\") || (val & 0x0080)) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"lastColumn\") || (val & 0x0100)) className += \" last-col\";\r\n        if (xml.boolAttr(c, \"noHBand\") || (val & 0x0200)) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\") || (val & 0x0400)) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { CustomProperty, parseCustomProps } from \"./custom-props\";\r\n\r\nexport class CustomPropsPart extends Part {\r\n    props: CustomProperty[];\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCustomProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CustomProperty {\r\n\tformatId: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport function parseCustomProps(root: Element, xml: XmlParser): CustomProperty[] {\r\n\treturn xml.elements(root, \"property\").map(e => {\r\n\t\tconst firstChild = e.firstChild;\r\n\r\n\t\treturn {\r\n\t\t\tformatId: xml.attr(e, \"fmtid\"),\r\n\t\t\tname: xml.attr(e, \"name\"),\r\n\t\t\ttype: firstChild.nodeName,\r\n\t\t\tvalue: firstChild.textContent\r\n\t\t};\r\n\t});\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlBookmarkStart extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface WmlBookmarkEnd extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): WmlBookmarkStart {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): WmlBookmarkEnd {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\",\r\n\tcompatibility: \"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\nexport type Length = string;\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): string {\r\n    //\"simplified\" docx documents use pt's as units\r\n    if (val == null || /.+(p[xt]|[%])$/.test(val)) {\r\n        return val;\r\n    }\r\n\r\n\treturn `${(parseInt(val) * usage.mul).toFixed(2)}${usage.unit ?? ''}`;\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        case \"on\": return true;\r\n        case \"off\": return false;\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    NoBreakHyphen = \"noBreakHyphen\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n\tEndnoteReference = \"endnoteReference\",\r\n    Footnote = \"footnote\",\r\n    Endnote = \"endnote\",\r\n    SimpleField = \"simpleField\",\r\n    ComplexField = \"complexField\",\r\n    Instruction = \"instruction\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    \r\n\tstyleName?: string; //style name\r\n\tclassName?: string; //class mods\r\n\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface WmlHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface WmlNoteReference extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface WmlBreak extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface WmlText extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface WmlSymbol extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface WmlTable extends OpenXmlElement {\r\n    columns?: WmlTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n\r\n\tcolBandSize?: number;\r\n\trowBandSize?: number;\r\n}\r\n\r\nexport interface WmlTableRow extends OpenXmlElement {\r\n\tisHeader?: boolean;\r\n}\r\n\r\nexport interface WmlTableCell extends OpenXmlElement {\r\n\tverticalMerge?: 'restart' | 'continue' | string;\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface WmlTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyleName: string;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    suff: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface WmlParagraph extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n\tstyleName?: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlRun extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n\tfieldRun?: boolean;  \r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Borders, parseBorders } from \"./border\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageNumber {\r\n    start: number;\r\n    chapSep: \"colon\" | \"emDash\" | \"endash\" | \"hyphen\" | \"period\" | string;\r\n    chapStyle: string;\r\n    format: \"none\" | \"cardinalText\" | \"decimal\" | \"decimalEnclosedCircle\" | \"decimalEnclosedFullstop\" \r\n        | \"decimalEnclosedParen\" | \"decimalZero\" | \"lowerLetter\" | \"lowerRoman\"\r\n        | \"ordinalText\" | \"upperLetter\" | \"upperRoman\" | string;\r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    pageBorders: Borders;\r\n    pageNumber: PageNumber;\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n    titlePage: boolean;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n\r\n            case \"titlePg\":\r\n                section.titlePage = xml.boolAttr(e, \"val\", true);\r\n                break;\r\n\r\n            case \"pgBorders\":\r\n                section.pageBorders = parseBorders(e, xml);\r\n                break;\r\n\r\n            case \"pgNumType\":\r\n                section.pageNumber = parsePageNumber(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parsePageNumber(elem: Element, xml: XmlParser): PageNumber {\r\n    return {\r\n        chapSep: xml.attr(elem, \"chapSep\"),\r\n        chapStyle: xml.attr(elem, \"chapStyle\"),\r\n        format: xml.attr(elem, \"fmt\"),\r\n        start: xml.intAttr(elem, \"start\")\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n\trenderEndnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n\tuseBase64URL: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true,\r\n\trenderEndnotes: true,\r\n\tuseBase64URL: false\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nconst embedFontTypeMap = {\r\n    embedRegular: 'regular',\r\n    embedBold: 'bold',\r\n    embedItalic: 'italic',\r\n    embedBoldItalic: 'boldItalic',\r\n}\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    embedFontRefs: EmbedFontRef[];\r\n}\r\n\r\nexport interface EmbedFontRef {\r\n    id: string;\r\n    key: string;\r\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\r\n}\r\n\r\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\r\n    return xml.elements(root).map(el => parseFont(el, xml));\r\n}\r\n\r\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xml.attr(elem, \"name\"),\r\n        embedFontRefs: []\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n            case \"embedBold\":\r\n            case \"embedItalic\":\r\n            case \"embedBoldItalic\":\r\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\r\n    return { \r\n        id: xml.attr(elem, \"id\"), \r\n        key: xml.attr(elem, \"fontKey\"),\r\n        type: embedFontTypeMap[elem.localName]\r\n    };\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { OpenXmlElement } from \"../document/dom\";\r\nimport { WmlHeader, WmlFooter } from \"./elements\";\r\n\r\nexport abstract class BaseHeaderFooterPart<T extends OpenXmlElement = OpenXmlElement> extends Part {\r\n    rootElement: T;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.rootElement = this.createRootElement();\r\n        this.rootElement.children = this._documentParser.parseBodyElements(root);\r\n    }\r\n\r\n    protected abstract createRootElement(): T;\r\n}\r\n\r\nexport class HeaderPart extends BaseHeaderFooterPart<WmlHeader> {\r\n    protected createRootElement(): WmlHeader {\r\n        return new WmlHeader();\r\n    }\r\n}\r\n\r\nexport class FooterPart extends BaseHeaderFooterPart<WmlFooter> {\r\n    protected createRootElement(): WmlFooter {\r\n        return new WmlFooter();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, WmlTable, IDomNumbering,\r\n    WmlHyperlink, IDomImage, OpenXmlElement, WmlTableColumn, WmlTableCell, WmlText, WmlSymbol, WmlBreak, WmlNoteReference\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph } from './document/paragraph';\r\nimport { escapeClassName, keyBy, mergeDeep } from './utils';\r\nimport { computePixelToPoint, updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { FooterHeaderReference, SectionProperties } from './document/section';\r\nimport { WmlRun, RunProperties } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { WmlBaseNote, WmlFootnote } from './notes/elements';\r\nimport { ThemePart } from './theme/theme-part';\r\nimport { BaseHeaderFooterPart } from './header-footer/parts';\r\nimport { Part } from './common/part';\r\n\r\ninterface CellPos {\r\n\tcol: number;\r\n\trow: number;\r\n}\r\n\r\ntype CellVerticalMergeType = Record<number, HTMLTableCellElement>;\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: Record<string, IDomStyle> = {};\r\n\tcurrentPart: Part = null;\r\n\r\n\ttableVerticalMerges: CellVerticalMergeType[] = [];\r\n\tcurrentVerticalMerge: CellVerticalMergeType = null;\r\n\ttableCellPositions: CellPos[] = [];\r\n\tcurrentCellPosition: CellPos = null;\r\n\r\n    footnoteMap: Record<string, WmlFootnote> = {};\r\n\tendnoteMap: Record<string, WmlFootnote> = {};\r\n    currentFootnoteIds: string[];\r\n    currentEndnoteIds: string[] = [];\r\n    usedHederFooterParts: any[] = [];\r\n\r\n\tdefaultTabSize: Length;\t\r\n\tcurrentTabs: any[] = [];\r\n\ttabsTimeout: any = 0;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.themePart) {\r\n            appendComment(styleContainer, \"docxjs document theme values\");\r\n            this.renderTheme(document.themePart, styleContainer);\r\n        }\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docxjs document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            this.prodessNumberings(document.numberingPart.domNumberings);\r\n\r\n            appendComment(styleContainer, \"docxjs document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.endnotesPart) {\r\n            this.endnoteMap = keyBy(document.endnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.settingsPart) {\r\n\t\t\tthis.defaultTabSize = document.settingsPart.settings?.defaultTabStop;\r\n\t\t}\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\r\n        } else {\r\n            appendChildren(bodyContainer, sectionElements);\r\n        }\r\n\r\n\t\tthis.refreshTabStops();\r\n    }\r\n\r\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\r\n        const variables = {};\r\n        const fontScheme = themePart.theme?.fontScheme;\r\n\r\n        if (fontScheme) {\r\n            if (fontScheme.majorFont) {\r\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\r\n            }\r\n\r\n            if (fontScheme.minorFont) {\r\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\r\n            }\r\n        }\r\n\r\n        const colorScheme = themePart.theme?.colorScheme;\r\n\r\n        if (colorScheme) {\r\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\r\n                variables[`--docx-${k}-color`] = `#${v}`;\r\n            }\r\n        }\r\n\r\n        const cssText = this.styleToString(`.${this.className}`, variables);\r\n        styleContainer.appendChild(createStyleElement(cssText));\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts) {\r\n            for (let ref of f.embedFontRefs) {\r\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\r\n                    const cssValues = {\r\n                        'font-family': f.name,\r\n                        'src': `url(${fontData})`\r\n                    };\r\n\r\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-weight'] = 'bold';\r\n                    }\r\n\r\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-style'] = 'italic';\r\n                    }\r\n\r\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\r\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\r\n                    styleContainer.appendChild(createStyleElement(cssText));\r\n\t\t\t\t\tthis.refreshTabStops();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    processStyleName(className: string): string {\r\n        return className ? `${this.className}_${escapeClassName(className)}`: this.className;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\r\n\r\n        for (const style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n\r\n                for (const baseValues of baseStyle.styles) {\r\n                    const styleValues = style.styles.find(x => x.target == baseValues.target);\r\n\r\n\t\t\t\t\tif (styleValues) {\r\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstyle.styles.push({ ...baseValues, values: { ...baseValues.values } });\r\n                    }\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processStyleName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    prodessNumberings(numberings: IDomNumbering[]) {\r\n        for (let num of numberings.filter(n => n.pStyleName)) {\r\n            const style = this.findStyle(num.pStyleName);\r\n\r\n            if (style?.paragraphProps?.numbering) {\r\n                style.paragraphProps.numbering.level = num.level;\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: WmlTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = props.pageMargins.left;\r\n                elem.style.paddingRight = props.pageMargins.right;\r\n                elem.style.paddingTop = props.pageMargins.top;\r\n                elem.style.paddingBottom = props.pageMargins.bottom;\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = props.pageSize.width;\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = props.pageSize.height;\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = props.columns.space;\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\t\tconst sections = this.splitBySection(document.children);\r\n\t\tlet prevProps = null;\r\n\r\n        for (let i = 0, l = sections.length; i < l; i++) {\r\n            this.currentFootnoteIds = [];\r\n\r\n\t\t\tconst section = sections[i];\r\n            const props = section.sectProps || document.props;\r\n            const sectionElement = this.createSection(this.className, props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n\r\n            this.options.renderHeaders && this.renderHeaderFooter(props.headerRefs, props, \r\n\t\t\t\tresult.length, prevProps != props, sectionElement);\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements, contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderNotes(this.currentFootnoteIds, this.footnoteMap, sectionElement);\r\n            }\r\n\r\n\t\t\tif (this.options.renderEndnotes && i == l - 1) {\r\n                this.renderNotes(this.currentEndnoteIds, this.endnoteMap, sectionElement);\r\n\t\t\t}\r\n\r\n            this.options.renderFooters && this.renderHeaderFooter(props.footerRefs, props, \r\n\t\t\t\tresult.length, prevProps != props, sectionElement);\r\n\r\n            result.push(sectionElement);\r\n\t\t\tprevProps = props;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, firstOfSection: boolean, into: HTMLElement) {\r\n        if (!refs) return;\r\n\r\n        var ref = (props.titlePage && firstOfSection ? refs.find(x => x.type == \"first\") : null)\r\n            ?? (page % 2 == 1 ? refs.find(x => x.type == \"even\") : null)\r\n            ?? refs.find(x => x.type == \"default\");\r\n\r\n        var part = ref && this.document.findPartByRelId(ref.id, this.document.documentPart) as BaseHeaderFooterPart;\r\n\r\n        if (part) {\r\n\t\t\tthis.currentPart = part;\r\n            if (!this.usedHederFooterParts.includes(part.path)) {\r\n                this.processElement(part.rootElement);\r\n                this.usedHederFooterParts.push(part.path);\r\n            }\r\n            this.renderElements([part.rootElement], into);\r\n\t\t\tthis.currentPart = null;\r\n        }\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as WmlBreak).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as WmlBreak).break == \"page\";\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const s = this.findStyle((elem as WmlParagraph).styleName);\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderWrapper(children: HTMLElement[]) {\r\n        return this.createElement(\"div\", { className: `${this.className}-wrapper` }, children);\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; overflow: hidden; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; overflow-wrap: break-word; }\r\n.${c} a { color: inherit; text-decoration: inherit; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        const stylesMap = this.styleMap;\r\n        const defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (const style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (const subStyle of subStyles) {\r\n\t\t\t\t//TODO temporary disable modificators until test it well\r\n                var selector = `${style.target ?? ''}.${style.cssName}`; //${subStyle.mod ?? ''} \r\n\r\n\t\t\t\tif (style.target != subStyle.target)\r\n\t\t\t\t\tselector += ` ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNotes(noteIds: string[], notesMap: Record<string, WmlBaseNote>, into: HTMLElement) {\r\n        var notes = noteIds.map(id => notesMap[id]).filter(x => x);\r\n\r\n        if (notes.length > 0) {\r\n            var result = this.createElement(\"ol\", null, this.renderElements(notes));\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(elem as WmlParagraph);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(elem as WmlBookmarkStart);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null; //ignore bookmark end\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(elem as WmlRun);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(elem as IDomImage);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(elem as WmlText);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(elem as WmlSymbol);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(elem as WmlBreak);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n\t\t\tcase DomType.Endnote:\r\n\t\t\t\treturn this.renderContainer(elem, \"li\");\r\n\r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as WmlNoteReference);\r\n\r\n\t\t\tcase DomType.EndnoteReference:\r\n\t\t\t\treturn this.renderEndnoteReference(elem as WmlNoteReference);\r\n\t\r\n\t\t\tcase DomType.NoBreakHyphen:\r\n                return this.createElement(\"wbr\");\r\n\t\t}\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n\t\t\tappendChildren(into, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\r\n        return this.createElement(tagName, null, this.renderChildren(elem));\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        const style = this.findStyle(elem.styleName);\r\n\t\telem.tabs ??= style?.paragraphProps?.tabs;  //TODO\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderCommonProperties(result.style, elem);\r\n\r\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            result.classList.add(this.numberingClass(numbering.id, numbering.level));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProperties(style, props);\r\n    }\r\n\r\n    renderCommonProperties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = props.fontSize;\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: WmlHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: OpenXmlElement) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src, this.currentPart).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: WmlText) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: WmlBreak) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: WmlSymbol) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: WmlNoteReference) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n\trenderEndnoteReference(elem: WmlNoteReference) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentEndnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentEndnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n\t\t\ttabSpan.className = this.tabStopClass();\r\n\t\t\tvar stops = findParent<WmlParagraph>(elem, DomType.Paragraph)?.tabs;\r\n\t\t\tthis.currentTabs.push({ stops, span: tabSpan });\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n\t\tif (elem.fieldRun)\r\n\t\t\treturn null;\r\n\r\n        const result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n\t\tif (elem.verticalAlign) {\r\n\t\t\tconst wrapper = this.createElement(elem.verticalAlign as any);\r\n\t\t\tthis.renderChildren(elem, wrapper);\r\n\t\t\tresult.appendChild(wrapper);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.renderChildren(elem, result);\r\n\t\t}\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: WmlTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n\t\tthis.tableCellPositions.push(this.currentCellPosition);\t\r\n\t\tthis.tableVerticalMerges.push(this.currentVerticalMerge);\r\n\t\tthis.currentVerticalMerge = {};\t\r\n\t\tthis.currentCellPosition = { col: 0, row: 0};\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n\t\tthis.currentVerticalMerge = this.tableVerticalMerges.pop();\r\n\t\tthis.currentCellPosition = this.tableCellPositions.pop();\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: WmlTableColumn[]) {\r\n        let result = this.createElement(\"colgroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n\t\tthis.currentCellPosition.col = 0;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n\t\tthis.currentCellPosition.row ++;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: WmlTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n\t\tif (elem.verticalMerge) {\r\n\t\t\tconst key = this.currentCellPosition.col;\r\n\r\n\t\t\tif (elem.verticalMerge == \"restart\") {\r\n\t\t\t\tthis.currentVerticalMerge[key] = result;\r\n\t\t\t\tresult.rowSpan = 1;\r\n\t\t\t} else if(this.currentVerticalMerge[key]) {\r\n\t\t\t\tthis.currentVerticalMerge[key].rowSpan += 1;\r\n\t\t\t\tresult.style.display = \"none\";\r\n\t\t\t} \r\n\t\t}\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) \r\n\t\t\tresult.colSpan = elem.span;\r\n\r\n\t\tthis.currentCellPosition.col ++;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n\t\tObject.assign(ouput.style, style);\r\n    }\r\n\r\n\trenderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n\t\tif (input.className) \r\n\t\t\touput.className = input.className;\r\n\t\t\r\n\t\tif (input.styleName)\r\n\t\t\touput.classList.add(this.processStyleName(input.styleName));\r\n\t}\r\n\r\n\tfindStyle(styleName: string) {\r\n\t\treturn styleName && this.styleMap?.[styleName];\r\n\t}\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n\ttabStopClass() {\r\n        return `${this.className}-tab-stop`;\r\n\t}\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",\r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n\trefreshTabStops() {\r\n\t\tif (!this.options.experimental) \r\n\t\t\treturn;\r\n\r\n\t\tclearTimeout(this.tabsTimeout);\r\n\r\n\t\tthis.tabsTimeout = setTimeout(() => {\r\n\t\t\tconst pixelToPoint = computePixelToPoint();\r\n\r\n\t\t\tfor (let tab of this.currentTabs) {\r\n\t\t\t\tupdateTabStop(tab.span, tab.stops, this.defaultTabSize, pixelToPoint);\r\n\t\t\t}\r\n\t\t}, 500);\r\n\t}\r\n\r\n    createElement = createElement;\r\n}\r\n\r\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\r\n    tagName: T,\r\n    props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\r\n    children: Node[] = undefined\r\n): HTMLElementTagNameMap[T] {\r\n    var result = Object.assign(document.createElement(tagName), props);\r\n    children && appendChildren(result, children);\r\n    return result;\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction appendChildren(elem: HTMLElement, children: Node[]) {\r\n    children.forEach(c => elem.appendChild(c));\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    return createElement(\"style\", { innerHTML: cssText });\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { Length } from \"./document/common\";\r\nimport { ParagraphTab } from \"./document/paragraph\";\r\n\r\ninterface TabStop {\r\n\tpos: number;\r\n\tleader: string;\r\n\tstyle: string;\r\n}\r\n\r\nconst defaultTab: TabStop = { pos: 0, leader: \"none\", style: \"left\" };\r\nconst maxTabs = 50;\r\n\r\nexport function computePixelToPoint(container: HTMLElement = document.body) {\r\n\tconst temp = document.createElement(\"div\");\r\n\ttemp.style.width = '100pt';\r\n\t\r\n\tcontainer.appendChild(temp);\r\n\tconst result = 100 / temp.offsetWidth;\r\n\tcontainer.removeChild(temp);\r\n\r\n\treturn result\r\n}\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], defaultTabSize: Length, pixelToPoint: number = 72 / 96) {\r\n    const p = elem.closest(\"p\");\r\n\r\n    const ebb = elem.getBoundingClientRect();\r\n    const pbb = p.getBoundingClientRect();\r\n    const pcs = getComputedStyle(p);\r\n\r\n\tconst tabStops = tabs?.length > 0 ? tabs.map(t => ({\r\n\t\tpos: lengthToPoint(t.position),\r\n\t\tleader: t.leader,\r\n\t\tstyle: t.style\r\n\t})).sort((a, b) => a.pos - b.pos) : [defaultTab];\r\n\r\n\tconst lastTab = tabStops[tabStops.length - 1];\r\n\tconst pWidthPt = pbb.width * pixelToPoint;\r\n\tconst size = lengthToPoint(defaultTabSize);\r\n    let pos = lastTab.pos + size;\r\n\r\n    if (pos < pWidthPt) {\r\n        for (; pos < pWidthPt && tabStops.length < maxTabs; pos += size) {\r\n            tabStops.push({ ...defaultTab, pos: pos });\r\n        }\r\n    }\r\n\r\n    const marginLeft = parseFloat(pcs.marginLeft);\r\n    const pOffset = pbb.left + marginLeft;\r\n    const left = (ebb.left - pOffset) * pixelToPoint;\r\n    const tab = tabStops.find(t => t.style != \"clear\" && t.pos > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    let width: number = 1;\r\n\r\n    if (tab.style == \"right\" || tab.style == \"center\") {\r\n\t\tconst tabStops = Array.from(p.querySelectorAll(`.${elem.className}`));\r\n\t\tconst nextIdx = tabStops.indexOf(elem) + 1;\r\n        const range = document.createRange();\r\n        range.setStart(elem, 1);\r\n\r\n\t\tif (nextIdx < tabStops.length) {\r\n\t\t\trange.setEndBefore(tabStops[nextIdx]);\r\n\t\t} else {\r\n\t\t\trange.setEndAfter(p);\r\n\t\t}\r\n\r\n\t\tconst mul = tab.style == \"center\" ? 0.5 : 1;\r\n        const nextBB = range.getBoundingClientRect();\r\n\t\tconst offset = nextBB.left + mul * nextBB.width - (pbb.left - marginLeft);\r\n\r\n\t\twidth = tab.pos - offset * pixelToPoint;\r\n    } else {\r\n        width = tab.pos - left;\r\n    }\r\n\r\n    elem.innerHTML = \"&nbsp;\";\r\n    elem.style.textDecoration = \"inherit\";\r\n    elem.style.wordSpacing = `${width.toFixed(0)}pt`;\r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.textDecoration = \"underline\";\r\n            elem.style.textDecorationStyle = \"dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.textDecoration = \"underline\";\r\n            break;\r\n    }\r\n}\r\n\r\nfunction lengthToPoint(length: Length): number {\r\n\treturn parseFloat(length);\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport abstract class WmlBaseNote implements OpenXmlElement {\r\n    id: string;\r\n\ttype: DomType;\r\n\tnoteType: string;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFootnote extends WmlBaseNote {\r\n\ttype = DomType.Footnote\r\n}\r\n\r\nexport class WmlEndnote extends WmlBaseNote {\r\n\ttype = DomType.Endnote\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlBaseNote, WmlEndnote, WmlFootnote } from \"./elements\";\r\n\r\nexport class BaseNotePart<T extends WmlBaseNote> extends Part {\r\n    protected _documentParser: DocumentParser;\r\n\r\n    notes: T[]\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n}\r\n\r\nexport class FootnotesPart extends BaseNotePart<WmlFootnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"footnote\", WmlFootnote);\r\n    }\r\n}\r\n\r\nexport class EndnotesPart extends BaseNotePart<WmlEndnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"endnote\", WmlEndnote);\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphStyle: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pStyle\":\r\n                result.paragraphStyle = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n\thexAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val, 16) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { WmlSettings, parseSettings } from \"./settings\";\r\n\r\nexport class SettingsPart extends Part {\r\n\tsettings: WmlSettings;\r\n\r\n\tconstructor(pkg: OpenXmlPackage, path: string) {\r\n\t\tsuper(pkg, path);\r\n\t}\r\n\r\n\tparseXml(root: Element) {\r\n\t\tthis.settings = parseSettings(root, this._package.xmlParser);\r\n\t}\r\n}","import { DocumentParser } from \"../document-parser\";\r\nimport { Length } from \"../document/common\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface WmlSettings {\r\n\tdefaultTabStop: Length;\r\n\tfootnoteProps: NoteProperties;\r\n\tendnoteProps: NoteProperties;\r\n\tautoHyphenation: boolean;\r\n}\r\n\r\nexport interface NoteProperties {\r\n\tnummeringFormat: string;\r\n\tdefaultNoteIds: string[];\r\n}\r\n\r\nexport function parseSettings(elem: Element, xml: XmlParser) {\r\n\tvar result = {} as WmlSettings; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"defaultTabStop\": result.defaultTabStop = xml.lengthAttr(el, \"val\"); break;\r\n\t\t\tcase \"footnotePr\": result.footnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"endnotePr\": result.endnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"autoHyphenation\": result.autoHyphenation = xml.boolAttr(el, \"val\"); break;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNoteProperties(elem: Element, xml: XmlParser) {\r\n\tvar result = {\r\n\t\tdefaultNoteIds: []\r\n\t} as NoteProperties; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"numFmt\": \r\n\t\t\t\tresult.nummeringFormat = xml.attr(el, \"val\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"footnote\": \r\n\t\t\tcase \"endnote\": \r\n\t\t\t\tresult.defaultNoteIds.push(xml.attr(el, \"id\"));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","export function escapeClassName(className: string) {\r\n\treturn className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and').toLowerCase();\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"http://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substring(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function blobToBase64(blob: Blob): any {\r\n\treturn new Promise((resolve, _) => {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onloadend = () => resolve(reader.result);\r\n\t\treader.readAsDataURL(blob);\r\n\t});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { blobToBase64, resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart, HeaderPart } from \"./header-footer/parts\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { EndnotesPart, FootnotesPart } from \"./notes/parts\";\r\nimport { SettingsPart } from \"./settings/settings-part\";\r\nimport { CustomPropsPart } from \"./document-props/custom-props-part\";\r\n\r\nconst topLevelRels = [\r\n\t{ type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n\t{ type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n\t{ type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n\t{ type: RelationshipTypes.CustomProperties, target: \"docProps/custom.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n\tprivate _package: OpenXmlPackage;\r\n\tprivate _parser: DocumentParser;\r\n\tprivate _options: any;\r\n\r\n\trels: Relationship[];\r\n\tparts: Part[] = [];\r\n\tpartsMap: Record<string, Part> = {};\r\n\r\n\tdocumentPart: DocumentPart;\r\n\tfontTablePart: FontTablePart;\r\n\tnumberingPart: NumberingPart;\r\n\tstylesPart: StylesPart;\r\n\tfootnotesPart: FootnotesPart;\r\n\tendnotesPart: EndnotesPart;\r\n\tthemePart: ThemePart;\r\n\tcorePropsPart: CorePropsPart;\r\n\textendedPropsPart: ExtendedPropsPart;\r\n\tsettingsPart: SettingsPart;\r\n\r\n\tstatic load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n\t\tvar d = new WordDocument();\r\n\r\n\t\td._options = options;\r\n\t\td._parser = parser;\r\n\r\n\t\treturn OpenXmlPackage.load(blob, options)\r\n\t\t\t.then(pkg => {\r\n\t\t\t\td._package = pkg;\r\n\r\n\t\t\t\treturn d._package.loadRelationships();\r\n\t\t\t}).then(rels => {\r\n\t\t\t\td.rels = rels;\r\n\r\n\t\t\t\tconst tasks = topLevelRels.map(rel => {\r\n\t\t\t\t\tconst r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n\t\t\t\t\treturn d.loadRelationshipPart(r.target, r.type);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.all(tasks);\r\n\t\t\t}).then(() => d);\r\n\t}\r\n\r\n\tsave(type = \"blob\"): Promise<any> {\r\n\t\treturn this._package.save(type);\r\n\t}\r\n\r\n\tprivate loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n\t\tif (this.partsMap[path])\r\n\t\t\treturn Promise.resolve(this.partsMap[path]);\r\n\r\n\t\tif (!this._package.get(path))\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tlet part: Part = null;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase RelationshipTypes.OfficeDocument:\r\n\t\t\t\tthis.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.FontTable:\r\n\t\t\t\tthis.fontTablePart = part = new FontTablePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Numbering:\r\n\t\t\t\tthis.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Styles:\r\n\t\t\t\tthis.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Theme:\r\n\t\t\t\tthis.themePart = part = new ThemePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footnotes:\r\n\t\t\t\tthis.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Endnotes:\r\n\t\t\t\tthis.endnotesPart = part = new EndnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footer:\r\n\t\t\t\tpart = new FooterPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Header:\r\n\t\t\t\tpart = new HeaderPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CoreProperties:\r\n\t\t\t\tthis.corePropsPart = part = new CorePropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.ExtendedProperties:\r\n\t\t\t\tthis.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CustomProperties:\r\n\t\t\t\tpart = new CustomPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase RelationshipTypes.Settings:\r\n\t\t\t\tthis.settingsPart = part = new SettingsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (part == null)\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tthis.partsMap[path] = part;\r\n\t\tthis.parts.push(part);\r\n\r\n\t\treturn part.load().then(() => {\r\n\t\t\tif (part.rels == null || part.rels.length == 0)\r\n\t\t\t\treturn part;\r\n\r\n\t\t\tconst [folder] = splitPath(part.path);\r\n\t\t\tconst rels = part.rels.map(rel => {\r\n\t\t\t\treturn this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n\t\t\t});\r\n\r\n\t\t\treturn Promise.all(rels).then(() => part);\r\n\t\t});\r\n\t}\r\n\r\n\tloadDocumentImage(id: string, part?: Part): PromiseLike<string> {\r\n\t\treturn this.loadResource(part ?? this.documentPart, id, \"blob\")\r\n\t\t\t.then(x => this.blobToURL(x));\r\n\t}\r\n\r\n\tloadNumberingImage(id: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.numberingPart, id, \"blob\")\r\n\t\t\t.then(x => this.blobToURL(x));\r\n\t}\r\n\r\n\tloadFont(id: string, key: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n\t\t\t.then(x => x ? this.blobToURL(new Blob([deobfuscate(x, key)])) : x);\r\n\t}\r\n\r\n\tprivate blobToURL(blob: Blob): string | PromiseLike<string> {\r\n\t\tif (!blob)\r\n\t\t\treturn null;\r\n\r\n\t\tif (this._options.useBase64URL) {\r\n\t\t\treturn blobToBase64(blob);\r\n\t\t}\r\n\r\n\t\treturn URL.createObjectURL(blob);\r\n\t}\r\n\r\n\tfindPartByRelId(id: string, basePart: Part = null) {\r\n\t\tvar rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n\t\tconst folder = basePart ? splitPath(basePart.path)[0] : '';\r\n\t\treturn rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n\t}\r\n\r\n\tgetPathById(part: Part, id: string): string {\r\n\t\tconst rel = part.rels.find(x => x.id == id);\r\n\t\tconst [folder] = splitPath(part.path);\r\n\t\treturn rel ? resolvePath(rel.target, folder) : null;\r\n\t}\r\n\r\n\tprivate loadResource(part: Part, id: string, outputType: OutputType) {\r\n\t\tconst path = this.getPathById(part, id);\r\n\t\treturn path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n\t}\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n\tconst len = 16;\r\n\tconst trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n\tconst numbers = new Array(len);\r\n\r\n\tfor (let i = 0; i < len; i++)\r\n\t\tnumbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n\tfor (let i = 0; i < 32; i++)\r\n\t\tdata[i] = data[i] ^ numbers[i % len]\r\n\r\n\treturn data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__626__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__626__","OpenXmlPackage","constructor","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","static","input","JSZip","loadAsync","then","zip","save","type","generateAsync","load","async","Promise","resolve","loadRelationships","relsPath","f","fn","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","borderColor","highlight","ignoreWidth","debug","parseNotes","elemName","elemClass","result","el","node","noteType","children","parseBodyElements","push","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","xmlUtil","colorAttr","foreach","localName","parseParagraph","parseTable","parseSdt","forEach","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","isDefault","boolAttr","linked","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","s","parseTableStyle","console","warn","selector","modificator","mod","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","x","parseNumberingPicBullet","numId","abstractNumId","elementAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyleName","undefined","pStyle","rStyle","suff","bullet","find","levelText","format","sdtContent","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","styleName","className","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","SimpleField","instruction","lock","dirty","fieldRun","Instruction","ComplexField","charType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","EndnoteReference","d","parseDrawing","run","verticalAlign","valueOfVertAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","lengthAttr","LengthUsage","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","colBandSize","rowBandSize","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","isHeader","Cell","parseTableCellProperties","cell","span","verticalMerge","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","join","length","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","knownColors","cb","i","childNodes","nodeType","Node","ELEMENT_NODE","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertLength","Percent","Border","_","asTagName","a","b","hexAttr","trim","CorePropsPart","Part","parseCoreProps","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseInt","CustomPropsPart","parseCustomProps","firstChild","formatId","nodeName","value","ExtendedPropsPart","parseExtendedProps","safeParseToInt","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","parseBorder","size","Point","frame","shadow","top","bottom","ns","wordml","drawingml","picture","compatibility","mul","unit","LineHeight","usage","test","defaultValue","namespaceURI","fontSize","DocumentPart","pkg","parser","super","_documentParser","body","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","parsePageNumber","chapSep","chapStyle","parseFooterHeaderReference","SectionType","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","titlePage","pageBorders","parseBorders","pageNumber","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","renderEndnotes","useBase64URL","data","userOptions","ops","WordDocument","DocumentParser","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","FontTablePart","parseFonts","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","Header","Footer","BaseHeaderFooterPart","rootElement","createRootElement","WmlHeader","WmlFooter","createElement","tagName","Object","assign","appendChildren","removeAllElements","innerHTML","appendChild","createStyleElement","cssText","appendComment","comment","createComment","htmlDocument","styleMap","currentPart","tableVerticalMerges","currentVerticalMerge","tableCellPositions","currentCellPosition","footnoteMap","endnoteMap","currentEndnoteIds","usedHederFooterParts","currentTabs","tabsTimeout","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","prodessNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","notes","endnotesPart","settingsPart","defaultTabSize","settings","defaultTabStop","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","refreshTabStops","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","k","entries","colors","styleToString","fontsPart","ref","loadFont","fontData","cssValues","processStyleName","escapeClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","numberings","num","findStyle","processElement","processTable","r","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","sections","splitBySection","prevProps","l","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","renderHeaderFooter","contentElement","renderElements","renderNotes","refs","page","firstOfSection","into","part","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","styleText","rootCounters","numberingClass","listStyleType","valiable","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","defautStyles","subStyles","linkedStyle","concat","subStyle","noteIds","notesMap","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","Footnote","Endnote","renderFootnoteReference","renderEndnoteReference","renderChildren","elems","renderClass","renderCommonProperties","classList","add","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","tabSpan","tabStopClass","stops","findParent","wrapper","renderTableColumns","pop","colElem","rowSpan","colSpan","ouput","lvl","selectors","numformat","replace","substring","clearTimeout","setTimeout","pixelToPoint","computePixelToPoint","tab","updateTabStop","defaultTab","lengthToPoint","parseFloat","container","temp","offsetWidth","removeChild","closest","ebb","getBoundingClientRect","pbb","pcs","getComputedStyle","tabStops","t","sort","lastTab","pWidthPt","marginLeft","pOffset","Array","from","querySelectorAll","nextIdx","indexOf","range","createRange","setStart","setEndBefore","setEndAfter","nextBB","textDecoration","wordSpacing","textDecorationStyle","WmlBaseNote","BaseNotePart","WmlFootnote","WmlEndnote","NumberingPart","parseNumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","attrLocalName","attributes","floatAttr","convertBoolean","globalXmlParser","SettingsPart","parseSettings","parseNoteProperties","defaultNoteIds","nummeringFormat","footnoteProps","endnoteProps","autoHyphenation","StylesPart","ThemePart","parseTheme","DmlTheme","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","themeElements","isObject","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","blob","reader","FileReader","onloadend","readAsDataURL","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","CustomProperties","parts","partsMap","_options","_parser","tasks","rel","loadRelationshipPart","FontTable","Numbering","Styles","Theme","Footnotes","FootnotesPart","Endnotes","EndnotesPart","FooterPart","HeaderPart","corePropsPart","extendedPropsPart","Settings","folder","resolvePath","loadResource","blobToURL","Blob","deobfuscate","blobToBase64","createObjectURL","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}