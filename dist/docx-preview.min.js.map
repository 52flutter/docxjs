{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/parser/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/document-parser.ts","webpack://docx/./src/parser/paragraph.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__7__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","wordml","LengthUsage","parseLength","val","usage","Dxa","num","parseInt","type","Emu","FontSize","Border","Percent","elem","namespaceURI","localName","result","childNodes","length","nodeType","push","getAttributeNS","defaultValue","DomType","DomRelationshipType","tabObject","tab","appendClass","classList","className","element","parseColumns","numberOfColumns","xml","intAttr","space","lengthAttr","separator","boolAttr","equalWidth","columns","elements","map","e","width","section","pageSize","height","orientation","stringAttr","pageMargins","left","right","top","bottom","header","footer","gutter","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","Document","load","then","doc","render","PartType","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","FontTable","Numbering","Promise","all","filter","x","loadDocumentImage","id","this","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","relations","outputType","rel","find","target","async","resolve","part","f","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","fontTable","parseFontTable","guidKey","trimmed","replace","numbers","Array","substr","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","values","valueOfRelType","xfonts","fontKey","elementStringAttr","refId","children","style","props","xbody","byTagName","foreach","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","colorAttr","fontSize","isDefault","linked","aliases","split","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","pict","shape","imagedata","src","parseNumberingLevel","level","bullet","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","Run","parent","Hyperlink","anchor","href","Text","text","textContent","fldCharType","break","Tab","instrText","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","output","valueOfBorder","DOMParser","parseFromString","firstChild","tagName","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","convertSize","indexOf","intVal","Settings","Theme","StylesWithEffects","Styles","WebSettings","Unknown","trim","a","b","checkMask","mask","tabs","position","leader","parseTabs","sectionProps","parseNumbering","htmlDocument","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","breakIndex","findIndex","newParagraph","slice","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","display","textIndent","createTextNode","tabSpan","innerHTML","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__7__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","export const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: \"px\" | \"pt\" | \"%\"\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length } from \"../dom/common\";\r\n\r\nexport function elements(elem: Element, namespaceURI: string = null, localName: string = null): Element[] {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < elem.childNodes.length; i++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if (n.nodeType == 1\r\n            && (namespaceURI == null || n.namespaceURI == namespaceURI)\r\n            && (localName == null || (n as Element).localName == localName))\r\n            result.push(n);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function stringAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    return elem.getAttributeNS(namespaceURI, name);\r\n}\r\n\r\nexport function intAttr(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function colorAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function boolAttr(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if(val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport function lengthAttr(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\r\n}\r\n\r\nexport enum LengthUsage {\r\n    Dxa, //twips\r\n    Emu,\r\n    FontSize,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    if (!val)\r\n        return null;\r\n\r\n    var num = parseInt(val);\r\n\r\n    switch (usage) {\r\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\r\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\r\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\r\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\r\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\r\n    }\r\n\r\n    return null;\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\"\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport const tabObject = { tab: true };\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}","import { SectionProperties } from \"../dom/document\";\r\nimport { ns, Columns, Column } from \"../dom/common\";\r\nimport * as xml from './common';\r\n\r\nexport function parseSectionProperties(elem: Element): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                    height: xml.lengthAttr(e, ns.wordml, \"h\"),\r\n                    orientation: xml.stringAttr(e, ns.wordml, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, ns.wordml, \"left\"),\r\n                    right: xml.lengthAttr(e, ns.wordml, \"right\"),\r\n                    top: xml.lengthAttr(e, ns.wordml, \"top\"),\r\n                    bottom: xml.lengthAttr(e, ns.wordml, \"bottom\"),\r\n                    header: xml.lengthAttr(e, ns.wordml, \"header\"),\r\n                    footer: xml.lengthAttr(e, ns.wordml, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, ns.wordml, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, ns.wordml, \"num\"),\r\n        space: xml.lengthAttr(elem, ns.wordml, \"space\"),\r\n        separator: xml.boolAttr(elem, ns.wordml, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, ns.wordml, \"equalWidth\", true),\r\n        columns: xml.elements(elem, ns.wordml, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                space: xml.lengthAttr(e, ns.wordml, \"space\")\r\n            })\r\n    };\r\n}","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return Document.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    FontTable = \"word/fontTable.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    fontTable: any;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.FontTable, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string, outputType: JSZip.OutputType = \"base64\") {\r\n        let rel = relations.find(x => x.id == id);\r\n        return rel ? this.zip.files[\"word/\" + rel.target].async(outputType) : Promise.resolve(null);\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"text\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n\r\n                case PartType.FontTable:\r\n                    this.fontTable = parser.parseFontTable(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DomRelationshipType, tabObject, TextElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ns, CommonProperties } from './dom/common';\r\nimport { lengthAttr, colorAttr, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { parseParagraphProperties } from './parser/paragraph';\r\nimport { parseSectionProperties } from './parser/section';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseFontTable(xmlString: string) {\r\n        var xfonts = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xfonts).map(c => <any>{\r\n            name: xml.stringAttr(c, \"name\"),\r\n            fontKey: xml.elementStringAttr(c, \"embedRegular\", \"fontKey\"), \r\n            refId: xml.elementStringAttr(c, \"embedRegular\", \"id\")\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != ns.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = colorAttr(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = lengthAttr(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            if(parseParagraphProperties(c, paragraph.props))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { type: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n\r\n                    if(elem.localName == \"pPr\") {\r\n                        style[\"min-height\"] = style[\"font-size\"];\r\n                        debugger;\r\n                    }\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { ParagraphTab, ParagraphProperties, ParagraphNumbering } from \"../dom/paragraph\";\r\nimport * as xml from \"./common\";\r\nimport { ns } from \"../dom/common\";\r\nimport { parseSectionProperties } from \"./section\";\r\n\r\nexport function parseParagraphProperties(elem: Element, props: ParagraphProperties) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction parseTabs(elem: Element): ParagraphTab[] {\r\n    return xml.elements(elem, ns.wordml, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, ns.wordml, \"pos\"),\r\n            leader: xml.stringAttr(e, ns.wordml, \"leader\"),\r\n            style: xml.stringAttr(e, ns.wordml, \"val\")\r\n        });\r\n}\r\n\r\nfunction parseNumbering(elem: Element): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.stringAttr(e, ns.wordml, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, ns.wordml, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement, SectionProperties } from './dom/document';\r\nimport { ParagraphElement} from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Options;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        appendComment(styleContainer, \"docx document styles\");\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts)\r\n            this.renderFontTable(document.fontTable, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fonts: any[], styleContainer: HTMLElement) {\r\n        for(let f of fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n                var sectProps = p.props.sectionProps;\r\n                var breakIndex = this.options.breakPages ? (p.children && p.children.findIndex(x => (<any>x).break == \"page\")) : -1;\r\n    \r\n                if(sectProps || breakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(breakIndex != -1 && breakIndex < p.children.length - 1) {\r\n                    var children = elem.children;\r\n                    var newParagraph = { ...elem, children: children.slice(breakIndex) };\r\n                    elem.children = children.slice(0, breakIndex);\r\n                    current.elements.push(newParagraph);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.props.numbering) {\r\n            var numberingClass = this.numberingClass(elem.props.numbering.id, elem.props.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}