{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/deobfuscate.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/html-renderer.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomType","DomRelationshipType","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","className","inWrapper","Document","load","then","doc","render","PartType","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","FontTable","Numbering","Promise","all","filter","x","loadDocumentImage","id","this","loadResource","loadNumberingImage","loadFont","deobfuscate","relations","output","rel","length","resolve","target","async","part","f","xml","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","fontTable","parseFontTable","guidKey","hexNumbers","replace","trim","split","map","hexString","parseInt","reverse","array","Uint8Array","reader","FileReader","onload","event","result","readAsDataURL","Blob","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","elements","stringAttr","type","values","valueOfRelType","xfonts","fontKey","elementStringAttr","refId","domType","children","style","props","xbody","byTagName","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","namespaceURI","namespaces","wordml","getAttributeColorValue","fontSize","getAttributeLengthValue","LengthUsage","FontSize","isDefault","boolAttr","linked","aliases","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","levelText","format","section","forEachElementNS","e","pageSize","width","height","orientation","getAttributeNS","pageMargins","left","right","top","bottom","header","footer","gutter","columns","parseColumns","numberOfColumns","getAttributeIntValue","space","separator","getAttributeBoolValue","equalWidth","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","sectionProps","parseNumbering","parseFrame","parseTabs","numberingId","numberingLevel","Run","parent","Hyperlink","anchor","href","text","textContent","break","tab","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","tabs","position","leader","valueOfBorder","DOMParser","parseFromString","firstChild","tagName","childNodes","nodeType","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","Dxa","convertSize","indexOf","intVal","Border","Percent","Settings","Theme","StylesWithEffects","Styles","WebSettings","Unknown","a","b","checkMask","num","mask","appendClass","classList","element","parseLength","usage","callback","defaultValue","htmlDocument","digitTest","test","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","breakIndex","findIndex","newParagraph","slice","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","display","textIndent","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","removeChild","styleElement","innerHTML","comment","createComment"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum DomType {\r\n    Document,\r\n    Paragraph,\r\n    Run,\r\n    Break,\r\n    Table,\r\n    Row,\r\n    Cell,\r\n    Hyperlink,\r\n    Drawing,\r\n    Image\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    domType: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface DocxTab {\r\n    style: string;\r\n    leader: string;\r\n    position: string;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    text?: string;\r\n    href?: string;\r\n    tab?: boolean;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return Document.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\nimport { deobfuscate } from './deobfuscate';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    FontTable = \"word/fontTable.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    fontTable: any;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.FontTable, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        //const mimeType = \"application/vnd.ms-package.obfuscated-opentype\";\r\n        const mimeType = \"application/x-font-ttf\";\r\n        //const mimeType = \"application/vnd.ms-fontobject\";\r\n        return this.loadResource(this.fontRelations, id, \"array\")\r\n            .then(x => x ? deobfuscate(x, key) : x);\r\n            //.then(x => x ? (`data:${mimeType};base64,${x}`) : null);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string, output: \"base64\" | \"array\" = \"base64\") {\r\n        let rel = relations.filter(x => x.id == id);\r\n\r\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(output);\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"text\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n\r\n                case PartType.FontTable:\r\n                    this.fontTable = parser.parseFontTable(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","export function deobfuscate(data: number[], guidKey: string): Promise<string> {\r\n    const hexStrings = guidKey.replace(/{|}|-/g, \"\").replace(/(..)/g, \"$1 \").trim().split(\" \")\r\n    const hexNumbers = hexStrings.map((hexString) => parseInt(hexString, 16))\r\n    hexNumbers.reverse()\r\n\r\n    var array = new Uint8Array(data);\r\n\r\n    for (let i = 0; i < 32; i++) {\r\n        array[i] = array[i] ^ hexNumbers[i % hexNumbers.length]\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        var reader = new FileReader();\r\n        reader.onload = (event) => resolve(event.target.result as string);\r\n        reader.readAsDataURL(new Blob([array]));\r\n    });\r\n}","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { SectionProperties, DocumentElement } from './dom/document';\r\nimport { namespaces, Columns, CommonProperties } from './dom/common';\r\nimport { forEachElementNS, getAttributeLengthValue, getAttributeIntValue, getAttributeBoolValue, getAttributeColorValue, LengthUsage } from './parser/common';\r\nimport { ParagraphElement, ParagraphProperties } from './dom/paragraph';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseFontTable(xmlString: string) {\r\n        var xfonts = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xfonts).map(c => <any>{\r\n            name: xml.stringAttr(c, \"name\"),\r\n            fontKey: xml.elementStringAttr(c, \"embedRegular\", \"fontKey\"), \r\n            refId: xml.elementStringAttr(c, \"embedRegular\", \"id\")\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            domType: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = this.parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != namespaces.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = getAttributeColorValue(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = getAttributeLengthValue(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseSectionProperties(elem: Element): SectionProperties {\r\n        var section = <SectionProperties>{};\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            switch(e.localName) {\r\n                case \"pgSz\":\r\n                    section.pageSize = {\r\n                        width: getAttributeLengthValue(e, namespaces.wordml, \"w\"),\r\n                        height: getAttributeLengthValue(e, namespaces.wordml, \"h\"),\r\n                        orientation: e.getAttributeNS(namespaces.wordml, \"orient\")\r\n                    }\r\n                    break;\r\n\r\n                case \"pgMar\":\r\n                    section.pageMargins = {\r\n                        left: getAttributeLengthValue(e, namespaces.wordml, \"left\"),\r\n                        right: getAttributeLengthValue(e, namespaces.wordml, \"right\"),\r\n                        top: getAttributeLengthValue(e, namespaces.wordml, \"top\"),\r\n                        bottom: getAttributeLengthValue(e, namespaces.wordml, \"bottom\"),\r\n                        header: getAttributeLengthValue(e, namespaces.wordml, \"header\"),\r\n                        footer: getAttributeLengthValue(e, namespaces.wordml, \"footer\"),\r\n                        gutter: getAttributeLengthValue(e, namespaces.wordml, \"gutter\"),\r\n                    };\r\n                    break;\r\n\r\n                case \"cols\":\r\n                    section.columns = this.parseColumns(e);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return section;\r\n    }\r\n\r\n    parseColumns(elem: Element): Columns {\r\n        var result = {\r\n            numberOfColumns: getAttributeIntValue(elem, namespaces.wordml, \"num\"),\r\n            space: getAttributeLengthValue(elem, namespaces.wordml, \"space\"),\r\n            separator: getAttributeBoolValue(elem, namespaces.wordml, \"sep\"),\r\n            equalWidth: getAttributeBoolValue(elem, namespaces.wordml, \"equalWidth\", true),\r\n            columns: []\r\n        };\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            if(e.localName != \"col\")\r\n                return;\r\n\r\n            result.columns.push({\r\n                width: getAttributeLengthValue(elem, namespaces.wordml, \"w\"),\r\n                space: getAttributeLengthValue(elem, namespaces.wordml, \"space\")\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ domType: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n                \r\n                case \"sectPr\":\r\n                    paragraph.props.sectionProps = this.parseSectionProperties(c);\r\n                    break;\r\n\r\n                case \"numPr\":\r\n                    this.parseNumbering(c, paragraph);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"tabs\":\r\n                    this.parseTabs(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseNumbering(node: Element, paragraph: ParagraphElement) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"numId\":\r\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"ilvl\":\r\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { domType: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.tab = true;\r\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ domType: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { domType: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\r\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\r\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\r\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\r\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\r\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n\r\n                    if(elem.localName == \"pPr\") {\r\n                        style[\"min-height\"] = style[\"font-size\"];\r\n                        debugger;\r\n                    }\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseTabs(node: Element, paragraph: ParagraphElement) {\r\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\r\n            position: xml.sizeAttr(n, \"pos\"),\r\n            leader: xml.stringAttr(n, \"leader\"),\r\n            style: xml.stringAttr(n, \"val\"),\r\n        });\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}\r\n","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}","export const namespaces = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: \"px\" | \"pt\" | \"%\"\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length } from \"../dom/common\";\r\n\r\nexport function forEachElementNS(elem: Element, namespaceURI: string, callback: (elem: Element) => any) {\r\n    for(let i = 0; i < elem.childNodes.length; i ++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if(n.nodeType == 1 && n.namespaceURI == namespaceURI)\r\n            callback(<Element>n);\r\n    }\r\n}\r\n\r\nexport function getAttributeIntValue(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function getAttributeColorValue(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function getAttributeBoolValue(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if(val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport function getAttributeLengthValue(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\r\n}\r\n\r\nexport enum LengthUsage {\r\n    Dxa,\r\n    Emu,\r\n    FontSize,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    if (!val)\r\n        return null;\r\n\r\n    var num = parseInt(val);\r\n\r\n    switch (usage) {\r\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\r\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\r\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\r\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\r\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\r\n    }\r\n\r\n    return null;\r\n}","import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement, SectionProperties } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Options;\r\n\r\n    private digitTest = /^[0-9]/.test;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        appendComment(styleContainer, \"docx document styles\");\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts)\r\n            this.renderFontTable(document.fontTable, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fonts: any[], styleContainer: HTMLElement) {\r\n        for(let f of fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n\r\n                if (e.domType == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            current.elements.push(elem);\r\n\r\n            if(elem.domType == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n                var sectProps = p.props.sectionProps;\r\n                var breakIndex = this.options.breakPages ? (p.children && p.children.findIndex(x => (<any>x).break == \"page\")) : -1;\r\n    \r\n                if(sectProps || breakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(breakIndex != -1 && breakIndex < p.children.length - 1) {\r\n                    var children = elem.children;\r\n                    var newParagraph = { ...elem, children: children.slice(breakIndex) };\r\n                    elem.children = children.slice(0, breakIndex);\r\n                    current.elements.push(newParagraph);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): HTMLElement {\r\n        switch (elem.domType) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.numberingId && elem.numberingLevel != null) {\r\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.text)\r\n            result.textContent = elem.text;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.id) {\r\n            result.id = elem.id;\r\n        }\r\n\r\n        if (elem.tab) {\r\n            //TODO\r\n            // result.style.display = \"inline-block\";\r\n\r\n            // var paragraph = <IDomParagraph>elem.parent;\r\n\r\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\r\n            //     paragraph = <IDomParagraph>paragraph.parent;\r\n\r\n            // if (paragraph && paragraph.tabs) {\r\n            //     var tab = paragraph.tabs[0];\r\n\r\n            //     result.style.width = tab.position;\r\n\r\n            //     switch (tab.leader) {\r\n            //         case \"dot\":\r\n            //         case \"middleDot\":\r\n            //             result.style.borderBottom = \"1px black dotted\";\r\n            //             break;\r\n\r\n            //         case \"hyphen\":\r\n            //         case \"heavy\":\r\n            //         case \"underscore\":\r\n            //             result.style.borderBottom = \"1px black solid\";\r\n            //             break;\r\n            //     }\r\n            // }\r\n        }\r\n        else if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}"],"sourceRoot":""}