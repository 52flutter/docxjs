{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlHeader } from './header/header';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): WmlFooter {\r\n        var result = new WmlFooter();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): WmlHeader {\r\n        var result = new WmlHeader();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: {},\r\n        };\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    suff?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFooter } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: WmlFooter;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../dom/dom\";\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlHeader } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: WmlHeader;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../dom/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunProperties } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n\r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.htmlDocument.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",            \r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"file://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\n\r\nconst topLevelRels = [\r\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n    corePropsPart: CorePropsPart;\r\n    extendedPropsPart: ExtendedPropsPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                const tasks = topLevelRels.map(rel => {\r\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n                    return d.loadRelationshipPart(r.target, r.type);\r\n                });\r\n\r\n                return Promise.all(tasks);\r\n            }).then(() => d);\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Theme:\r\n                part = new ThemePart(this._package, path);\r\n                break;\r\n    \r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.CoreProperties:\r\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.ExtendedProperties:\r\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            const [folder] = splitPath(part.path); \r\n            const rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        const [folder] = splitPath(part.path); \r\n        return rel ? resolvePath(rel.target, folder) : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseFooter","result","WmlFooter","children","parseBodyElements","parseHeader","WmlHeader","parseDocumentFile","xbody","element","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","foreach","elem","localName","push","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyle","rStyle","suff","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","instrText","d","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","test","intVal","Border","Percent","replace","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","el","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","namespaceURI","fontSize","lengthAttr","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","fonts","parseFonts","FontTablePart","family","altName","fontKey","refId","footerElement","FooterPart","Footer","headerElement","HeaderPart","Header","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","numberings","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","styleToString","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","t","borderBottom","assign","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","parse","skipDeclaration","item","elementAttr","attrLocalName","undefined","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","theme","parseTheme","ThemePart","parseColorScheme","colors","srgbClr","sysClr","parseFontScheme","majorFont","parseFontInfo","minorFont","latinTypeface","eaTypeface","csTypeface","DmlTheme","themeElements","colorScheme","fontScheme","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","mergeDeep","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}