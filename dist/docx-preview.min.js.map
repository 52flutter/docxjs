{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/config.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/breaks.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/document.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/drawing.ts","webpack://docx/./src/document/fields.ts","webpack://docx/./src/document/hyperlink.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/document/table-cell.ts","webpack://docx/./src/document/table-row.ts","webpack://docx/./src/document/table.ts","webpack://docx/./src/document/text.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/parser/xml-serialize.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__792__","_zip","xmlParser","XmlParser","exists","path","this","files","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","text","parseRelationships","parseXmlString","firstElementChild","_package","all","rels","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","trimXmlDeclaration","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","keepOrigin","deserialize","elem","output","deserializeElement","parseDocumentFile","xmlDoc","xbody","element","result","WmlDocument","body","WmlBody","parseBodyElements","parseFooter","WmlFooter","parseHeader","WmlHeader","localName","children","push","parseParagraph","parseTable","parseStylesFile","xstyles","xml","foreach","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","WmlParagraph","parseRun","parseHyperlink","paragraph","cssStyle","parseParagraphProperty","props","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","WmlHyperlink","WmlRun","d","parseDrawing","run","Object","assign","parseDrawingWrapper","WmlDrawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","textContent","sizeValue","g","parseGraphic","graphicData","parsePicture","ImageElement","blipFill","blip","spPr","xfrm","WmlTable","parseTableRow","parseTableProperties","parseTableColumns","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","WmlTableRow","parseTableCell","parseTableRowProperties","row","WmlTableCell","parseTableCellProperties","cell","span","verticalMerge","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","fromAttribute","WmlBookmarkStart","DocxElement","WmlBookmarkEnd","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","WmlBreak","WmlLastRenderedPageBreak","ns","wordml","mul","unit","LineHeight","usage","value","defaultValue","pkg","parser","_documentParser","documentElement","DocumentPart","fromElement","parseSectionProperties","DocxContainer","WmlFieldChar","convertBoolean","WmlFieldSimple","parse","anchor","namespaceURI","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleId","position","leader","WmlText","WmlSymbol","WmlTab","WmlInstructionText","parseRunProperty","styleName","border","fonts","parseRunFonts","shading","parseShading","spacing","stretch","percentageAttr","fontSize","bold","strike","doubleStrike","italics","underline","caps","smallCaps","imprint","outline","verticalAlignment","hAscii","cs","eastAsia","foreground","background","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","columns","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","fromText","default","data","bodyContainer","styleContainer","userOptions","renderer","HtmlRenderer","window","document","options","ignoreHeight","ignoreFonts","breakPages","ignoreLastRenderedPageBreak","experimental","inWrapper","WordDocument","doc","render","parseFonts","FontTablePart","el","family","altName","fontKey","refId","footerElement","FooterPart","headerElement","HeaderPart","htmlDocument","renderHeaders","renderFooters","domStyleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processDomStyles","domStyles","styleMap","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","keyBy","baseStyle","mergeDeep","domStylesMap","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","getOwnPropertyNames","key","hasOwnProperty","createElement","tagName","renderContainer","renderElements","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectProps","sectionElement","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","renderColor","test","listStyleType","styleText","rootCounters","numberingClass","num","toLowerCase","styleToString","loadNumberingImage","numFormatToCssValue","counter","numberingCounter","levelTextToContent","join","stylesMap","subStyles","linkedStyle","concat","subStyle","renderParagraphProperties","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderText","renderSymbol","renderTab","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderHeader","renderFooter","renderChildren","into","elems","$$docxElement","renderClass","renderStyleValues","appendClass","styleClassName","renderLineSpacing","renderRunProperties","renderShading","renderBorder","renderRunFonts","renderUnderline","renderRunVerticalAlignment","href","display","textIndent","loadDocumentImage","createTextNode","fontFamily","font","innerHTML","char","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","container","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","t","borderBottom","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","item","Node","ELEMENT_NODE","attributes","xmlString","DOMParser","parseFromString","XMLSerializer","serializeToString","floatAttr","parseFloat","convertPercentage","convertLength","globalXmlParser","schemaSymbol","Symbol","deserializeSchema","schema","prop","convert","getPrototypeXmlSchema","proto","prototype","elemName","schemaObj","$attr","ops","getPrototypeOf","$$xmlElement","child","obj","create","pPrElem","rPrElem","WmlStyle","link","autoRedefine","hidden","semiHidden","locked","uiPriority","parseStylesPart","defaults","parseDocumentDefaults","StylesPart","classList","isObject","Array","isArray","si","lastIndexOf","array","by","reduce","sources","source","shift","parts","partsMap","blob","_parser","OfficeDocument","loadRelationshipPart","part","FontTable","Numbering","Styles","Footer","Header","folder","rel","loadResource","URL","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","substr","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__792__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType): Promise<any> {\r\n        return this._zip.files[path]?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"string\").then(text => {\r\n            if (!text)\r\n                return null;\r\n\r\n            return parseRelationships(parseXmlString(text).firstElementChild, this.xmlParser);\r\n        })\r\n    }\r\n}","import { parseXmlString, serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path, 'string').then(text => {\r\n                this._xmlDocument = parseXmlString(text);\r\n                this.parseXml(this._xmlDocument.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","export default {\r\n    trimXmlDeclaration: false\r\n}","import { DocxContainer, DocxElement, IDomNumbering, NumberingPicBullet } from './document/dom';\r\nimport * as utils from './utils';\r\nimport { WmlBody, WmlDocument } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlHyperlink } from './document/hyperlink';\r\nimport { WmlTableCell } from './document/table-cell';\r\nimport { TableColumn, WmlTable } from './document/table';\r\nimport { WmlDrawing, ImageElement } from './document/drawing';\r\nimport { WmlTableRow } from './document/table-row';\r\nimport { deserializeElement } from './parser/xml-serialize';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlHeader } from './header/header';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n    keepOrigin: boolean = false;\r\n\r\n    private deserialize<T>(elem: Element, output: T): T {\r\n        return deserializeElement(elem, output, { keepOrigin: this.keepOrigin });\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): WmlDocument {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        const result = new WmlDocument();\r\n        result.body = this.deserialize(xbody, new WmlBody());\r\n        this.parseBodyElements(xmlDoc, result.body);\r\n        return result;\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): WmlFooter {\r\n        return this.parseBodyElements(xmlDoc, new WmlFooter());\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): WmlHeader {\r\n        return this.parseBodyElements(xmlDoc, new WmlHeader());\r\n    }\r\n\r\n    parseBodyElements<T extends DocxContainer>(elem: Element, output: T): T {\r\n        for(let e of globalXmlParser.elements(elem)) {\r\n            switch (e.localName) {\r\n                case \"p\":\r\n                    output.children.push(this.parseParagraph(e));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    output.children.push(this.parseTable(e));\r\n                    break;\r\n            }   \r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): WmlParagraph {\r\n        const result = this.deserialize(node, new WmlParagraph());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph.props, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: DocxElement): WmlHyperlink {\r\n        var result = this.deserialize(node, new WmlHyperlink(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: DocxElement): WmlRun {\r\n        var result = this.deserialize(node, new WmlRun(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n\r\n        Object.assign(run.props, parseRunProperties(elem, globalXmlParser));\r\n\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): DocxElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): DocxElement {\r\n        var result = new WmlDrawing();\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): DocxElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): ImageElement {\r\n        var result = new ImageElement();\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): WmlTable {\r\n        var result = this.deserialize(node, new WmlTable());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): TableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: WmlTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: WmlTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): WmlTableRow {\r\n        var result = this.deserialize(node, new WmlTableRow());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: WmlTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): WmlTableCell {\r\n        var result = this.deserialize(node, new WmlTableCell());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: WmlTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    cell.verticalMerge = xml.sizeAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"bookmarkStart\")\r\nexport class WmlBookmarkStart extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n    @fromAttribute(\"name\")\r\n    name: string;\r\n    @fromAttribute(\"colFirst\")\r\n    colFirst: number;\r\n    @fromAttribute(\"colLast\")\r\n    colLast: number;\r\n}\r\n\r\n@element(\"bookmarkEnd\")\r\nexport class WmlBookmarkEnd extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('br')\r\nexport class WmlBreak extends DocxElement {\r\n    @fromAttribute(\"type\")\r\n    type: \"page\" | \"column\" | \"textWrapping\";\r\n    \r\n    @fromAttribute(\"clear\")\r\n    clear: \"all\" | \"left\" | \"right\" | \"none\";\r\n}\r\n\r\n@element('lastRenderedPageBreak')\r\nexport class WmlLastRenderedPageBreak extends DocxElement {\r\n}","import { attr } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Underline {\r\n    color: string;\r\n    type: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseElementValue(elem: Element): string {\r\n    return attr(elem, \"val\");\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlDocument } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    documentElement: WmlDocument\r\n\r\n    parseXml(root: Element) {\r\n        this.documentElement = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","import { element, fromElement } from \"../parser/xml-serialize\";\r\nimport { DocxContainer, DocxElement } from \"./dom\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\n\r\n@element(\"document\")\r\nexport class WmlDocument extends DocxElement {\r\n    body: WmlBody;\r\n}\r\n\r\n@element(\"body\")\r\nexport class WmlBody extends DocxContainer {\r\n    @fromElement(\"sectPr\", parseSectionProperties)\r\n    sectionProps: SectionProperties;\r\n}","export class DocxElement {\r\n    className: string = null;\r\n    cssStyle: Record<string, string> = {};\r\n\r\n    constructor(public parent?: DocxElement) {\r\n    }\r\n}\r\n\r\nexport class DocxContainer extends DocxElement {\r\n    children: DocxElement[] = [];\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { DocxContainer } from \"./dom\";\r\n\r\nexport class WmlDrawing extends DocxContainer {\r\n\r\n}\r\n\r\nexport class ImageElement extends DocxContainer {\r\n    src: string;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { convertBoolean, convertLength } from \"./common\";\r\nimport { DocxContainer, DocxElement } from \"./dom\";\r\n\r\n@element('fldChar')\r\nexport class WmlFieldChar extends DocxElement {\r\n    @fromAttribute('fldCharType')\r\n    type: 'begin' | 'end' | 'separate'; \r\n}\r\n\r\n@element('fldSimple')\r\nexport class WmlFieldSimple extends DocxContainer {\r\n    @fromAttribute(\"dirty\", convertBoolean)\r\n    dirty: boolean;\r\n\r\n    @fromAttribute(\"fldLock\", convertBoolean)\r\n    lock: boolean;\r\n\r\n    @fromAttribute(\"instr\")\r\n    instruction: string;\r\n}","import globalXmlParser from \"../parser/xml-parser\";\r\nimport { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element('hyperlink')\r\nexport class WmlHyperlink extends DocxContainer {\r\n    @fromAttribute('anchor')\r\n    anchor?: string;\r\n\r\n    protected parse(elem: Element) {\r\n        this.anchor = globalXmlParser.attr(elem, \"anchor\");\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { Length, ns } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { WmlBookmarkEnd, WmlBookmarkStart } from \"./bookmarks\";\r\nimport { WmlFieldSimple } from \"./fields\";\r\n\r\n@element(\"p\")\r\n@children(WmlBookmarkStart, WmlBookmarkEnd, WmlFieldSimple)\r\nexport class WmlParagraph extends DocxContainer {\r\n    props: ParagraphProperties = {} as ParagraphProperties;\r\n}\r\n\r\nexport interface ParagraphProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleId: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleId = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { Border, parseBorder } from \"./border\";\r\nimport { WmlBreak, WmlLastRenderedPageBreak } from \"./breaks\";\r\nimport { Length, LengthUsage, Underline } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\nimport { WmlFieldChar } from \"./fields\";\r\nimport { WmlInstructionText, WmlSymbol, WmlTab, WmlText } from \"./text\";\r\n\r\n@element('r')\r\n@children(WmlText, WmlSymbol, WmlTab, WmlBreak, WmlInstructionText, WmlFieldChar, WmlLastRenderedPageBreak)\r\nexport class WmlRun extends DocxContainer {\r\n    id?: string;\r\n    styleName: string;\r\n    props: RunProperties = <RunProperties>{};\r\n}\r\n\r\nexport interface RunProperties {\r\n    styleName: string;\r\n    fontSize: Length;\r\n    color: string;\r\n    bold: boolean;\r\n    italics: boolean;\r\n    caps: boolean;\r\n    smallCaps: boolean;\r\n    strike: boolean;\r\n    doubleStrike: boolean;\r\n    outline: boolean;\r\n    imprint: boolean;\r\n    underline: Underline;\r\n    border: Border;\r\n    fonts: RunFonts;\r\n    shading: Shading;\r\n    highlight: string;\r\n    spacing: Length;\r\n    stretch: number;\r\n    verticalAlignment: 'baseline' | 'superscript' | 'subscript' | string;\r\n}\r\n\r\nexport interface Shading {\r\n    foreground: string,\r\n    background: string,\r\n    type: string\r\n}\r\n\r\nexport interface RunFonts {\r\n    ascii: string;\r\n    hAscii: string;\r\n    cs: string;\r\n    eastAsia: string;\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    switch (elem.localName) {\r\n        case 'rStyle': \r\n            props.styleName = xml.attr(elem, 'val');\r\n            break;\r\n\r\n        case 'bdr': \r\n            props.border = parseBorder(elem, xml);\r\n            break;\r\n\r\n        case 'rFonts': \r\n            props.fonts = parseRunFonts(elem, xml);\r\n            break;\r\n\r\n        case 'shd': \r\n            props.shading = parseShading(elem, xml);\r\n            break;\r\n\r\n        case 'highlight': \r\n            props.highlight = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'spacing':\r\n            props.spacing = xml.lengthAttr(elem, 'val');\r\n            break;\r\n\r\n        case 'w':\r\n            props.stretch = xml.percentageAttr(elem, 'val');\r\n            break;\r\n\r\n            case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        case \"b\":\r\n            props.bold = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"strike\":\r\n            props.strike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"dstrike\":\r\n            props.doubleStrike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"i\":\r\n            props.italics = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"u\":\r\n            props.underline = {\r\n                color: xml.attr(elem, \"color\"),\r\n                type: xml.attr(elem, 'val')\r\n            };\r\n            break;\r\n            \r\n        case 'caps':\r\n            props.caps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'smallCaps':\r\n            props.smallCaps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'imprint':\r\n            props.imprint = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'outline':\r\n            props.outline = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'vertAlign':\r\n            props.verticalAlignment = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'emboss':\r\n        case 'shadow':\r\n        case 'vanish':\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseRunFonts(elem: Element, xml: XmlParser): RunFonts {\r\n    return {\r\n        ascii: xml.attr(elem, 'ascii'),\r\n        hAscii: xml.attr(elem, 'hAscii'),\r\n        cs: xml.attr(elem, 'cs'),\r\n        eastAsia: xml.attr(elem, 'eastAsia'),\r\n    };\r\n}\r\n\r\nexport function parseShading(elem: Element, xml: XmlParser): Shading {\r\n    return {\r\n        type: xml.attr(elem, 'val'),\r\n        foreground: xml.attr(elem, 'color'),\r\n        background: xml.attr(elem, 'fill')\r\n    };\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tc\")\r\nexport class WmlTableCell extends DocxContainer {\r\n    span?: number;\r\n    verticalMerge: string;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tr\")\r\nexport class WmlTableRow extends DocxContainer {\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { element, fromElement } from \"../parser/xml-serialize\";\r\nimport { Length } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tbl\")\r\nexport class WmlTable extends DocxContainer {\r\n    @fromElement(\"tblGrid\", parseTableColumns)\r\n    columns?: TableColumn[];\r\n\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface TableColumn {\r\n    width?: Length;\r\n}\r\n\r\nexport function parseTableColumns(elem: Element, xml: XmlParser = globalXmlParser): TableColumn[] {\r\n    return xml.elements(elem, 'gridCol').map(e => (<TableColumn>{\r\n        width: xml.lengthAttr(e, \"w\")\r\n    }));\r\n}","import { element, fromAttribute, fromText } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('t')\r\nexport class WmlText extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}\r\n\r\n@element('sym')\r\nexport class WmlSymbol extends DocxElement {\r\n    @fromAttribute('font')\r\n    font: string;\r\n    @fromAttribute('char')\r\n    char: string;\r\n}\r\n\r\n@element('tab')\r\nexport class WmlTab extends DocxElement {\r\n}\r\n\r\n@element(\"instrText\")\r\nexport class WmlInstructionText extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport { default as config } from './config';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    keepOrigin: boolean;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options: Options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        ignoreLastRenderedPageBreak: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        keepOrigin: false,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug;\r\n    parser.keepOrigin = options.keepOrigin;\r\n\r\n    renderer.className = options.className;\r\n    renderer.inWrapper = options.inWrapper;\r\n    renderer.keepOrigin = options.keepOrigin;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFooter } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: WmlFooter;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DocxContainer } from \"../document/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"ftr\")\r\nexport class WmlFooter extends DocxContainer {\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlHeader } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: WmlHeader;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DocxContainer } from \"../document/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"hdr\")\r\nexport class WmlHeader extends DocxContainer {\r\n\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomNumbering, DocxContainer, DocxElement } from './document/dom';\r\nimport { Length, Underline } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { WmlParagraph, ParagraphProperties } from './document/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './document/section';\r\nimport { WmlRun, RunFonts, RunProperties, Shading } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\nimport { Border } from './document/border';\r\nimport { TableColumn, WmlTable } from './document/table';\r\nimport { WmlTableRow } from './document/table-row';\r\nimport { WmlTableCell } from './document/table-cell';\r\nimport { WmlHyperlink } from './document/hyperlink';\r\nimport { WmlDrawing, ImageElement } from './document/drawing';\r\nimport { WmlBreak, WmlLastRenderedPageBreak } from './document/breaks';\r\nimport { WmlSymbol, WmlTab, WmlText } from './document/text';\r\nimport { LineSpacing } from './document/line-spacing';\r\nimport { WmlStyle } from './styles/style';\r\nimport { WmlHeader } from './header/header';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlBody } from './document/document';\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    domStyleMap: Record<string, IDomStyle>;\r\n    styleMap: Record<string, WmlStyle>;\r\n    keepOrigin: boolean = false;\r\n    renderHeaders: boolean = true;\r\n    renderFooters: boolean = true;\r\n\r\n    constructor(private htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.domStyleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.domStyleMap = this.processDomStyles(document.stylesPart.domStyles);\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.documentElement.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: WmlStyle[]) {\r\n        const styleMap = keyBy(styles, s => s.id);\r\n\r\n        for(let style of styles.filter(s => s.basedOn)) {\r\n            const baseStyle = styleMap[style.basedOn];\r\n        \r\n            if(baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n            } else if (this.options.debug) {\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n            }\r\n        }\r\n\r\n        return styleMap;\r\n    }\r\n\r\n    processDomStyles(styles: IDomStyle[]) {\r\n        var domStylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            domStylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = domStylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return domStylesMap;\r\n    }\r\n\r\n    processElement(element: DocxElement) {\r\n        if (\"children\" in element) {\r\n            for (var e of (element as DocxContainer).children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e instanceof WmlTable) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: WmlTable) {\r\n        for (var r of table.children) {\r\n            for (var c of (r as DocxContainer).children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private createElement(tagName) {\r\n        return this.htmlDocument.createElement(tagName);\r\n    }\r\n\r\n    private renderContainer(elem: DocxContainer, tagName: string): HTMLElement {\r\n        const result = this.createElement(tagName);\r\n        this.renderElements(elem.children, elem, result);\r\n        return result;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: WmlBody): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            const sectionProps = section.sectProps || document.sectionProps;\r\n            var sectionElement = this.createSection(this.className, sectionProps);\r\n\r\n            // if(this.renderHeaders && sectionProps.headerRefs) {\r\n            //     for(const headerRef of sectionProps.headerRefs) {\r\n            //     }\r\n            // }\r\n\r\n            this.renderElements(section.elements, document, sectionElement);\r\n\r\n            // if(this.renderFooters && sectionProps.footerRefs) {\r\n            //     for(const headerRef of sectionProps.footerRefs) {\r\n            //         const partPath = this.document.getPathById(this.document.documentPart, headerRef.id);\r\n            //         const part = this.document.partsMap[partPath] as FooterPart;\r\n\r\n            //         this.processElement(part.footerElement);\r\n            //         sectionElement.appendChild(this.renderElement(part.footerElement, null))\r\n            //     }\r\n            // }\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isPageBreakElement(elem: DocxElement): boolean {\r\n        if (elem instanceof WmlLastRenderedPageBreak)\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return elem instanceof WmlBreak && elem.type === \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: DocxElement[]): { sectProps: SectionProperties, elements: DocxElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if (elem instanceof WmlParagraph) {\r\n                const styleName = elem.props.styleId;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem instanceof WmlParagraph)\r\n            {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children.length > 0) {\r\n                    pBreakIndex = p.children.findIndex((r: DocxContainer) => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex] as WmlRun;\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = Object.assign(new WmlParagraph(), elem, { children: children.slice(pBreakIndex) });\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  Object.assign(new WmlRun(), breakRun, { children: runChildren.slice(0, rBreakIndex) });\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderColor(c: string, autoColor: string = 'black'): string {\r\n        if (/[a-f0-9]{6}/i.test(c))\r\n            return `#${c}`;\r\n\r\n        return c === 'auto' ? autoColor : c;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && (num.format == \"decimal\" || num.format == \"lowerLetter\")) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.domStyleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                if (style.paragraphProps && subStyle.target == \"p\") {\r\n                    this.renderParagraphProperties(subStyle.values, style.paragraphProps);\r\n                }\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: DocxElement, parent: DocxElement): Node {\r\n        if (elem instanceof WmlParagraph) {\r\n            return this.renderParagraph(elem);\r\n        } else if (elem instanceof WmlBookmarkStart) {\r\n            return this.renderBookmarkStart(elem);\r\n        } else if (elem instanceof WmlRun) {\r\n            return this.renderRun(elem);\r\n        } else if (elem instanceof WmlText) {\r\n            return this.renderText(elem);\r\n        } else if (elem instanceof WmlSymbol) {\r\n            return this.renderSymbol(elem);\r\n        } else if (elem instanceof WmlTab) {\r\n            return this.renderTab(elem);\r\n        } else if (elem instanceof WmlTable) {\r\n            return this.renderTable(elem);\r\n        } else if (elem instanceof WmlTableRow) {\r\n            return this.renderTableRow(elem);\r\n        } else if (elem instanceof WmlTableCell) {\r\n            return this.renderTableCell(elem);\r\n        } else if (elem instanceof WmlHyperlink) {\r\n            return this.renderHyperlink(elem);\r\n        } else if (elem instanceof WmlDrawing) {\r\n            return this.renderDrawing(elem);\r\n        } else if (elem instanceof ImageElement) {\r\n            return this.renderImage(elem);\r\n        } else if (elem instanceof WmlHeader) {\r\n            return this.renderHeader(elem);\r\n        } else if (elem instanceof WmlFooter) {\r\n            return this.renderFooter(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: DocxContainer, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: DocxElement[], parent: DocxElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => {\r\n            let n = this.renderElement(e, parent);\r\n\r\n            if(n && this.keepOrigin)\r\n                (n as any).$$docxElement = e;\r\n\r\n            return n;\r\n        }).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.renderContainer(elem, \"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        const style = elem.props.styleId && this.styleMap?.[elem.props.styleId]; \r\n        const numbering = elem.props.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level ?? 0);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.props.styleId) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.props.styleId));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraphProperties(style: any, props: ParagraphProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch(p as keyof(ParagraphProperties)) {\r\n                case \"lineSpacing\":\r\n                    this.renderLineSpacing(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderLineSpacing(style: any, spacing: LineSpacing) {   \r\n        //TODO\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch (p as keyof(RunProperties)) {\r\n                case 'highlight':\r\n                    style['background'] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'shading':\r\n                    style['background'] = this.renderShading(v);\r\n                    break;\r\n\r\n                case 'border':\r\n                    style['border'] = this.renderBorder(v);\r\n                    break;\r\n\r\n                case 'color':\r\n                    style[\"color\"] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'fontSize':\r\n                    style[\"font-size\"] = this.renderLength(v);\r\n                    break;\r\n\r\n                case 'bold':\r\n                    style[\"font-weight\"] = v ? 'bold' : 'normal';\r\n                    break;\r\n\r\n                case 'italics':\r\n                    style[\"font-style\"] = v ? 'italic' : 'normal';\r\n                    break;\r\n\r\n                case 'smallCaps':\r\n                    style[\"font-size\"] = v ? 'smaller' : 'none';\r\n                case 'caps':\r\n                    style[\"text-transform\"] = v ? 'uppercase' : 'none';\r\n                    break;\r\n                    \r\n                case 'strike':\r\n                    style[\"text-decoration\"] = v ? 'line-through' : 'none';\r\n                    break;\r\n\r\n                case 'fonts':\r\n                    style[\"font-family\"] = this.renderRunFonts(v);\r\n                    break;\r\n    \r\n                case 'underline':\r\n                    this.renderUnderline(style, v);\r\n                    break;\r\n                \r\n                case 'verticalAlignment':\r\n                    this.renderRunVerticalAlignment(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderRunVerticalAlignment(style: any, align: string) {\r\n        switch(align) {\r\n            case 'subscript': \r\n                style['vertical-align'] = 'sub';\r\n                style['font-size'] = 'small';\r\n                break;\r\n\r\n            case 'superscript': \r\n                style['vertical-align'] = 'super';\r\n                style['font-size'] = 'small';\r\n                break;\r\n        }\r\n    }\r\n\r\n    renderRunFonts(fonts: RunFonts) {\r\n        return [fonts.ascii, fonts.hAscii, fonts.cs, fonts.eastAsia].filter(x => x).map(x => `'${x}'`).join(',');\r\n    }\r\n\r\n    renderBorder(border: Border) {\r\n        if (border.type == 'nil')\r\n            return 'none';\r\n\r\n        return `${this.renderLength(border.size)} solid ${this.renderColor(border.color)}`;\r\n    }\r\n    \r\n    renderShading(shading: Shading) {\r\n        if (shading.type == 'clear')\r\n            return this.renderColor(shading.background, autos.shd);\r\n        \r\n        return this.renderColor(shading.background, autos.shd);\r\n    }\r\n    \r\n    renderUnderline(style: any, underline: Underline) {\r\n        if (underline.type == null || underline.type == \"none\")\r\n            return;\r\n\r\n        switch (underline.type) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        if (underline.color)\r\n            style[\"text-decoration-color\"] = this.renderColor(underline.color);\r\n    }\r\n\r\n    renderHyperlink(elem: WmlHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.anchor)\r\n            result.href = elem.anchor;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: WmlDrawing) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: ImageElement) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeader(elem: WmlHeader) {\r\n        return this.renderContainer(elem, \"header\");\r\n    }\r\n\r\n    renderFooter(elem: WmlHeader) {\r\n        return this.renderContainer(elem, \"footer\");\r\n    }\r\n\r\n    renderText(elem: WmlText) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: WmlSymbol) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: WmlTab) {\r\n        var tabSpan = this.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<WmlParagraph>(elem, WmlParagraph);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n        var result = this.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        //this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderRunProperties(result.style, elem.props);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: WmlTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: TableColumn[]) {\r\n        const result = this.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n            colElem.style.width = this.renderLength(col.width);\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: WmlTableRow) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: WmlTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key of Object.getOwnPropertyNames(style)) {\r\n            ouput.style[key] = style[key];\r\n        }\r\n    }\r\n\r\n    renderClass(input: DocxElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText) \r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string, numformat: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends DocxElement>(elem: DocxElement, type: any): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && !(parent instanceof type))\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length, LengthUsage, LengthUsageType, convertLength, convertPercentage, convertBoolean  } from \"../document/common\";\r\nimport config from '../config';\r\n\r\nexport function parseXmlString(xmlString: string): Document {\r\n    if (config.trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n    return new DOMParser().parseFromString(xmlString, \"application/xml\");\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport function elements(elem: Element, localName: string = null): Element[] {\r\n    const result = [];\r\n\r\n    for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n        let c = elem.childNodes.item(i);\r\n\r\n        if (c.nodeType == Node.ELEMENT_NODE && (localName == null || (c as Element).localName == localName))\r\n            result.push(c);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function attr(elem: Element, localName: string): string {\r\n    for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n        let a = elem.attributes.item(i);\r\n\r\n        if (a.localName == localName)\r\n            return a.value;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport class XmlParser {\r\n    elements = elements;\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr = attr;\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    percentageAttr(node: Element, attrName: string): number {\r\n        return convertPercentage(this.attr(node, attrName));\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","const schemaSymbol = Symbol(\"open-xml-schema\");\r\n\r\nexport type ValueConverter = (val: string) => any;\r\n\r\nexport type ElementConverter = (val: Element) => any;\r\n\r\nexport function element(name: string) {\r\n    return function(target: any) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.elemName = name;\r\n    }\r\n}\r\n\r\nexport function children(...elements: any[]) {\r\n    return function(target) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.children = {};\r\n        for(let c of elements) {\r\n            let cs = getPrototypeXmlSchema(c.prototype);\r\n            schema.children[cs.elemName] = { proto: c.prototype, schema: cs };\r\n        }\r\n    }\r\n}\r\n\r\nexport function fromText(convert: ValueConverter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.text = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromAttribute(attrName: string, convert: ValueConverter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.attrs[attrName] = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromElement(elemName: string, convert: ElementConverter) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.elements[elemName] = { prop, convert };\r\n    }   \r\n}\r\n\r\nexport function buildXmlSchema(schemaObj: any): OpenXmlSchema {\r\n    var schema: OpenXmlSchema = {\r\n        text: null,\r\n        attrs: {},\r\n        elements: {},\r\n        elemName: null,\r\n        children: null\r\n    };\r\n\r\n    for(let p in schemaObj) {\r\n        let v = schemaObj[p];\r\n\r\n        if(p == \"$elem\") {\r\n            schema.elemName = v;\r\n        }\r\n        else if(v.$attr) {\r\n            schema.attrs[v.$attr] = { prop: p, convert: null };\r\n        }\r\n    }\r\n\r\n    return schema;\r\n}\r\n\r\nexport function deserializeElement<T = any>(n: Element, output: T, ops: DeserializeOptions): T {\r\n    var proto = Object.getPrototypeOf(output);\r\n    var schema = proto[schemaSymbol];\r\n\r\n    if (ops?.keepOrigin) {\r\n        (output as any).$$xmlElement = n;\r\n    }  \r\n\r\n    if (schema == null)\r\n        return output;\r\n\r\n    deserializeSchema(n, output, schema);\r\n\r\n    for (let i = 0, l = n.children.length; i < l; i ++) {\r\n        let elem = n.children.item(i);\r\n        let child = schema.children[elem.localName];\r\n\r\n        if (child) {\r\n            let obj = Object.create(child.proto);\r\n            deserializeElement(elem, obj, ops);\r\n            (output as any).children.push(obj);\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function deserializeSchema(n: Element, output: any, schema: OpenXmlSchema) {\r\n    if (schema.text) {\r\n        let prop = schema.text;\r\n        output[prop.prop] = prop.convert ? prop.convert(n.textContent) : n.textContent; \r\n    }\r\n\r\n    for (let i = 0, l = n.attributes.length; i < l; i++) {\r\n        const attr = n.attributes.item(i);\r\n        const prop = schema.attrs[attr.localName];\r\n\r\n        if(prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert ? prop.convert(attr.value) : attr.value; \r\n    }\r\n\r\n    for (let i = 0, l = n.childNodes.length; i < l; i ++) {\r\n        const elem = n.childNodes.item(i) as Element;\r\n        const prop = elem.nodeType === Node.ELEMENT_NODE ? schema.elements[elem.localName] : null;\r\n\r\n        if (prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert(elem); \r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport interface DeserializeOptions {\r\n    keepOrigin: boolean\r\n}\r\n\r\nexport interface OpenXmlSchema {\r\n    elemName: string;\r\n    text: OpenXmlSchemaProperty;\r\n    attrs: Record<string, OpenXmlSchemaProperty>;\r\n    elements: Record<string, any>;\r\n    children: Record<string, any>;\r\n}\r\n\r\nexport interface OpenXmlSchemaProperty {\r\n    prop: string;\r\n    convert: ValueConverter;\r\n}\r\n\r\nfunction getPrototypeXmlSchema(proto: any): OpenXmlSchema {\r\n    return proto[schemaSymbol] || (proto[schemaSymbol] = {\r\n        text: null,\r\n        attrs: {},\r\n        children: {},\r\n        elements: {}\r\n    });\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseRunProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { convertBoolean } from \"../document/common\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { deserializeElement, element, fromAttribute } from \"../parser/xml-serialize\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\n@element(\"style\")\r\nexport class WmlStyle {\r\n    @fromAttribute(\"styleId\")\r\n    id: string;\r\n    @fromAttribute(\"type\")\r\n    type: StyleType;\r\n    @fromAttribute(\"customStyle\", convertBoolean)\r\n    customStyle: boolean\r\n    @fromAttribute(\"default\", convertBoolean)\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): WmlStyle {\r\n    let result = deserializeElement(elem, new WmlStyle(), null);\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { keyBy } from \"../utils\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, WmlStyle, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: WmlStyle[];\r\n    \r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseStylesPart(root, this._package.xmlParser));\r\n        this.domStyles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: WmlStyle[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { DocxElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: DocxElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n    \r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        return rel ? splitPath(part.path)[0] + rel.target : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"sourceRoot":""}