{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/config.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/dom/body.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/border.ts","webpack://docx/./src/dom/break.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/document.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/drawing.ts","webpack://docx/./src/dom/fieldChar.ts","webpack://docx/./src/dom/hyperlink.ts","webpack://docx/./src/dom/image.ts","webpack://docx/./src/dom/instructions.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/dom/symbol.ts","webpack://docx/./src/dom/tab.ts","webpack://docx/./src/dom/table-cell.ts","webpack://docx/./src/dom/table-row.ts","webpack://docx/./src/dom/table.ts","webpack://docx/./src/dom/text.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/parser/xml-serialize.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/./src/docx-preview.ts"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__792__","OpenXmlPackage","_zip","xmlParser","XmlParser","path","this","files","content","file","input","JSZip","loadAsync","then","zip","type","generateAsync","async","Promise","resolve","relsPath","f","fn","splitPath","load","text","parseRelationships","parseXmlString","firstElementChild","_package","all","loadRelationships","rels","_xmlDocument","parseXml","update","serializeXmlString","RelationshipTypes","elements","map","e","id","attr","target","targetMode","trimXmlDeclaration","SizeType","autos","shd","color","highlight","skipDeclaration","ignoreWidth","debug","keepOrigin","elem","output","deserializeElement","xmlDoc","result","DocumentElement","body","BodyElement","xbody","element","xml","foreach","localName","children","push","parseParagraph","parseTable","sectionProps","parseSectionProperties","FooterElement","HeaderElement","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","s","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","deserialize","ParagraphElement","parseRun","parseHyperlink","paragraph","cssStyle","parseParagraphProperty","props","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","HyperlinkElement","RunElement","breakElem","BreakElement","d","parseDrawing","run","Object","assign","parseDrawingWrapper","DrawingElement","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","textContent","sizeValue","g","parseGraphic","graphicData","parsePicture","ImageElement","blipFill","blip","spPr","xfrm","TableElement","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","TableRowElement","parseTableCell","parseTableRowProperties","row","TableCellElement","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","DocxContainer","BookmarkStartElement","DocxElement","fromAttribute","BookmarkEndElement","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","ns","wordml","mul","unit","LineHeight","usage","value","DocumentPart","Part","pkg","parser","super","_documentParser","documentElement","parseDocumentFile","FieldCharElement","anchor","InstructionTextElement","fromText","namespaceURI","tabs","parseTabs","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleId","position","leader","el","parseRunProperty","styleName","border","fonts","parseRunFonts","shading","parseShading","spacing","stretch","percentageAttr","fontSize","bold","strike","doubleStrike","italics","underline","caps","smallCaps","imprint","outline","verticalAlignment","hAscii","cs","eastAsia","foreground","background","TextElement","SymbolElement","TabElement","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","SectionType","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","FontTablePart","parseFonts","family","altName","fontKey","refId","FooterPart","footerElement","parseFooter","HeaderPart","headerElement","parseHeader","appentElements","container","appendChild","removeAllElements","firstChild","removeChild","createStyleElement","cssText","styleElement","document","createElement","innerHTML","appendComment","comment","createComment","htmlDocument","inWrapper","renderHeaders","renderFooters","bodyContainer","styleContainer","options","domStyleMap","renderDefaultStyle","stylesPart","processDomStyles","domStyles","styleMap","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","ignoreFonts","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","fontsPart","loadFont","fontData","cssTest","keyBy","baseStyle","mergeDeep","domStylesMap","styleValues","baseValues","copyStyleProperties","cssName","processClassName","escapeClassName","processTable","processElement","r","attrs","key","getOwnPropertyNames","hasOwnProperty","tagName","renderElements","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","ignoreHeight","minHeight","columnCount","columnGap","columnRule","splitBySection","sectProps","sectionElement","createSection","headerRef","partPath","getPathById","part","partsMap","renderElement","current","p","pBreakIndex","rBreakIndex","breakPages","findIndex","t","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","test","styleText","rootCounters","num","numberingClass","listStyleType","valiable","toLowerCase","styleToString","loadNumberingImage","data","numFormatToCssValue","counter","numberingCounter","levelTextToContent","join","stylesMap","subStyles","linkedStyle","concat","subStyle","renderParagraphProperties","renderParagraph","renderBookmarkStart","renderRun","renderText","renderSymbol","renderTab","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderHeader","renderFooter","into","elems","$$docxElement","renderClass","renderChildren","renderStyleValues","appendClass","styleClassName","renderLineSpacing","renderColor","renderShading","renderBorder","renderRunFonts","renderUnderline","renderRunVerticalAlignment","href","display","textIndent","loadDocumentImage","renderContainer","createTextNode","fontFamily","font","char","tabSpan","experimental","setTimeout","findParent","sort","updateTabStop","renderRunProperties","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","numformat","substring","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","borderBottom","NumberingPart","parseNumberingPart","parseNumberingFile","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","XMLSerializer","serializeToString","item","attributes","defaultValue","parseFloat","convertPercentage","convertLength","globalXmlParser","schemaSymbol","Symbol","deserializeSchema","schema","prop","convert","getPrototypeXmlSchema","proto","prototype","elemName","schemaObj","$attr","ops","getPrototypeOf","$$xmlElement","child","obj","create","pPrElem","rPrElem","customStyle","default","link","autoRedefine","hidden","semiHidden","locked","uiPriority","StylesPart","parseStylesPart","parseStylesFile","defaults","parseDocumentDefaults","classList","isObject","Array","isArray","si","lastIndexOf","array","by","reduce","sources","source","shift","WordDocument","parts","blob","_parser","OfficeDocument","loadRelationshipPart","save","exists","FontTable","Numbering","Styles","Footer","Header","folder","rel","loadResource","URL","createObjectURL","Blob","deobfuscate","outputType","guidKey","trimmed","numbers","substr","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call","userOptions","DocumentParser","renderer","HtmlRenderer","window","doc","render"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__792__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType): Promise<any> {\r\n        return this._zip.files[path]?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"string\").then(text => {\r\n            if (!text)\r\n                return;\r\n\r\n            return parseRelationships(parseXmlString(text).firstElementChild, this.xmlParser);\r\n        })\r\n    }\r\n}","import { parseXmlString, serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path, 'string').then(text => {\r\n                this._xmlDocument = parseXmlString(text);\r\n                this.parseXml(this._xmlDocument.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","export default {\r\n    trimXmlDeclaration: false\r\n}","import { DocxElement, IDomNumbering, NumberingPicBullet } from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, RunElement } from './dom/run';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\nimport { BodyElement } from './dom/body';\r\nimport { BreakElement } from './dom/break';\r\nimport { HyperlinkElement } from './dom/hyperlink';\r\nimport { TableCellElement } from './dom/table-cell';\r\nimport { TableColumn, TableElement } from './dom/table';\r\nimport { DrawingElement } from './dom/drawing';\r\nimport { TableRowElement } from './dom/table-row';\r\nimport { ImageElement } from './dom/image';\r\nimport { deserializeElement } from './parser/xml-serialize';\r\nimport { FooterElement } from './footer/footer';\r\nimport { HeaderElement } from './header/header';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n    keepOrigin: boolean = false;\r\n\r\n    private deserialize<T>(elem: Element, output: T): T {\r\n        return deserializeElement(elem, output, { keepOrigin: this.keepOrigin });\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        const result = new DocumentElement();\r\n\r\n        result.body = new BodyElement();\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.body.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.body.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.body.sectionProps = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): FooterElement {\r\n        const result = new FooterElement();\r\n    \r\n        xml.foreach(xmlDoc, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): HeaderElement {\r\n        const result = new HeaderElement();\r\n    \r\n        xml.foreach(xmlDoc, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): ParagraphElement {\r\n        const result = this.deserialize(node, new ParagraphElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph.props, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: DocxElement): HyperlinkElement {\r\n        var result = this.deserialize(node, new HyperlinkElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: DocxElement): RunElement {\r\n        var result = this.deserialize(node, new RunElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"lastRenderedPageBreak\": {\r\n                    const breakElem = new BreakElement();\r\n                    breakElem.type = 'page';\r\n                    result.children.push(breakElem);\r\n                }\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n\r\n        Object.assign(run.props, parseRunProperties(elem, globalXmlParser));\r\n\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): DocxElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): DocxElement {\r\n        var result = new DrawingElement();\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): DocxElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): ImageElement {\r\n        var result = new ImageElement();\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): TableElement {\r\n        var result = this.deserialize(node, new TableElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): TableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: TableElement) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: TableElement) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): TableRowElement {\r\n        var result = this.deserialize(node, new TableRowElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: TableRowElement) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): TableCellElement {\r\n        var result = this.deserialize(node, new TableCellElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: TableCellElement) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { SectionProperties } from \"./section\";\r\n\r\nexport class BodyElement extends DocxContainer {\r\n    sectionProps: SectionProperties;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"bookmarkStart\")\r\nexport class BookmarkStartElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n    @fromAttribute(\"name\")\r\n    name: string;\r\n    @fromAttribute(\"colFirst\")\r\n    colFirst: number;\r\n    @fromAttribute(\"colLast\")\r\n    colLast: number;\r\n}\r\n\r\n@element(\"bookmarkEnd\")\r\nexport class BookmarkEndElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('br')\r\nexport class BreakElement extends DocxElement {\r\n    @fromAttribute(\"type\")\r\n    type: \"page\" | \"column\" | \"textWrapping\";\r\n    \r\n    @fromAttribute(\"clear\")\r\n    clear: \"all\" | \"left\" | \"right\" | \"none\";\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Underline {\r\n    color: string;\r\n    type: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    documentElement: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.documentElement = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","import { BodyElement } from \"./body\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\nexport class DocumentElement extends DocxElement {\r\n    body: BodyElement;\r\n}","export class DocxElement {\r\n    className: string = null;\r\n    cssStyle: Record<string, string> = {};\r\n\r\n    constructor(public parent?: DocxElement) {\r\n    }\r\n}\r\n\r\nexport class DocxContainer extends DocxElement {\r\n    children: DocxElement[] = [];\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { DocxContainer } from \"./dom\";\r\n\r\nexport class DrawingElement extends DocxContainer {\r\n\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('fldChar')\r\nexport class FieldCharElement extends DocxElement {\r\n    @fromAttribute('fldCharType')\r\n    type: 'begin' | 'end' | 'separate'; \r\n}","import globalXmlParser from \"../parser/xml-parser\";\r\nimport { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element('hyperlink')\r\nexport class HyperlinkElement extends DocxContainer {\r\n    @fromAttribute('anchor')\r\n    anchor?: string;\r\n\r\n    protected parse(elem: Element) {\r\n        this.anchor = globalXmlParser.attr(elem, \"anchor\");\r\n    }\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class ImageElement extends DocxContainer {\r\n    src: string;\r\n}","import { fromText, element } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"instrText\")\r\nexport class InstructionTextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { Length, ns } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { BookmarkEndElement, BookmarkStartElement } from \"./bookmark\";\r\n\r\n@element(\"p\")\r\n@children(BookmarkStartElement, BookmarkEndElement)\r\nexport class ParagraphElement extends DocxContainer {\r\n    props: ParagraphProperties = {} as ParagraphProperties;\r\n}\r\n\r\nexport interface ParagraphProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleId: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleId = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { Border, parseBorder } from \"./border\";\r\nimport { BreakElement } from \"./break\";\r\nimport { Length, LengthUsage, Underline } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\nimport { FieldCharElement } from \"./fieldChar\";\r\nimport { InstructionTextElement } from \"./instructions\";\r\nimport { SymbolElement } from \"./symbol\";\r\nimport { TabElement } from \"./tab\";\r\nimport { TextElement } from \"./text\";\r\n\r\n@element('r')\r\n@children(TextElement, SymbolElement, TabElement, BreakElement, InstructionTextElement, FieldCharElement)\r\nexport class RunElement extends DocxContainer {\r\n    id?: string;\r\n    styleName: string;\r\n    props: RunProperties = <RunProperties>{};\r\n}\r\n\r\nexport interface RunProperties {\r\n    styleName: string;\r\n    fontSize: Length;\r\n    color: string;\r\n    bold: boolean;\r\n    italics: boolean;\r\n    caps: boolean;\r\n    smallCaps: boolean;\r\n    strike: boolean;\r\n    doubleStrike: boolean;\r\n    outline: boolean;\r\n    imprint: boolean;\r\n    underline: Underline;\r\n    border: Border;\r\n    fonts: RunFonts;\r\n    shading: Shading;\r\n    highlight: string;\r\n    spacing: Length;\r\n    stretch: number;\r\n    verticalAlignment: 'baseline' | 'superscript' | 'subscript' | string;\r\n}\r\n\r\nexport interface Shading {\r\n    foreground: string,\r\n    background: string,\r\n    type: string\r\n}\r\n\r\nexport interface RunFonts {\r\n    ascii: string;\r\n    hAscii: string;\r\n    cs: string;\r\n    eastAsia: string;\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    switch (elem.localName) {\r\n        case 'rStyle': \r\n            props.styleName = xml.attr(elem, 'val');\r\n            break;\r\n\r\n        case 'bdr': \r\n            props.border = parseBorder(elem, xml);\r\n            break;\r\n\r\n        case 'rFonts': \r\n            props.fonts = parseRunFonts(elem, xml);\r\n            break;\r\n\r\n        case 'shd': \r\n            props.shading = parseShading(elem, xml);\r\n            break;\r\n\r\n        case 'highlight': \r\n            props.highlight = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'spacing':\r\n            props.spacing = xml.lengthAttr(elem, 'val');\r\n            break;\r\n\r\n        case 'w':\r\n            props.stretch = xml.percentageAttr(elem, 'val');\r\n            break;\r\n\r\n            case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        case \"b\":\r\n            props.bold = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"strike\":\r\n            props.strike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"dstrike\":\r\n            props.doubleStrike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"i\":\r\n            props.italics = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"u\":\r\n            props.underline = {\r\n                color: xml.attr(elem, \"color\"),\r\n                type: xml.attr(elem, 'val')\r\n            };\r\n            break;\r\n            \r\n        case 'caps':\r\n            props.caps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'smallCaps':\r\n            props.smallCaps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'imprint':\r\n            props.imprint = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'outline':\r\n            props.outline = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'vertAlign':\r\n            props.verticalAlignment = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'emboss':\r\n        case 'shadow':\r\n        case 'vanish':\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseRunFonts(elem: Element, xml: XmlParser): RunFonts {\r\n    return {\r\n        ascii: xml.attr(elem, 'ascii'),\r\n        hAscii: xml.attr(elem, 'hAscii'),\r\n        cs: xml.attr(elem, 'cs'),\r\n        eastAsia: xml.attr(elem, 'eastAsia'),\r\n    };\r\n}\r\n\r\nexport function parseShading(elem: Element, xml: XmlParser): Shading {\r\n    return {\r\n        type: xml.attr(elem, 'val'),\r\n        foreground: xml.attr(elem, 'color'),\r\n        background: xml.attr(elem, 'fill')\r\n    };\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('sym')\r\nexport class SymbolElement extends DocxElement {\r\n    @fromAttribute('font')\r\n    font: string;\r\n    @fromAttribute('char')\r\n    char: string;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('tab')\r\nexport class TabElement extends DocxElement {\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tc\")\r\nexport class TableCellElement extends DocxContainer {\r\n    span?: number;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tr\")\r\nexport class TableRowElement extends DocxContainer {\r\n\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tbl\")\r\nexport class TableElement extends DocxContainer {\r\n    columns?: TableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface TableColumn {\r\n    width?: string;\r\n}","import { element, fromText } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('t')\r\nexport class TextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { FooterElement } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: FooterElement;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DocxContainer } from \"../dom/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"ftr\")\r\nexport class FooterElement extends DocxContainer {\r\n\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { HeaderElement } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: HeaderElement;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DocxContainer } from \"../dom/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"hdr\")\r\nexport class HeaderElement extends DocxContainer {\r\n\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomNumbering, DocxContainer, DocxElement } from './dom/dom';\r\nimport { Length, Underline } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { ParagraphElement, ParagraphProperties } from './dom/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunFonts, RunProperties, Shading } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\nimport { Border } from './dom/border';\r\nimport { BodyElement } from './dom/body';\r\nimport { TableColumn, TableElement } from './dom/table';\r\nimport { TableRowElement } from './dom/table-row';\r\nimport { TableCellElement } from './dom/table-cell';\r\nimport { HyperlinkElement } from './dom/hyperlink';\r\nimport { DrawingElement } from './dom/drawing';\r\nimport { ImageElement } from './dom/image';\r\nimport { BreakElement } from './dom/break';\r\nimport { TabElement } from './dom/tab';\r\nimport { SymbolElement } from './dom/symbol';\r\nimport { TextElement } from './dom/text';\r\nimport { LineSpacing } from './dom/line-spacing';\r\nimport { Style } from './styles/style';\r\nimport { HeaderElement } from './header/header';\r\nimport { FooterElement } from './footer/footer';\r\nimport { FooterPart } from './footer/footer-part';\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    domStyleMap: Record<string, IDomStyle>;\r\n    styleMap: Record<string, Style>;\r\n    keepOrigin: boolean = false;\r\n    renderHeaders: boolean = true;\r\n    renderFooters: boolean = true;\r\n\r\n    constructor(private htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.domStyleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.domStyleMap = this.processDomStyles(document.stylesPart.domStyles);\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.documentElement.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: Style[]) {\r\n        const styleMap = keyBy(styles, s => s.id);\r\n\r\n        for(let style of styles.filter(s => s.basedOn)) {\r\n            const baseStyle = styleMap[style.basedOn];\r\n        \r\n            if(baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n            } else if (this.options.debug) {\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n            }\r\n        }\r\n\r\n        return styleMap;\r\n    }\r\n\r\n    processDomStyles(styles: IDomStyle[]) {\r\n        var domStylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            domStylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = domStylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return domStylesMap;\r\n    }\r\n\r\n    processElement(element: DocxElement) {\r\n        if (\"children\" in element) {\r\n            for (var e of (element as DocxContainer).children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e instanceof TableElement) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: TableElement) {\r\n        for (var r of table.children) {\r\n            for (var c of (r as DocxContainer).children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private createElement(tagName) {\r\n        return this.htmlDocument.createElement(tagName);\r\n    }\r\n\r\n    private renderContainer(elem: DocxContainer, tagName: string): HTMLElement {\r\n        const result = this.htmlDocument.createElement(tagName);\r\n        this.renderElements(elem.children, elem, result);\r\n        return result;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: BodyElement): HTMLElement[] {\r\n        const result = [];\r\n        let counter = 1;\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            const sectionProps = section.sectProps || document.sectionProps;\r\n            var sectionElement = this.createSection(this.className, sectionProps);\r\n\r\n            if(this.renderHeaders && sectionProps.headerRefs) {\r\n                for(const headerRef of sectionProps.headerRefs) {\r\n                }\r\n            }\r\n\r\n            this.renderElements(section.elements, document, sectionElement);\r\n\r\n            if(this.renderFooters && sectionProps.footerRefs) {\r\n                for(const headerRef of sectionProps.footerRefs) {\r\n                    const partPath = this.document.getPathById(this.document.documentPart, headerRef.id);\r\n                    const part = this.document.partsMap[partPath] as FooterPart;\r\n\r\n                    this.processElement(part.footerElement);\r\n                    sectionElement.appendChild(this.renderElement(part.footerElement, null))\r\n                }\r\n            }\r\n\r\n            result.push(sectionElement);\r\n\r\n            counter ++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: DocxElement[]): { sectProps: SectionProperties, elements: DocxElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if (elem instanceof ParagraphElement) {\r\n                const styleName = elem.props.styleId;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem instanceof ParagraphElement)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex((r: DocxContainer) => {\r\n                        rBreakIndex = r.children?.findIndex((t: BreakElement) => t instanceof BreakElement && t.type == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex] as RunElement;\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = Object.assign(new ParagraphElement(), elem, { children: children.slice(pBreakIndex) });\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  Object.assign(new RunElement(), breakRun, { children: runChildren.slice(0, rBreakIndex) });\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderColor(c: string, autoColor: string = 'black'): string {\r\n        if (/[a-f0-9]{6}/i.test(c))\r\n            return `#${c}`;\r\n\r\n        return c === 'auto' ? autoColor : c;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && (num.format == \"decimal\" || num.format == \"lowerLetter\")) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.domStyleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                if (style.paragraphProps && subStyle.target == \"p\") {\r\n                    this.renderParagraphProperties(subStyle.values, style.paragraphProps);\r\n                }\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: DocxElement, parent: DocxElement): Node {\r\n        if (elem instanceof ParagraphElement) {\r\n            return this.renderParagraph(elem);\r\n        } else if (elem instanceof BookmarkStartElement) {\r\n            return this.renderBookmarkStart(elem);\r\n        } else if (elem instanceof RunElement) {\r\n            return this.renderRun(elem);\r\n        } else if (elem instanceof TextElement) {\r\n            return this.renderText(elem);\r\n        } else if (elem instanceof SymbolElement) {\r\n            return this.renderSymbol(elem);\r\n        } else if (elem instanceof TabElement) {\r\n            return this.renderTab(elem);\r\n        } else if (elem instanceof TableElement) {\r\n            return this.renderTable(elem);\r\n        } else if (elem instanceof TableRowElement) {\r\n            return this.renderTableRow(elem);\r\n        } else if (elem instanceof TableCellElement) {\r\n            return this.renderTableCell(elem);\r\n        } else if (elem instanceof HyperlinkElement) {\r\n            return this.renderHyperlink(elem);\r\n        } else if (elem instanceof DrawingElement) {\r\n            return this.renderDrawing(elem);\r\n        } else if (elem instanceof ImageElement) {\r\n            return this.renderImage(elem);\r\n        } else if (elem instanceof HeaderElement) {\r\n            return this.renderHeader(elem);\r\n        } else if (elem instanceof FooterElement) {\r\n            return this.renderFooter(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: DocxContainer, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: DocxElement[], parent: DocxElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => {\r\n            let n = this.renderElement(e, parent);\r\n\r\n            if(n && this.keepOrigin)\r\n                (n as any).$$docxElement = e;\r\n\r\n            return n;\r\n        }).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        const style = elem.props.styleId && this.styleMap?.[elem.props.styleId]; \r\n        const numbering = elem.props.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level ?? 0);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.props.styleId) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.props.styleId));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraphProperties(style: any, props: ParagraphProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch(p as keyof(ParagraphProperties)) {\r\n                case \"lineSpacing\":\r\n                    this.renderLineSpacing(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderLineSpacing(style: any, spacing: LineSpacing) {   \r\n        //TODO\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch (p as keyof(RunProperties)) {\r\n                case 'highlight':\r\n                    style['background'] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'shading':\r\n                    style['background'] = this.renderShading(v);\r\n                    break;\r\n\r\n                case 'border':\r\n                    style['border'] = this.renderBorder(v);\r\n                    break;\r\n\r\n                case 'color':\r\n                    style[\"color\"] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'fontSize':\r\n                    style[\"font-size\"] = this.renderLength(v);\r\n                    break;\r\n\r\n                case 'bold':\r\n                    style[\"font-weight\"] = v ? 'bold' : 'normal';\r\n                    break;\r\n\r\n                case 'italics':\r\n                    style[\"font-style\"] = v ? 'italic' : 'normal';\r\n                    break;\r\n\r\n                case 'smallCaps':\r\n                    style[\"font-size\"] = v ? 'smaller' : 'none';\r\n                case 'caps':\r\n                    style[\"text-transform\"] = v ? 'uppercase' : 'none';\r\n                    break;\r\n\r\n                case 'strike':\r\n                case 'strike':\r\n                    style[\"text-decoration\"] = v ? 'line-through' : 'none';\r\n                    break;\r\n\r\n                case 'fonts':\r\n                    style[\"font-family\"] = this.renderRunFonts(v);\r\n                    break;\r\n    \r\n                case 'underline':\r\n                    this.renderUnderline(style, v);\r\n                    break;\r\n                \r\n                case 'verticalAlignment':\r\n                    this.renderRunVerticalAlignment(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderRunVerticalAlignment(style: any, align: string) {\r\n        switch(align) {\r\n            case 'subscript': \r\n                style['vertical-align'] = 'sub';\r\n                style['font-size'] = 'small';\r\n                break;\r\n\r\n            case 'superscript': \r\n                style['vertical-align'] = 'super';\r\n                style['font-size'] = 'small';\r\n                break;\r\n        }\r\n    }\r\n\r\n    renderRunFonts(fonts: RunFonts) {\r\n        return [fonts.ascii, fonts.hAscii, fonts.cs, fonts.eastAsia].filter(x => x).map(x => `'${x}'`).join(',');\r\n    }\r\n\r\n    renderBorder(border: Border) {\r\n        if (border.type == 'nil')\r\n            return 'none';\r\n\r\n        return `${this.renderLength(border.size)} solid ${this.renderColor(border.color)}`;\r\n    }\r\n    \r\n    renderShading(shading: Shading) {\r\n        if (shading.type == 'clear')\r\n            return this.renderColor(shading.background, autos.shd);\r\n        \r\n        return this.renderColor(shading.background, autos.shd);\r\n    }\r\n    \r\n    renderUnderline(style: any, underline: Underline) {\r\n        if (underline.type == null || underline.type == \"none\")\r\n            return;\r\n\r\n        switch (underline.type) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        if (underline.color)\r\n            style[\"text-decoration-color\"] = this.renderColor(underline.color);\r\n    }\r\n\r\n    renderHyperlink(elem: HyperlinkElement) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.anchor)\r\n            result.href = elem.anchor;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: DrawingElement) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: ImageElement) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeader(elem: HeaderElement) {\r\n        return this.renderContainer(elem, \"header\");\r\n    }\r\n\r\n    renderFooter(elem: HeaderElement) {\r\n        return this.renderContainer(elem, \"footer\");\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: TabElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, ParagraphElement);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        var result = this.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        //this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderRunProperties(result.style, elem.props);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: TableElement) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: TableColumn[]) {\r\n        let result = this.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: TableRowElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: TableCellElement) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: DocxElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText) \r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string, numformat: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends DocxElement>(elem: DocxElement, type: any): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && !(parent instanceof type))\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertPercentage  } from \"../dom/common\";\r\nimport config from '../config';\r\n\r\nexport function parseXmlString(xmlString: string): Document {\r\n    if (config.trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n    return new DOMParser().parseFromString(xmlString, \"application/xml\");\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    percentageAttr(node: Element, attrName: string): number {\r\n        return convertPercentage(this.attr(node, attrName));\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","const schemaSymbol = Symbol(\"open-xml-schema\");\r\n\r\nexport type Converter = (val: string) => any;\r\n\r\nexport function element(name: string) {\r\n    return function(target: any) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.elemName = name;\r\n    }\r\n}\r\n\r\nexport function children(...elements: any[]) {\r\n    return function(target) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.children = {};\r\n        for(let c of elements) {\r\n            let cs = getPrototypeXmlSchema(c.prototype);\r\n            schema.children[cs.elemName] = { proto: c.prototype, schema: cs };\r\n        }\r\n    }\r\n}\r\n\r\nexport function fromText(convert: Converter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.text = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromAttribute(attrName: string, convert: Converter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.attrs[attrName] = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function buildXmlSchema(schemaObj: any): OpenXmlSchema {\r\n    var schema: OpenXmlSchema = {\r\n        text: null,\r\n        attrs: {},\r\n        elemName: null,\r\n        children: null\r\n    };\r\n\r\n    for(let p in schemaObj) {\r\n        let v = schemaObj[p];\r\n\r\n        if(p == \"$elem\") {\r\n            schema.elemName = v;\r\n        }\r\n        else if(v.$attr) {\r\n            schema.attrs[v.$attr] = { prop: p, convert: null };\r\n        }\r\n    }\r\n\r\n    return schema;\r\n}\r\n\r\nexport function deserializeElement<T = any>(n: Element, output: T, ops: DeserializeOptions): T {\r\n    var proto = Object.getPrototypeOf(output);\r\n    var schema = proto[schemaSymbol];\r\n\r\n    if (ops?.keepOrigin) {\r\n        (output as any).$$xmlElement = n;\r\n    }  \r\n\r\n    if (schema == null)\r\n        return output;\r\n\r\n    deserializeSchema(n, output, schema);\r\n\r\n    for (let i = 0, l = n.children.length; i < l; i ++) {\r\n        let elem = n.children.item(i);\r\n        let child = schema.children[elem.localName];\r\n\r\n        if (child) {\r\n            let obj = Object.create(child.proto);\r\n            deserializeElement(elem, obj, ops);\r\n            (output as any).children.push(obj);\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function deserializeSchema(n: Element, output: any, schema: OpenXmlSchema) {\r\n    if (schema.text) {\r\n        let prop = schema.text;\r\n        output[prop.prop] = prop.convert ? prop.convert(n.textContent) : n.textContent; \r\n    }\r\n\r\n    for (let i = 0, l = n.attributes.length; i < l; i++) {\r\n        let attr = n.attributes.item(i);\r\n        let prop = schema.attrs[attr.localName];\r\n\r\n        if(prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert ? prop.convert(attr.value) : attr.value; \r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport interface DeserializeOptions {\r\n    keepOrigin: boolean\r\n}\r\n\r\nexport interface OpenXmlSchema {\r\n    elemName: string;\r\n    text: OpenXmlSchemaProperty;\r\n    attrs: Record<string, OpenXmlSchemaProperty>;\r\n    children: Record<string, any>;\r\n}\r\n\r\nexport interface OpenXmlSchemaProperty {\r\n    prop: string;\r\n    convert: Converter;\r\n}\r\n\r\nfunction getPrototypeXmlSchema(proto: any): OpenXmlSchema {\r\n    return proto[schemaSymbol] || (proto[schemaSymbol] = {\r\n        text: null,\r\n        attrs: {},\r\n        children: {}\r\n    });\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n\r\n    paragraphStyle: any;\r\n    runStyle: any;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseRunProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\nexport interface Style {\r\n    id: string;\r\n    type: StyleType;\r\n    customStyle: boolean\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): Style {\r\n    let result = {\r\n        id: xml.attr(elem, 'styleId'),\r\n        type: xml.attr(elem, 'type'),\r\n        customStyle: xml.boolAttr(elem, 'customStyle', false),\r\n        default: xml.boolAttr(elem, 'default', false),\r\n    } as Style;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { keyBy } from \"../utils\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, Style, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n    \r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseStylesPart(root, this._package.xmlParser));\r\n        this.domStyles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { DocxElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: DocxElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n    \r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        return rel ? splitPath(part.path)[0] + rel.target : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport { default as config } from './config';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    keepOrigin: boolean;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options: Options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        keepOrigin: false,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug;\r\n    parser.keepOrigin = options.keepOrigin;\r\n\r\n    renderer.className = options.className;\r\n    renderer.inWrapper = options.inWrapper;\r\n    renderer.keepOrigin = options.keepOrigin;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}"],"sourceRoot":""}