{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/parser/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/document-parser.ts","webpack://docx/./src/parser/paragraph.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__7__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","wordml","elements","elem","namespaceURI","localName","result","childNodes","length","nodeType","push","stringAttr","getAttributeNS","colorAttr","val","lengthAttr","usage","LengthUsage","Dxa","parseInt","mul","type","unit","parseBorder","color","size","Border","defaultValue","Emu","FontSize","Percent","LineHeight","e","left","top","right","botton","DomType","DomRelationshipType","appendClass","classList","className","element","parseColumns","numberOfColumns","xml","intAttr","space","separator","boolAttr","equalWidth","columns","map","width","section","pageSize","height","orientation","pageMargins","bottom","header","footer","gutter","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","Document","load","then","doc","render","PartType","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","FontTable","Numbering","Promise","all","filter","x","loadDocumentImage","id","this","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","relations","outputType","rel","find","target","async","resolve","part","f","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","fontTable","parseFontTable","guidKey","trimmed","replace","numbers","Array","substr","autos","shd","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","values","valueOfRelType","xfonts","fontKey","elementStringAttr","refId","children","style","props","xbody","byTagName","foreach","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","fontSize","isDefault","linked","aliases","split","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","pict","shape","imagedata","src","parseNumberingLevel","level","bullet","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","Run","parent","Hyperlink","anchor","href","Text","text","textContent","fldCharType","break","font","char","Tab","instrText","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","output","DOMParser","parseFromString","firstChild","tagName","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","convertSize","indexOf","intVal","Settings","Theme","StylesWithEffects","Styles","WebSettings","Unknown","trim","a","b","checkMask","num","mask","tabs","position","leader","parseTabs","sectionProps","parseNumbering","lineSpacing","parseLineSpacing","htmlDocument","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","breakIndex","findIndex","newParagraph","slice","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","display","textIndent","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__7__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","export const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    botton: Border;\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length, LengthType, ns, Border, Borders } from \"../dom/common\";\r\n\r\nexport function elements(elem: Element, namespaceURI: string = null, localName: string = null): Element[] {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < elem.childNodes.length; i++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if (n.nodeType == 1\r\n            && (namespaceURI == null || n.namespaceURI == namespaceURI)\r\n            && (localName == null || (n as Element).localName == localName))\r\n            result.push(n);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function stringAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    return elem.getAttributeNS(namespaceURI, name);\r\n}\r\n\r\nexport function intAttr(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function colorAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function boolAttr(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if (val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function lengthAttr(elem: Element, namespaceURI: string, name: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseBorder(elem: Element): Border {\r\n    return {\r\n        type: stringAttr(elem, ns.wordml, \"val\"),\r\n        color: colorAttr(elem, ns.wordml, \"color\"),\r\n        size: lengthAttr(elem, ns.wordml, \"sz\", LengthUsage.Border)\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e); break;\r\n            case \"top\": result.top = parseBorder(e); break;\r\n            case \"right\": result.right = parseBorder(e); break;\r\n            case \"botton\": result.botton = parseBorder(e); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\"\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}","import { SectionProperties } from \"../dom/document\";\r\nimport { ns, Columns, Column } from \"../dom/common\";\r\nimport * as xml from './common';\r\n\r\nexport function parseSectionProperties(elem: Element): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                    height: xml.lengthAttr(e, ns.wordml, \"h\"),\r\n                    orientation: xml.stringAttr(e, ns.wordml, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, ns.wordml, \"left\"),\r\n                    right: xml.lengthAttr(e, ns.wordml, \"right\"),\r\n                    top: xml.lengthAttr(e, ns.wordml, \"top\"),\r\n                    bottom: xml.lengthAttr(e, ns.wordml, \"bottom\"),\r\n                    header: xml.lengthAttr(e, ns.wordml, \"header\"),\r\n                    footer: xml.lengthAttr(e, ns.wordml, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, ns.wordml, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, ns.wordml, \"num\"),\r\n        space: xml.lengthAttr(elem, ns.wordml, \"space\"),\r\n        separator: xml.boolAttr(elem, ns.wordml, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, ns.wordml, \"equalWidth\", true),\r\n        columns: xml.elements(elem, ns.wordml, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                space: xml.lengthAttr(e, ns.wordml, \"space\")\r\n            })\r\n    };\r\n}","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return Document.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    FontTable = \"word/fontTable.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    fontTable: any;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.FontTable, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string, outputType: JSZip.OutputType = \"base64\") {\r\n        let rel = relations.find(x => x.id == id);\r\n        return rel ? this.zip.files[\"word/\" + rel.target].async(outputType) : Promise.resolve(null);\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"text\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n\r\n                case PartType.FontTable:\r\n                    this.fontTable = parser.parseFontTable(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DomRelationshipType, TextElement, SymbolElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ns, CommonProperties } from './dom/common';\r\nimport { lengthAttr, colorAttr, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { parseParagraphProperties } from './parser/paragraph';\r\nimport { parseSectionProperties } from './parser/section';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseFontTable(xmlString: string) {\r\n        var xfonts = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xfonts).map(c => <any>{\r\n            name: xml.stringAttr(c, \"name\"),\r\n            fontKey: xml.elementStringAttr(c, \"embedRegular\", \"fontKey\"), \r\n            refId: xml.elementStringAttr(c, \"embedRegular\", \"id\")\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != ns.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = colorAttr(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = lengthAttr(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            if(parseParagraphProperties(c, paragraph.props))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { type: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        let spacing = null;\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { ParagraphTab, ParagraphProperties, ParagraphNumbering, LineSpacing } from \"../dom/paragraph\";\r\nimport * as xml from \"./common\";\r\nimport { ns } from \"../dom/common\";\r\nimport { parseSectionProperties } from \"./section\";\r\n\r\nexport function parseParagraphProperties(elem: Element, props: ParagraphProperties) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem);\r\n            return false; // TODO\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction parseTabs(elem: Element): ParagraphTab[] {\r\n    return xml.elements(elem, ns.wordml, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, ns.wordml, \"pos\"),\r\n            leader: xml.stringAttr(e, ns.wordml, \"leader\"),\r\n            style: xml.stringAttr(e, ns.wordml, \"val\")\r\n        });\r\n}\r\n\r\nfunction parseNumbering(elem: Element): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.stringAttr(e, ns.wordml, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, ns.wordml, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction parseLineSpacing(elem: Element): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, ns.wordml, \"before\"),\r\n        after: xml.lengthAttr(elem, ns.wordml, \"after\"),\r\n        line: xml.intAttr(elem, ns.wordml, \"line\"),\r\n        lineRule: xml.stringAttr(elem, ns.wordml, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement, SectionProperties } from './dom/document';\r\nimport { ParagraphElement} from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { LengthUsage } from './parser/common';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Options;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        appendComment(styleContainer, \"docx document styles\");\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts)\r\n            this.renderFontTable(document.fontTable, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fonts: any[], styleContainer: HTMLElement) {\r\n        for(let f of fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n                var sectProps = p.props.sectionProps;\r\n                var breakIndex = this.options.breakPages ? (p.children && p.children.findIndex(x => (<any>x).break == \"page\")) : -1;\r\n    \r\n                if(sectProps || breakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(breakIndex != -1 && breakIndex < p.children.length - 1) {\r\n                    var children = elem.children;\r\n                    var newParagraph = { ...elem, children: children.slice(breakIndex) };\r\n                    elem.children = children.slice(0, breakIndex);\r\n                    current.elements.push(newParagraph);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n            \r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.props.numbering) {\r\n            var numberingClass = this.numberingClass(elem.props.numbering.id, elem.props.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}