{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footnotes/footnote.ts","webpack://docx/./src/footnotes/footnotes-part.ts","webpack://docx/./src/header-footer/elements.ts","webpack://docx/./src/header-footer/parts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd {\"root\":\"JSZip\",\"commonjs\":\"jszip\",\"commonjs2\":\"jszip\",\"amd\":\"jszip\"}","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jszip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jszip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"jszip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__626__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\r\n} from './document/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFootnote } from './footnotes/footnote';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseFootnotes(xmlDoc: Element): WmlFootnote[] {\r\n        var result = [];\r\n\r\n        for (let el of globalXmlParser.elements(xmlDoc, \"footnote\")) {\r\n            const footnote = new WmlFootnote();\r\n            footnote.id = globalXmlParser.attr(el, \"id\");\r\n            footnote.footnoteType = globalXmlParser.attr(el, \"type\");\r\n            footnote.children = this.parseBodyElements(el);\r\n            result.push(footnote);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var background = globalXmlParser.element(xmlDoc, \"background\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xml.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n            //case \"numbering\": result.target = \"p\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyleName: undefined,\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pStyle\":\r\n                    result.pStyleName = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <WmlParagraph>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): WmlRun {\r\n        var result: WmlRun = <WmlRun>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"noBreakHyphen\":\r\n                    result.children.push({ type: DomType.NoBreakHyphen });\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<FootnoteReferenceElement>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.stringAttr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.verticalAlign = \"sub\"; break;\r\n                        case \"superscript\": run.verticalAlign = \"super\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        pos.relative = globalXmlParser.attr(n, \"relativeFrom\") ?? pos.relative;\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"vanish\":\r\n                    if (xml.boolAttr(c, \"val\", true))\r\n                        style[\"display\"] = \"none\";\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null)\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"none\":\r\n                style[\"text-decoration\"] = \"none\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\r\n\r\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\r\n\r\n        if (fonts.length > 0)\r\n            style[\"font-family\"] = fonts;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == Node.ELEMENT_NODE)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        if (v) {\r\n            if (v == \"auto\") {\r\n                return autoColor;\r\n            } else if (knownColors.includes(v)) {\r\n                return v;\r\n            }\r\n\r\n            return `#${v}`;\r\n        }\r\n\r\n        var themeColor = xml.stringAttr(node, \"themeColor\");\r\n\r\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        return globalXmlParser.intAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static themeValue(c: Element, attr: string) {\r\n        var val = xml.stringAttr(c, attr); \r\n        return val ? `var(--docx-${val}-font)` : null;\r\n    }\r\n    \r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlBookmarkStart extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface WmlBookmarkEnd extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): WmlBookmarkStart {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): WmlBookmarkEnd {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    if (!val) {\r\n        return null;\r\n    }\r\n\r\n    //\"simplified\" docx documents use pt's as units\r\n    if (val.endsWith('pt')) {\r\n        return { value: parseFloat(val), type: 'pt' };\r\n    }\r\n\r\n    if (val.endsWith('%')) {\r\n        return { value: parseFloat(val), type: '%' };\r\n    }\r\n\r\n    return { value: parseInt(val) * usage.mul, type: usage.unit };\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    NoBreakHyphen = \"noBreakHyphen\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n    Footnote = \"footnote\" \r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface FootnoteReferenceElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyleName: string;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    suff: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface WmlParagraph extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlRun extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Borders, parseBorders } from \"./border\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    pageBorders: Borders;\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n    titlePage: boolean;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n\r\n            case \"titlePg\":\r\n                section.titlePage = xml.boolAttr(e, \"val\", true);\r\n                break;\r\n\r\n            case \"pgBorders\":\r\n                section.pageBorders = parseBorders(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nconst embedFontTypeMap = {\r\n    embedRegular: 'regular',\r\n    embedBold: 'bold',\r\n    embedItalic: 'italic',\r\n    embedBoldItalic: 'boldItalic',\r\n}\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    embedFontRefs: EmbedFontRef[];\r\n}\r\n\r\nexport interface EmbedFontRef {\r\n    id: string;\r\n    key: string;\r\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\r\n}\r\n\r\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\r\n    return xml.elements(root).map(el => parseFont(el, xml));\r\n}\r\n\r\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xml.attr(elem, \"name\"),\r\n        embedFontRefs: []\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n            case \"embedBold\":\r\n            case \"embedItalic\":\r\n            case \"embedBoldItalic\":\r\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\r\n    return { \r\n        id: xml.attr(elem, \"id\"), \r\n        key: xml.attr(elem, \"fontKey\"),\r\n        type: embedFontTypeMap[elem.localName]\r\n    };\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlFootnote implements OpenXmlElement {\r\n    id: string;\r\n    footnoteType: string;\r\n    type: DomType = DomType.Footnote;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFootnote } from \"./footnote\";\r\n\r\nexport class FootnotesPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    footnotes: WmlFootnote[]\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.footnotes = this._documentParser.parseFootnotes(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { OpenXmlElement } from \"../document/dom\";\r\nimport { WmlHeader, WmlFooter } from \"./elements\";\r\n\r\nexport abstract class BaseHeaderFooterPart<T extends OpenXmlElement = OpenXmlElement> extends Part {\r\n    rootElement: T;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.rootElement = this.createRootElement();\r\n        this.rootElement.children = this._documentParser.parseBodyElements(root);\r\n    }\r\n\r\n    protected abstract createRootElement(): T;\r\n}\r\n\r\nexport class HeaderPart extends BaseHeaderFooterPart<WmlHeader> {\r\n    protected createRootElement(): WmlHeader {\r\n        return new WmlHeader();\r\n    }\r\n}\r\n\r\nexport class FooterPart extends BaseHeaderFooterPart<WmlFooter> {\r\n    protected createRootElement(): WmlFooter {\r\n        return new WmlFooter();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph } from './document/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { FooterHeaderReference, SectionProperties } from './document/section';\r\nimport { WmlRun, RunProperties } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { Part } from './common/part';\r\nimport { WmlFootnote } from './footnotes/footnote';\r\nimport { ThemePart } from './theme/theme-part';\r\nimport { BaseHeaderFooterPart } from './header-footer/parts';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: Record<string, IDomStyle> = {};\r\n\r\n    footnoteMap: Record<string, WmlFootnote> = {};\r\n    currentFootnoteIds: string[];\r\n    usedHederFooterParts: any[] = [];\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.themePart) {\r\n            appendComment(styleContainer, \"docxjs document theme values\");\r\n            this.renderTheme(document.themePart, styleContainer);\r\n        }\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docxjs document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            this.prodessNumberings(document.numberingPart.domNumberings);\r\n\r\n            appendComment(styleContainer, \"docxjs document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.footnotes, x => x.id);\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\r\n        } else {\r\n            appendChildren(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\r\n        const variables = {};\r\n        const fontScheme = themePart.theme?.fontScheme;\r\n\r\n        if (fontScheme) {\r\n            if (fontScheme.majorFont) {\r\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\r\n            }\r\n\r\n            if (fontScheme.minorFont) {\r\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\r\n            }\r\n        }\r\n\r\n        const colorScheme = themePart.theme?.colorScheme;\r\n\r\n        if (colorScheme) {\r\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\r\n                variables[`--docx-${k}-color`] = `#${v}`;\r\n            }\r\n        }\r\n\r\n        const cssText = this.styleToString(`.${this.className}`, variables);\r\n        styleContainer.appendChild(createStyleElement(cssText));\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts) {\r\n            for (let ref of f.embedFontRefs) {\r\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\r\n                    var cssValues = {\r\n                        'font-family': f.name,\r\n                        'src': `url(${fontData})`\r\n                    };\r\n\r\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-weight'] = 'bold';\r\n                    }\r\n\r\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-style'] = 'italic';\r\n                    }\r\n\r\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\r\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\r\n                    styleContainer.appendChild(createStyleElement(cssText));\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.find(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues) {\r\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\r\n                    }\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    prodessNumberings(numberings: IDomNumbering[]) {\r\n        for (let num of numberings.filter(n => n.pStyleName)) {\r\n            const style = this.styleMap && this.styleMap[num.pStyleName];\r\n\r\n            if (style?.paragraphProps?.numbering) {\r\n                style.paragraphProps.numbering.level = num.level;\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            this.currentFootnoteIds = [];\r\n\r\n            const props = section.sectProps || document.props;\r\n            const sectionElement = this.createSection(this.className, props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n\r\n            this.options.renderHeaders && this.renderHeaderFooter(props.headerRefs, props, result.length, sectionElement);\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements, contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderFootnotes(this.currentFootnoteIds, sectionElement);\r\n            }\r\n\r\n            this.options.renderFooters && this.renderHeaderFooter(props.footerRefs, props, result.length, sectionElement);\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, into: HTMLElement) {\r\n        if (!refs) return;\r\n\r\n        var ref = props.titlePage ? refs.find(x => x.type == \"first\") \r\n            : (page == 0 ? refs.find(x => x.type == \"first\") : null)\r\n            ?? (page % 2 == 0 ? refs.find(x => x.type == \"even\") : null)\r\n            ?? refs.find(x => x.type == \"default\");\r\n\r\n        var part = ref && this.document.findPartByRelId(ref.id, this.document.documentPart) as BaseHeaderFooterPart;\r\n\r\n        if (part) {\r\n            if (!this.usedHederFooterParts.includes(part.path)) {\r\n                this.processElement(part.rootElement);\r\n                this.usedHederFooterParts.push(part.path);\r\n            }\r\n            this.renderElements([part.rootElement], into);\r\n        }\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as WmlParagraph).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value.toFixed(2)}${l.type ?? ''}` : null;\r\n    }\r\n\r\n    renderWrapper(children: HTMLElement[]) {\r\n        return this.createElement(\"div\", { className: `${this.className}-wrapper` }, children);\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; overflow: hidden; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n        var defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderFootnotes(footnoteIds: string[], into: HTMLElement) {\r\n        var footnotes = footnoteIds.map(id => this.footnoteMap[id]).filter(x => x);\r\n\r\n        if (footnotes.length > 0) {\r\n            var result = this.createElement(\"ol\", null, this.renderElements(footnotes));\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<WmlParagraph>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<WmlBookmarkStart>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<WmlRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n                return this.renderContainer(elem, \"li\");\r\n\r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as FootnoteReferenceElement);\r\n\r\n            case DomType.NoBreakHyphen:\r\n                return this.createElement(\"wbr\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\r\n        return this.createElement(tagName, null, this.renderChildren(elem));\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        const style = elem.styleName && this.styleMap && this.styleMap[elem.styleName];\r\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: FootnoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<WmlParagraph>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 1500);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.verticalAlign) {\r\n            result.style.verticalAlign = elem.verticalAlign;\r\n            result.style.fontSize ||= \"small\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.createElement(\"colgroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key of Object.getOwnPropertyNames(style)) {\r\n            ouput.style[key] = style[key];\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",\r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n\r\n    createElement = createElement;\r\n}\r\n\r\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\r\n    tagName: T,\r\n    props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\r\n    children: Node[] = undefined\r\n): HTMLElementTagNameMap[T] {\r\n    var result = Object.assign(document.createElement(tagName), props);\r\n    children && appendChildren(result, children);\r\n    return result;\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction appendChildren(elem: HTMLElement, children: Node[]) {\r\n    children.forEach(c => elem.appendChild(c));\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    return createElement(\"style\", { innerHTML: cssText });\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    const p = elem.closest(\"p\");\r\n\r\n    const tbb = elem.getBoundingClientRect();\r\n    const pbb = p.getBoundingClientRect();\r\n    const pcs = getComputedStyle(p);\r\n\r\n    const marginLeft = parseFloat(pcs.marginLeft);\r\n    const textIntent = parseFloat(pcs.textIndent);\r\n    const pOffset = pbb.left + marginLeft;\r\n    let left = (tbb.left - pOffset) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    let width: any = 1;\r\n\r\n    if (tab.style == \"right\") {\r\n        const range = document.createRange();\r\n        range.setStart(p.firstChild, 0);\r\n        range.setEndAfter(p);\r\n\r\n        const nextBB = range.getBoundingClientRect();\r\n        const prevRight = (nextBB.width + marginLeft + textIntent) * pixelToPoint;\r\n        width = `${Math.floor(tab.position.value - prevRight)}pt`;\r\n    } else {\r\n        width = `${(tab.position.value - left)}pt`;\r\n    }\r\n\r\n    elem.innerHTML = \"&nbsp;\";\r\n    elem.style.textDecoration = \"inherit\";\r\n    elem.style.wordSpacing = width;\r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.textDecoration = \"underline\";\r\n            elem.style.textDecorationStyle = \"dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.textDecoration = \"underline\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphStyle: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pStyle\":\r\n                result.paragraphStyle = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"http://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart, HeaderPart } from \"./header-footer/parts\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { FootnotesPart } from \"./footnotes/footnotes-part\";\r\n\r\nconst topLevelRels = [\r\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n    footnotesPart: FootnotesPart;\r\n    themePart: ThemePart;\r\n    corePropsPart: CorePropsPart;\r\n    extendedPropsPart: ExtendedPropsPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                const tasks = topLevelRels.map(rel => {\r\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n                    return d.loadRelationshipPart(r.target, r.type);\r\n                });\r\n\r\n                return Promise.all(tasks);\r\n            }).then(() => d);\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Theme:\r\n                this.themePart = part = new ThemePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Footnotes:\r\n                this.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\r\n                break;\r\n        \r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.CoreProperties:\r\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.ExtendedProperties:\r\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            const [folder] = splitPath(part.path); \r\n            const rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    findPartByRelId(id: string, basePart: Part = null) {\r\n        var rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n        const folder = basePart ? splitPath(basePart.path)[0] : ''; \r\n        return rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        const [folder] = splitPath(part.path); \r\n        return rel ? resolvePath(rel.target, folder) : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__626__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(771);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__626__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseFootnotes","result","el","footnote","WmlFootnote","footnoteType","children","parseBodyElements","push","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyleName","undefined","pStyle","rStyle","suff","bullet","find","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","instrText","d","parseDrawing","run","verticalAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","join","length","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","knownColors","cb","i","childNodes","nodeType","Node","ELEMENT_NODE","nodeName","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertSize","test","intVal","parseInt","Border","Percent","replace","valueOfBold","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","ns","wordml","drawingml","picture","mul","unit","LineHeight","usage","endsWith","parseFloat","defaultValue","namespaceURI","fontSize","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","titlePage","pageBorders","parseBorders","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","parseFonts","FontTablePart","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","Footnote","footnotes","FootnotesPart","WmlHeader","Header","WmlFooter","Footer","rootElement","createRootElement","BaseHeaderFooterPart","HeaderPart","FooterPart","htmlDocument","styleMap","footnoteMap","usedHederFooterParts","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","prodessNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appendChildren","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","Object","entries","colors","k","cssText","styleToString","createStyleElement","fontsPart","f","ref","loadFont","fontData","cssValues","processClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","numberings","processElement","processTable","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","renderHeaderFooter","contentElement","renderElements","refs","page","into","part","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","defautStyles","subStyles","linkedStyle","concat","subStyle","footnoteIds","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","renderFootnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","numformat","substring","assign","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","pcs","getComputedStyle","marginLeft","textIntent","pOffset","tab","t","range","createRange","setStart","firstChild","setEndAfter","prevRight","Math","floor","textDecoration","wordSpacing","textDecorationStyle","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","elementAttr","attrLocalName","attributes","floatAttr","convertBoolean","convertLength","globalXmlParser","StylesPart","parseTheme","ThemePart","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","DmlTheme","themeElements","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","FontTable","Numbering","Styles","Theme","Footnotes","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}