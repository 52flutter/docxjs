{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/common/part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/parser/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/common/package.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/parser/paragraph.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__10__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","load","pkg","loadRelationships","this","then","rels","Part","appendClass","classList","className","element","si","lastIndexOf","substring","wordml","elements","elem","namespaceURI","localName","result","childNodes","length","nodeType","push","stringAttr","getAttributeNS","colorAttr","val","lengthAttr","usage","LengthUsage","Dxa","parseInt","mul","type","unit","parseBorder","color","size","Border","defaultValue","Emu","FontSize","Percent","LineHeight","e","left","top","right","botton","RelationshipTypes","xmlParser","map","id","attr","target","targetMode","autos","shd","highlight","SizeType","skipDeclaration","ignoreWidth","debug","parseDocumentFile","xmlString","DomType","Document","children","style","props","xbody","xml","byTagName","parse","foreach","parseParagraph","parseTable","parseSectionProperties","parseStylesFile","xstyles","parseStyle","parseDefaultStyles","node","basedOn","styles","rPr","values","parseDefaultProperties","pPr","parseCommonProperties","fontSize","isDefault","boolAttr","linked","aliases","split","parseTableStyle","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","Run","parent","Hyperlink","anchor","href","Text","text","textContent","fldCharType","Break","break","font","char","Tab","instrText","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","output","DocumentParser","replace","DOMParser","parseFromString","firstChild","tagName","cb","nodeName","attrName","attributes","item","defValue","autoColor","v","convertSize","indexOf","intVal","trim","a","b","checkMask","num","mask","parseColumns","numberOfColumns","space","separator","equalWidth","section","pageSize","height","orientation","pageMargins","bottom","header","footer","gutter","data","bodyContainer","styleContainer","userOptions","parser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","WordDocument","doc","render","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","Package","find","OfficeDocument","loadRelationshipPart","Promise","resolve","exists","part","documentPart","DocumentPart","FontTable","fontTablePart","FontTablePart","Numbering","numberingPart","NumberingPart","Styles","stylesPart","StylesPart","folder","splitPath","rel","all","loadDocumentImage","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","el","fonts","parseFonts","embed","fontKey","refId","_zip","XmlParser","files","file","async","relsPath","parseRelationships","_documentParser","body","numberings","tabs","position","leader","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","htmlDocument","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontsPart","f","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","pBreakIndex","rBreakIndex","findIndex","breakRun","splitRun","newParagraph","slice","runChildren","newRun","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","display","textIndent","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__10__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}","export const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    botton: Border;\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length, LengthType, ns, Border, Borders } from \"../dom/common\";\r\n\r\nexport function elements(elem: Element, namespaceURI: string = null, localName: string = null): Element[] {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < elem.childNodes.length; i++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if (n.nodeType == 1\r\n            && (namespaceURI == null || n.namespaceURI == namespaceURI)\r\n            && (localName == null || (n as Element).localName == localName))\r\n            result.push(n);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function stringAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    return elem.getAttributeNS(namespaceURI, name);\r\n}\r\n\r\nexport function intAttr(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function colorAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function boolAttr(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if (val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function lengthAttr(elem: Element, namespaceURI: string, name: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseBorder(elem: Element): Border {\r\n    return {\r\n        type: stringAttr(elem, ns.wordml, \"val\"),\r\n        color: colorAttr(elem, ns.wordml, \"color\"),\r\n        size: lengthAttr(elem, ns.wordml, \"sz\", LengthUsage.Border)\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e); break;\r\n            case \"top\": result.top = parseBorder(e); break;\r\n            case \"right\": result.right = parseBorder(e); break;\r\n            case \"botton\": result.botton = parseBorder(e); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomSubStyle, IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ns, CommonProperties } from './dom/common';\r\nimport { lengthAttr, colorAttr, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { parseParagraphProperties } from './parser/paragraph';\r\nimport { parseSectionProperties } from './parser/section';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != ns.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = colorAttr(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = lengthAttr(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            if(parseParagraphProperties(c, paragraph.props))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { type: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        let spacing = null;\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { SectionProperties } from \"../dom/document\";\r\nimport { ns, Columns, Column } from \"../dom/common\";\r\nimport * as xml from './common';\r\n\r\nexport function parseSectionProperties(elem: Element): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                    height: xml.lengthAttr(e, ns.wordml, \"h\"),\r\n                    orientation: xml.stringAttr(e, ns.wordml, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, ns.wordml, \"left\"),\r\n                    right: xml.lengthAttr(e, ns.wordml, \"right\"),\r\n                    top: xml.lengthAttr(e, ns.wordml, \"top\"),\r\n                    bottom: xml.lengthAttr(e, ns.wordml, \"bottom\"),\r\n                    header: xml.lengthAttr(e, ns.wordml, \"header\"),\r\n                    footer: xml.lengthAttr(e, ns.wordml, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, ns.wordml, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, ns.wordml, \"num\"),\r\n        space: xml.lengthAttr(elem, ns.wordml, \"space\"),\r\n        separator: xml.boolAttr(elem, ns.wordml, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, ns.wordml, \"equalWidth\", true),\r\n        columns: xml.elements(elem, ns.wordml, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                space: xml.lengthAttr(e, ns.wordml, \"space\")\r\n            })\r\n    };\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclatation, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclatation[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then((el) => {\r\n                    this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclatation {\r\n    name: string,\r\n    fontKey?: string,\r\n    refId?: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclatation[] {\r\n    const result = [];\r\n\r\n    for(let el of xmlParser.elements(root)) {\r\n        let font: FontDeclatation = {\r\n            name: xmlParser.attr(el, \"name\")\r\n        }\r\n\r\n        let embed = xmlParser.element(el, \"embedRegular\");\r\n\r\n        if(embed) {\r\n            font.fontKey = xmlParser.attr(embed, \"fontKey\");    \r\n            font.refId = xmlParser.attr(embed, \"id\");    \r\n        }\r\n\r\n        result.push(font);\r\n    }\r\n\r\n    return result;\r\n}","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","export class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element): Element[] {\r\n        const result = [];\r\n\r\n        for(let i = 0, l = elem.childNodes.length; i < l; i ++) {\r\n            let c = elem.childNodes.item(i);\r\n            \r\n            if(c.nodeType == 1)\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for(let i = 0, l = elem.childNodes.length; i < l; i ++) {\r\n            let c = elem.childNodes.item(i);\r\n            \r\n            if(c.nodeType == 1 && c.nodeName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for(let i = 0, l = elem.attributes.length; i < l; i ++) {\r\n            let a = elem.attributes.item(i);\r\n            \r\n            if(a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;      \r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\n\r\nexport class NumberingPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.numberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/dom\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.styles = new DocumentParser().parseStylesFile(xml);\r\n            })\r\n    }\r\n}","import { ParagraphTab, ParagraphProperties, ParagraphNumbering, LineSpacing } from \"../dom/paragraph\";\r\nimport * as xml from \"./common\";\r\nimport { ns } from \"../dom/common\";\r\nimport { parseSectionProperties } from \"./section\";\r\n\r\nexport function parseParagraphProperties(elem: Element, props: ParagraphProperties) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem);\r\n            return false; // TODO\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction parseTabs(elem: Element): ParagraphTab[] {\r\n    return xml.elements(elem, ns.wordml, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, ns.wordml, \"pos\"),\r\n            leader: xml.stringAttr(e, ns.wordml, \"leader\"),\r\n            style: xml.stringAttr(e, ns.wordml, \"val\")\r\n        });\r\n}\r\n\r\nfunction parseNumbering(elem: Element): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.stringAttr(e, ns.wordml, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, ns.wordml, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction parseLineSpacing(elem: Element): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, ns.wordml, \"before\"),\r\n        after: xml.lengthAttr(elem, ns.wordml, \"after\"),\r\n        line: xml.intAttr(elem, ns.wordml, \"line\"),\r\n        lineRule: xml.stringAttr(elem, ns.wordml, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement, SectionProperties } from './dom/document';\r\nimport { ParagraphElement} from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { LengthUsage } from './parser/common';\r\nimport { FontTablePart } from './font-table/font-table';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.numberings, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n            \r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.props.numbering) {\r\n            var numberingClass = this.numberingClass(elem.props.numbering.id, elem.props.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}