{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/html-renderer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomType","DomRelationshipType","document_1","document_parser_1","html_renderer_1","renderAsync","data","bodyContainer","styleContainer","options","parser","DocumentParser","renderer","HtmlRenderer","document","__assign","ignoreHeight","ignoreWidth","debug","className","inWrapper","Document","load","then","doc","render","PartType","this","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","Numbering","Promise","all","filter","x","loadDocumentImage","id","loadResource","loadNumberingImage","loadFont","relations","rel","length","resolve","target","async","part","_this","f","xml","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","dom_1","utils","common_1","common_2","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","elements","map","stringAttr","type","values","valueOfRelType","result","domType","children","style","props","xbody","byTagName","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","namespaceURI","namespaces","wordml","getAttributeColorValue","fontSize","getAttributeLengthValue","LengthUsage","FontSize","isDefault","boolAttr","_i","_a","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","levelText","format","section","forEachElementNS","e","pageSize","width","height","orientation","getAttributeNS","pageMargins","left","right","top","bottom","header","footer","gutter","columns","parseColumns","numberOfColumns","getAttributeIntValue","space","separator","getAttributeBoolValue","equalWidth","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","addElementClass","classNameOfCnfStyle","parseNumbering","parseFrame","parseTabs","numberingId","numberingLevel","Run","parent","Hyperlink","anchor","href","text","textContent","break","tab","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapTopAndBottom","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","start","end","before","after","line","tabs","position","leader","output","valueOfBorder","replace","DOMParser","parseFromString","firstChild","tagName","childNodes","nodeType","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","toFixed","Border","Percent","Settings","Theme","StylesWithEffects","Styles","FontTable","WebSettings","Unknown","trim","a","b","checkMask","num","mask","appendClass","classList","element","parseLength","usage","callback","defaultValue","htmlDocument","digitTest","test","clearElement","appendChild","createComment","renderDefaultStyle","renderStyles","renderNumbering","documentElement","renderDocument","renderWrapper","removeChild","processClassName","processStyles","stylesMap","styles_1","styles_2","baseStyle","baseValues","styleValues","this_1","copyStyleProperties","_b","_c","processElement","processTable","input","attrs","getOwnPropertyNames","attrs_1","bodyElement","createElement","renderChildren","renderStyleValues","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","columnCount","columnGap","columnRule","styleText","renderStyle","listStyleType","rootCounters","this_2","numberingClass","counter","numberingCounter","styleToString","counter-reset","content","levelTextToContent","counter-increment","display","list-style-position","list-style-type","valiable_1","toLowerCase","background","numFormatToCssValue","styles_3","join","styleContent","styleElement","innerHTML","styles_4","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","into","renderClass","renderCommonProeprties","textIndent","link","renderTableColumns","columns_1","colElem","colSpan","ouput","lvl","selectors","cssText","substring","none","decimal","lowerLetter","upperLetter","lowerRoman","upperRoman"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory();\n\telse\n\t\troot[\"docx\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum DomType {\r\n    Document,\r\n    Paragraph,\r\n    Run,\r\n    Break,\r\n    Table,\r\n    Row,\r\n    Cell,\r\n    Hyperlink,\r\n    Drawing,\r\n    Image\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    domType: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface DocxTab {\r\n    style: string;\r\n    leader: string;\r\n    position: string;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    text?: string;\r\n    href?: string;\r\n    tab?: boolean;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    debug: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options> = null): PromiseLike<any> {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    options = { \r\n        ignoreHeight: true,\r\n        ignoreWidth: false,\r\n        debug: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... options\r\n    };\r\n\r\n    if (options) {\r\n        options.ignoreWidth = options.ignoreWidth || parser.ignoreWidth;\r\n        options.ignoreHeight = options.ignoreHeight || parser.ignoreHeight;\r\n        parser.debug = options.debug || parser.debug;\r\n\r\n        renderer.className = options.className || \"docx\";\r\n        renderer.inWrapper = options.inWrapper != null ? options.inWrapper : true;\r\n    }\r\n\r\n    return Document.load(data, parser)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, options);\r\n            return doc;\r\n        });\r\n}","import { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadFont(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id)\r\n            .then(x => x ? (\"data:application/vnd.ms-package.obfuscated-opentype;charset=utf-8;base64,\" + x) : null);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string) {\r\n        let rel = relations.filter(x => x.id == id);\r\n\r\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(\"base64\");\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"string\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { SectionProperties, DocumentElement } from './dom/document';\r\nimport { namespaces, Columns, CommonProperties } from './dom/common';\r\nimport { forEachElementNS, getAttributeLengthValue, getAttributeIntValue, getAttributeBoolValue, getAttributeColorValue, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    ignoreHeight: boolean = true;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            domType: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = this.parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != namespaces.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = getAttributeColorValue(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = getAttributeLengthValue(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseSectionProperties(elem: Element): SectionProperties {\r\n        var section = <SectionProperties>{};\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            switch(e.localName) {\r\n                case \"pgSz\":\r\n                    section.pageSize = {\r\n                        width: getAttributeLengthValue(e, namespaces.wordml, \"w\"),\r\n                        height: getAttributeLengthValue(e, namespaces.wordml, \"h\"),\r\n                        orientation: e.getAttributeNS(namespaces.wordml, \"orient\")\r\n                    }\r\n                    break;\r\n\r\n                case \"pgMar\":\r\n                    section.pageMargins = {\r\n                        left: getAttributeLengthValue(e, namespaces.wordml, \"left\"),\r\n                        right: getAttributeLengthValue(e, namespaces.wordml, \"right\"),\r\n                        top: getAttributeLengthValue(e, namespaces.wordml, \"top\"),\r\n                        bottom: getAttributeLengthValue(e, namespaces.wordml, \"bottom\"),\r\n                        header: getAttributeLengthValue(e, namespaces.wordml, \"header\"),\r\n                        footer: getAttributeLengthValue(e, namespaces.wordml, \"footer\"),\r\n                        gutter: getAttributeLengthValue(e, namespaces.wordml, \"gutter\"),\r\n                    };\r\n                    break;\r\n\r\n                case \"cols\":\r\n                    section.columns = this.parseColumns(e);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return section;\r\n    }\r\n\r\n    parseColumns(elem: Element): Columns {\r\n        var result = {\r\n            numberOfColumns: getAttributeIntValue(elem, namespaces.wordml, \"num\"),\r\n            space: getAttributeLengthValue(elem, namespaces.wordml, \"space\"),\r\n            separator: getAttributeBoolValue(elem, namespaces.wordml, \"sep\"),\r\n            equalWidth: getAttributeBoolValue(elem, namespaces.wordml, \"equalWidth\", true),\r\n            columns: []\r\n        };\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            if(e.localName != \"col\")\r\n                return;\r\n\r\n            result.columns.push({\r\n                width: getAttributeLengthValue(elem, namespaces.wordml, \"w\"),\r\n                space: getAttributeLengthValue(elem, namespaces.wordml, \"space\")\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ domType: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"numPr\":\r\n                    this.parseNumbering(c, paragraph);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"tabs\":\r\n                    this.parseTabs(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseNumbering(node: Element, paragraph: ParagraphElement) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"numId\":\r\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"ilvl\":\r\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { domType: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.tab = true;\r\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ domType: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapTopAndBottom = false;\r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(node, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapTopAndBottom = true;\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapTopAndBottom) {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { domType: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\r\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\r\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\r\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\r\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\r\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.sizeAttr(node, \"line\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        if (line) {\r\n            style[\"line-height\"] = line;\r\n            style[\"min-height\"] = line;\r\n        }\r\n    }\r\n\r\n    parseTabs(node: Element, paragraph: ParagraphElement) {\r\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\r\n            position: xml.sizeAttr(n, \"pos\"),\r\n            leader: xml.stringAttr(n, \"leader\"),\r\n            style: xml.stringAttr(n, \"val\"),\r\n        });\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : 0;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}\r\n","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}","export const namespaces = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: \"px\" | \"pt\" | \"%\"\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length } from \"../dom/common\";\r\n\r\nexport function forEachElementNS(elem: Element, namespaceURI: string, callback: (elem: Element) => any) {\r\n    elem.childNodes.forEach(n => {\r\n        if(n.nodeType == 1 && n.namespaceURI == namespaceURI)\r\n            callback(<Element>n);\r\n    });\r\n}\r\n\r\nexport function getAttributeIntValue(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function getAttributeColorValue(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function getAttributeBoolValue(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if(val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport function getAttributeLengthValue(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\r\n}\r\n\r\nexport enum LengthUsage {\r\n    Dxa,\r\n    Emu,\r\n    FontSize,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    if (!val)\r\n        return null;\r\n\r\n    var num = parseInt(val);\r\n\r\n    switch (usage) {\r\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\r\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\r\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\r\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\r\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\r\n    }\r\n\r\n    return null;\r\n}","import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Partial<Options>;\r\n\r\n    private digitTest = /^[0-9]/.test;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Partial<Options>) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        this.clearElement(styleContainer);\r\n        this.clearElement(bodyContainer);\r\n\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docxjs library predefined styles\"));\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docx document styles\"));\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            styleContainer.appendChild(this.htmlDocument.createComment(\"docx document numbering styles\"));\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        var documentElement = this.renderDocument(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            wrapper.appendChild(documentElement);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            bodyContainer.appendChild(documentElement);\r\n        }\r\n    }\r\n\r\n    clearElement(elem: HTMLElement) {\r\n        while (elem.firstChild) {\r\n            elem.removeChild(elem.firstChild);\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n            style.basedOn = this.processClassName(style.basedOn);\r\n\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles) {\r\n            if (style.basedOn) {\r\n                var baseStyle = stylesMap[style.basedOn];\r\n\r\n                if(!baseStyle) {\r\n                    if(this.options.debug)\r\n                        console.warn(`Can't find style ${style.basedOn}`);\r\n\r\n                    continue;\r\n                }\r\n\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n\r\n                if (e.domType == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    renderDocument(document: DocumentElement): HTMLElement {\r\n        var bodyElement = this.htmlDocument.createElement(\"section\");\r\n\r\n        bodyElement.className = this.className;\r\n\r\n        this.processElement(document);\r\n        this.renderChildren(document, bodyElement);\r\n\r\n        this.renderStyleValues(document.style, bodyElement);\r\n\r\n        if(document.props) {\r\n            var props = document.props;\r\n\r\n            if(props.pageMargins) {\r\n                bodyElement.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                bodyElement.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                bodyElement.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                bodyElement.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if(props.pageSize) {\r\n                if(!this.options.ignoreWidth)\r\n                    bodyElement.style.width = this.renderLength(props.pageSize.width);\r\n                if(!this.options.ignoreHeight)\r\n                    bodyElement.style.height = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if(props.columns && props.columns.numberOfColumns) {\r\n                bodyElement.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                bodyElement.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if(props.columns.separator) {\r\n                    bodyElement.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return bodyElement;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; display: flex; justify-content: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(this.renderStyle(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderStyle(styleContent: string) {\r\n        var styleElement = document.createElement(\"style\");\r\n        styleElement.type = \"text/css\";\r\n        styleElement.innerHTML = styleContent;\r\n        return styleElement;\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n\r\n        this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            for (var subStyle of style.styles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): HTMLElement {\r\n        switch (elem.domType) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        var result: HTMLElement[] = null;\r\n\r\n        if (elem.children != null)\r\n            result = elem.children.map(x => this.renderElement(x, elem)).filter(x => x != null);\r\n\r\n        if (into && result)\r\n            result.forEach(x => into.appendChild(x));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.numberingId && elem.numberingLevel != null) {\r\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return this.htmlDocument.createElement(elem.break == \"page\" ? \"hr\" : \"br\");\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.text)\r\n            result.textContent = elem.text;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.id) {\r\n            result.id = elem.id;\r\n        }\r\n\r\n        if (elem.tab) {\r\n            //TODO\r\n            // result.style.display = \"inline-block\";\r\n\r\n            // var paragraph = <IDomParagraph>elem.parent;\r\n\r\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\r\n            //     paragraph = <IDomParagraph>paragraph.parent;\r\n\r\n            // if (paragraph && paragraph.tabs) {\r\n            //     var tab = paragraph.tabs[0];\r\n\r\n            //     result.style.width = tab.position;\r\n\r\n            //     switch (tab.leader) {\r\n            //         case \"dot\":\r\n            //         case \"middleDot\":\r\n            //             result.style.borderBottom = \"1px black dotted\";\r\n            //             break;\r\n\r\n            //         case \"hyphen\":\r\n            //         case \"heavy\":\r\n            //         case \"underscore\":\r\n            //             result.style.borderBottom = \"1px black solid\";\r\n            //             break;\r\n            //     }\r\n            // }\r\n        }\r\n        else if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n"],"sourceRoot":""}