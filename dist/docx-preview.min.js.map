{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/common/part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/parser/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/common/package.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/parser/paragraph.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","load","pkg","loadRelationships","this","then","rels","Part","appendClass","classList","className","element","si","lastIndexOf","substring","wordml","elements","elem","namespaceURI","localName","result","childNodes","length","nodeType","push","stringAttr","getAttributeNS","colorAttr","val","lengthAttr","usage","LengthUsage","Dxa","parseInt","mul","type","unit","parseBorder","color","size","Border","defaultValue","Emu","FontSize","Percent","LineHeight","e","left","top","right","botton","RelationshipTypes","xmlParser","map","id","attr","target","targetMode","DomType","parseColumns","numberOfColumns","xml","intAttr","space","separator","boolAttr","equalWidth","columns","width","section","pageSize","height","orientation","pageMargins","bottom","header","footer","gutter","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","WordDocument","doc","render","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","Package","find","x","OfficeDocument","loadRelationshipPart","Promise","resolve","exists","part","documentPart","DocumentPart","FontTable","fontTablePart","FontTablePart","Numbering","numberingPart","NumberingPart","Styles","stylesPart","StylesPart","folder","splitPath","rel","all","loadDocumentImage","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","replace","numbers","Array","substr","el","fonts","parseFonts","parseFont","family","altName","fontKey","refId","_zip","XmlParser","files","file","async","parse","relsPath","parseRelationships","xmlString","skipDeclaration","DOMParser","parseFromString","firstChild","item","nodeName","attributes","a","node","attrName","floatAttr","parseFloat","_documentParser","body","parseDocumentFile","numberings","parseNumberingFile","styles","parseStylesFile","autos","shd","highlight","SizeType","Document","children","style","props","xbody","byTagName","foreach","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","basedOn","rPr","values","parseDefaultProperties","pPr","parseCommonProperties","fontSize","isDefault","linked","aliases","split","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","src","parseNumberingLevel","level","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","Run","parent","Hyperlink","anchor","href","Text","text","textContent","fldCharType","Break","break","font","char","Tab","instrText","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","output","tagName","cb","defValue","autoColor","v","convertSize","indexOf","intVal","trim","b","checkMask","num","mask","tabs","position","leader","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","htmlDocument","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontsPart","f","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","pBreakIndex","rBreakIndex","findIndex","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","display","textIndent","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}","export const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    botton: Border;\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length, LengthType, ns, Border, Borders } from \"../dom/common\";\r\n\r\nexport function elements(elem: Element, namespaceURI: string = null, localName: string = null): Element[] {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < elem.childNodes.length; i++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if (n.nodeType == 1\r\n            && (namespaceURI == null || n.namespaceURI == namespaceURI)\r\n            && (localName == null || (n as Element).localName == localName))\r\n            result.push(n);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function stringAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    return elem.getAttributeNS(namespaceURI, name);\r\n}\r\n\r\nexport function intAttr(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function colorAttr(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function boolAttr(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if (val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function lengthAttr(elem: Element, namespaceURI: string, name: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseBorder(elem: Element): Border {\r\n    return {\r\n        type: stringAttr(elem, ns.wordml, \"val\"),\r\n        color: colorAttr(elem, ns.wordml, \"color\"),\r\n        size: lengthAttr(elem, ns.wordml, \"sz\", LengthUsage.Border)\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e); break;\r\n            case \"top\": result.top = parseBorder(e); break;\r\n            case \"right\": result.right = parseBorder(e); break;\r\n            case \"botton\": result.botton = parseBorder(e); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { SectionProperties } from \"../dom/document\";\r\nimport { ns, Columns, Column } from \"../dom/common\";\r\nimport * as xml from './common';\r\n\r\nexport function parseSectionProperties(elem: Element): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                    height: xml.lengthAttr(e, ns.wordml, \"h\"),\r\n                    orientation: xml.stringAttr(e, ns.wordml, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.stringAttr(e, ns.wordml, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, ns.wordml, \"left\"),\r\n                    right: xml.lengthAttr(e, ns.wordml, \"right\"),\r\n                    top: xml.lengthAttr(e, ns.wordml, \"top\"),\r\n                    bottom: xml.lengthAttr(e, ns.wordml, \"bottom\"),\r\n                    header: xml.lengthAttr(e, ns.wordml, \"header\"),\r\n                    footer: xml.lengthAttr(e, ns.wordml, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, ns.wordml, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, ns.wordml, \"num\"),\r\n        space: xml.lengthAttr(elem, ns.wordml, \"space\"),\r\n        separator: xml.boolAttr(elem, ns.wordml, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, ns.wordml, \"equalWidth\", true),\r\n        columns: xml.elements(elem, ns.wordml, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, ns.wordml, \"w\"),\r\n                space: xml.lengthAttr(e, ns.wordml, \"space\")\r\n            })\r\n    };\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then((el) => {\r\n                    this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","export class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1)\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && c.nodeName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\n\r\nexport class NumberingPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.numberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/dom\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.styles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomSubStyle, IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ns, CommonProperties } from './dom/common';\r\nimport { lengthAttr, colorAttr, LengthUsage } from './parser/common';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { parseParagraphProperties } from './parser/paragraph';\r\nimport { parseSectionProperties } from './parser/section';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != ns.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = colorAttr(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = lengthAttr(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            if(parseParagraphProperties(c, paragraph.props))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { type: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        let spacing = null;\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { ParagraphTab, ParagraphProperties, ParagraphNumbering, LineSpacing } from \"../dom/paragraph\";\r\nimport * as xml from \"./common\";\r\nimport { ns } from \"../dom/common\";\r\nimport { parseSectionProperties } from \"./section\";\r\n\r\nexport function parseParagraphProperties(elem: Element, props: ParagraphProperties) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem);\r\n            return false; // TODO\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction parseTabs(elem: Element): ParagraphTab[] {\r\n    return xml.elements(elem, ns.wordml, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, ns.wordml, \"pos\"),\r\n            leader: xml.stringAttr(e, ns.wordml, \"leader\"),\r\n            style: xml.stringAttr(e, ns.wordml, \"val\")\r\n        });\r\n}\r\n\r\nfunction parseNumbering(elem: Element): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem, ns.wordml)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.stringAttr(e, ns.wordml, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, ns.wordml, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction parseLineSpacing(elem: Element): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, ns.wordml, \"before\"),\r\n        after: xml.lengthAttr(elem, ns.wordml, \"after\"),\r\n        line: xml.intAttr(elem, ns.wordml, \"line\"),\r\n        lineRule: xml.stringAttr(elem, ns.wordml, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement, SectionProperties } from './dom/document';\r\nimport { ParagraphElement} from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.numberings, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n            \r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.props.numbering) {\r\n            var numberingClass = this.numberingClass(elem.props.numbering.id, elem.props.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}