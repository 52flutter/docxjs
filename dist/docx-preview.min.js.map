{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/config.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/dom/body.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/border.ts","webpack://docx/./src/dom/break.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/document.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/drawing.ts","webpack://docx/./src/dom/fieldChar.ts","webpack://docx/./src/dom/hyperlink.ts","webpack://docx/./src/dom/image.ts","webpack://docx/./src/dom/instructions.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/dom/symbol.ts","webpack://docx/./src/dom/tab.ts","webpack://docx/./src/dom/table-cell.ts","webpack://docx/./src/dom/table-row.ts","webpack://docx/./src/dom/table.ts","webpack://docx/./src/dom/text.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/parser/xml-serialize.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__792__","_zip","xmlParser","XmlParser","exists","path","this","files","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","text","parseRelationships","parseXmlString","firstElementChild","_package","all","rels","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","trimXmlDeclaration","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","parseDocumentFile","xmlDoc","result","DocumentElement","body","BodyElement","xbody","element","xml","foreach","elem","localName","children","push","parseParagraph","parseTable","sectionProps","parseSectionProperties","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","deserializeElement","ParagraphElement","parseRun","parseHyperlink","paragraph","cssStyle","parseParagraphProperty","props","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","HyperlinkElement","RunElement","breakElem","BreakElement","d","parseDrawing","run","Object","assign","parseDrawingWrapper","DrawingElement","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","textContent","sizeValue","g","parseGraphic","graphicData","parsePicture","ImageElement","blipFill","blip","spPr","xfrm","TableElement","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","TableRowElement","parseTableCell","parseTableRowProperties","row","TableCellElement","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","default","data","bodyContainer","styleContainer","userOptions","parser","renderer","HtmlRenderer","window","document","options","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","WordDocument","doc","render","DocxContainer","fromAttribute","BookmarkStartElement","DocxElement","BookmarkEndElement","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","ns","wordml","mul","unit","LineHeight","usage","value","pkg","_documentParser","documentElement","DocumentPart","FieldCharElement","parse","anchor","fromText","InstructionTextElement","namespaceURI","tabs","parseTabs","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","TextElement","SymbolElement","TabElement","parseRunProperty","border","fonts","parseRunFonts","shading","parseShading","spacing","stretch","percentageAttr","fontSize","bold","strike","doubleStrike","italics","underline","caps","smallCaps","imprint","outline","verticalAlignment","hAscii","cs","eastAsia","foreground","background","parseColumns","numberOfColumns","space","separator","equalWidth","SectionType","section","pageSize","height","orientation","pageMargins","header","footer","gutter","parseFonts","FontTablePart","el","family","altName","fontKey","refId","htmlDocument","domStyleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","domStyles","styleMap","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","p","pBreakIndex","rBreakIndex","findIndex","r","t","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","renderColor","test","listStyleType","styleText","rootCounters","numberingClass","num","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","loadNumberingImage","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderParagraphProperties","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderText","renderSymbol","renderTab","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderChildren","into","elems","$$docxElement","renderClass","renderStyleValues","appendClass","styleClassName","renderLineSpacing","renderRunProperties","renderShading","renderBorder","renderRunFonts","renderUnderline","renderRunVerticalAlignment","href","display","textIndent","loadDocumentImage","createTextNode","fontFamily","font","innerHTML","char","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","borderBottom","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","XMLSerializer","serializeToString","item","attributes","defaultValue","floatAttr","parseFloat","convertPercentage","convertLength","globalXmlParser","schemaSymbol","Symbol","deserializeSchema","schema","prop","convert","getPrototypeXmlSchema","proto","prototype","elemName","schemaObj","$attr","getPrototypeOf","child","obj","create","pPrElem","rPrElem","customStyle","link","autoRedefine","hidden","semiHidden","locked","uiPriority","parseStylesPart","keyBy","defaults","parseDocumentDefaults","StylesPart","classList","si","lastIndexOf","array","by","reduce","parts","partsMap","blob","_parser","OfficeDocument","loadRelationshipPart","part","FontTable","Numbering","Styles","folder","rel","loadResource","URL","createObjectURL","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,UACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,SAAUJ,GACQ,iBAAZC,QACdA,QAAc,KAAID,EAAQG,QAAQ,UAElCJ,EAAW,KAAIC,EAAQD,EAAY,OARrC,CASGO,MAAM,SAASC,GAClB,M,iHCVA,aACA,SACA,SACA,SAEA,aAGI,WAAoBC,GAAA,KAAAA,OAFpB,KAAAC,UAAuB,IAAI,EAAAC,UAwC/B,OAnCI,YAAAC,OAAA,SAAOC,GACH,OAAgC,MAAzBC,KAAKL,KAAKM,MAAMF,IAG3B,YAAAG,OAAA,SAAOH,EAAcI,GACjBH,KAAKL,KAAKS,KAAKL,EAAMI,IAGlB,EAAAE,KAAP,SAAYC,GACR,OAAOC,EAAMC,UAAUF,GAAOG,MAAK,SAAAC,GAAO,WAAIC,EAAeD,OAGjE,YAAAE,KAAA,SAAKC,GACD,YADC,IAAAA,MAAA,QACMb,KAAKL,KAAKmB,cAAc,CAAED,KAAI,KAGzC,YAAAR,KAAA,SAAKN,EAAcc,G,QACf,OAAyC,QAAlC,EAAqB,QAArB,EAAAb,KAAKL,KAAKM,MAAMF,UAAK,eAAEgB,MAAMF,UAAK,QAAIG,QAAQC,QAAQ,OAGjE,YAAAC,kBAAA,SAAkBnB,GAAlB,gBAAkB,IAAAA,MAAA,MACd,IAAIoB,EAAW,cAEf,GAAY,MAARpB,EAAc,CACV,MAAU,EAAAqB,UAAUrB,GACxBoB,EADM,KACS,SADL,KACgB,QAG9B,OAAOnB,KAAKK,KAAKc,EAAU,UAAUV,MAAK,SAAAY,GACtC,GAAKA,EAGL,OAAO,EAAAC,mBAAmB,EAAAC,eAAeF,GAAMG,kBAAmB,EAAK5B,eAGnF,EAzCA,GAAa,EAAAe,kB,6ECLb,aAIA,aAKI,WAAsBc,EAAiC1B,GAAjC,KAAA0B,WAAiC,KAAA1B,OAqB3D,OAlBI,YAAAM,KAAA,sBACI,OAAOW,QAAQU,IAAI,CACf1B,KAAKyB,SAASP,kBAAkBlB,KAAKD,MAAMU,MAAK,SAAAkB,GAC5C,EAAKA,KAAOA,KAEhB3B,KAAKyB,SAASpB,KAAKL,KAAKD,KAAM,UAAUU,MAAK,SAAAY,GACzC,EAAKO,aAAe,EAAAL,eAAeF,GACnC,EAAKQ,SAAS,EAAKD,aAAaJ,yBAK5C,YAAAZ,KAAA,WACIZ,KAAKyB,SAASvB,OAAOF,KAAKD,KAAM,EAAA+B,mBAAmB9B,KAAK4B,gBAGlD,YAAAC,SAAV,SAAmB3C,KAEvB,EA1BA,GAAa,EAAA6C,Q,YCKb,IAAYC,E,kGAAAA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KACzB,oGACA,4FACA,oFACA,4FACA,sFACA,+FACA,oFACA,0FACA,gGACA,4FAGJ,8BAAmC9C,EAAeU,GAC9C,OAAOA,EAAUqC,SAAS/C,GAAMgD,KAAI,SAAAC,GAAK,OACrCC,GAAIxC,EAAUyC,KAAKF,EAAG,MACtBtB,KAAMjB,EAAUyC,KAAKF,EAAG,QACxBG,OAAQ1C,EAAUyC,KAAKF,EAAG,UAC1BI,WAAY3C,EAAUyC,KAAKF,EAAG,oB,6DC3BtC,UAAe,CACXK,oBAAoB,I,+FCAxB,aACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,QACA,SACA,SACA,SACA,QACA,SACA,SAEW,EAAAC,MAAQ,CACfC,IAAK,QACLC,MAAO,QACPC,UAAW,eAGf,IAw/BKC,EAx/BL,0BAEI,KAAAC,iBAA2B,EAG3B,KAAAC,aAAuB,EACvB,KAAAC,OAAiB,EAg/BrB,OA9+BI,YAAAC,kBAAA,SAAkBC,GAAlB,WACUC,EAAS,IAAI,EAAAC,gBAEnBD,EAAOE,KAAO,IAAI,EAAAC,YAElB,IAAIC,EAAQ,UAAgBC,QAAQN,EAAQ,QAkB5C,OAhBAO,EAAIC,QAAQH,GAAO,SAAAI,GACf,OAAQA,EAAKC,WACT,IAAK,IACDT,EAAOE,KAAKQ,SAASC,KAAK,EAAKC,eAAeJ,IAC9C,MAEJ,IAAK,MACDR,EAAOE,KAAKQ,SAASC,KAAK,EAAKE,WAAWL,IAC1C,MAEJ,IAAK,SACDR,EAAOE,KAAKY,aAAe,EAAAC,uBAAuBP,EAAM,eAK7DR,GAGX,YAAAgB,gBAAA,SAAgBC,GAAhB,WACQjB,EAAS,GAcb,OAZAM,EAAIC,QAAQU,GAAS,SAAAC,GACjB,OAAQA,EAAET,WACN,IAAK,QACDT,EAAOW,KAAK,EAAKQ,WAAWD,IAC5B,MAEJ,IAAK,cACDlB,EAAOW,KAAK,EAAKS,mBAAmBF,QAKzClB,GAGX,YAAAoB,mBAAA,SAAmBC,GAAnB,WACQrB,EAAoB,CACpBf,GAAI,KACJqC,KAAM,KACNnC,OAAQ,KACRoC,QAAS,KACTC,OAAQ,IA2BZ,OAxBAlB,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,aACD,IAAIiB,EAAM,UAAgBrB,QAAQoB,EAAG,OAEjCC,GACA1B,EAAOwB,OAAOb,KAAK,CACfxB,OAAQ,OACRwC,OAAQ,EAAKC,uBAAuBF,EAAK,MAEjD,MAEJ,IAAK,aACD,IAAIG,EAAM,UAAgBxB,QAAQoB,EAAG,OAEjCI,GACA7B,EAAOwB,OAAOb,KAAK,CACfxB,OAAQ,IACRwC,OAAQ,EAAKC,uBAAuBC,EAAK,UAMtD7B,GAGX,YAAAmB,WAAA,SAAWE,GAAX,WACQrB,EAAoB,CACpBf,GAAIqB,EAAIwB,WAAWT,EAAM,WACzBU,UAAWzB,EAAI0B,SAASX,EAAM,WAC9BC,KAAM,KACNnC,OAAQ,KACRoC,QAAS,KACTC,OAAQ,GACRS,OAAQ,MAGZ,OAAQ3B,EAAIwB,WAAWT,EAAM,SACzB,IAAK,YAAarB,EAAOb,OAAS,IAAK,MACvC,IAAK,QAASa,EAAOb,OAAS,QAAS,MACvC,IAAK,YAAaa,EAAOb,OAAS,OAqEtC,OAlEAmB,EAAIC,QAAQc,GAAM,SAAAH,GACd,OAAQA,EAAET,WACN,IAAK,UACDT,EAAOuB,QAAUjB,EAAI4B,UAAUhB,EAAG,OAClC,MAEJ,IAAK,OACDlB,EAAOsB,KAAOhB,EAAIwB,WAAWZ,EAAG,OAChC,MAEJ,IAAK,OACDlB,EAAOiC,OAAS3B,EAAI4B,UAAUhB,EAAG,OACjC,MAEJ,IAAK,OACDlB,EAAOmC,KAAO7B,EAAI4B,UAAUhB,EAAG,OAC/B,MAEJ,IAAK,UACDlB,EAAOoC,QAAU9B,EAAIwB,WAAWZ,EAAG,OAAOmB,MAAM,KAChD,MAEJ,IAAK,MACDrC,EAAOwB,OAAOb,KAAK,CACfxB,OAAQ,IACRwC,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3ClB,EAAOsC,eAAiB,EAAAC,yBAAyBrB,EAAG,WACpD,MAEJ,IAAK,MACDlB,EAAOwB,OAAOb,KAAK,CACfxB,OAAQ,OACRwC,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3ClB,EAAOwC,SAAW,EAAAC,mBAAmBvB,EAAG,WACxC,MAEJ,IAAK,QACL,IAAK,OACDlB,EAAOwB,OAAOb,KAAK,CACfxB,OAAQ,KACRwC,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3C,MAEJ,IAAK,aACD,IAAc,YAAKwB,gBAAgBxB,GAArB,eAAuB,CAAhC,IAAIyB,EAAC,KACN3C,EAAOwB,OAAOb,KAAKgC,GACvB,MAEJ,IAAK,OACL,IAAK,UACL,IAAK,SACL,IAAK,aACL,IAAK,iBACL,IAAK,eACL,IAAK,aAED,MAEJ,QACI,EAAK9C,OAAS+C,QAAQC,KAAK,gCAAgC3B,EAAET,eAIlET,GAGX,YAAA0C,gBAAA,SAAgBrB,GAAhB,WACQrB,EAAS,GAETtC,EAAO4C,EAAIwB,WAAWT,EAAM,QAC5ByB,EAAW,GAEf,OAAQpF,GACJ,IAAK,WAAYoF,EAAW,kBAAmB,MAC/C,IAAK,UAAWA,EAAW,iBAAkB,MAC7C,IAAK,WAAYA,EAAW,eAAgB,MAC5C,IAAK,UAAWA,EAAW,cAAe,MAC1C,IAAK,YAAaA,EAAW,aAAc,MAC3C,IAAK,YAAaA,EAAW,cAAe,MAC5C,IAAK,YAAaA,EAAW,aAAc,MAC3C,IAAK,YAAaA,EAAW,cAAe,MAC5C,QAAS,MAAO,GA6BpB,OA1BAxC,EAAIC,QAAQc,GAAM,SAAAH,GACd,OAAQA,EAAET,WACN,IAAK,MACDT,EAAOW,KAAK,CACRxB,OAAQ2D,EAAW,KACnBnB,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3C,MAEJ,IAAK,MACDlB,EAAOW,KAAK,CACRxB,OAAQ2D,EAAW,QACnBnB,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3C,MAEJ,IAAK,QACL,IAAK,OACDlB,EAAOW,KAAK,CACRxB,OAAQ2D,EACRnB,OAAQ,EAAKC,uBAAuBV,EAAG,UAMhDlB,GAGX,YAAA+C,mBAAA,SAAmBC,GAAnB,WACQhD,EAAS,GACTiD,EAAU,GACVC,EAAU,GAuBd,OArBA5C,EAAIC,QAAQyC,GAAO,SAAA9B,GACf,OAAQA,EAAET,WACN,IAAK,cACD,EAAK0C,uBAAuBjC,EAAGgC,GAC1BE,SAAQ,SAAAC,GAAK,OAAArD,EAAOW,KAAK0C,MAC9B,MAEJ,IAAK,eACDH,EAAQvC,KAAK,EAAK2C,wBAAwBpC,IAC1C,MAEJ,IAAK,MACD,IAAIqC,EAAQjD,EAAIwB,WAAWZ,EAAG,SAC1BsC,EAAgBlD,EAAImD,kBAAkBvC,EAAG,gBAAiB,OAC9D+B,EAAQO,GAAiBD,MAKrCvD,EAAOoD,SAAQ,SAAAC,GAAK,OAAAA,EAAEpE,GAAKgE,EAAQI,EAAEpE,OAE9Be,GAGX,YAAAsD,wBAAA,SAAwB9C,GACpB,IAAIkD,EAAO,UAAgBrD,QAAQG,EAAM,QACrCmD,EAAQD,GAAQ,UAAgBrD,QAAQqD,EAAM,SAC9CE,EAAYD,GAAS,UAAgBtD,QAAQsD,EAAO,aAExD,OAAOC,EAAY,CACf3E,GAAIqB,EAAIuD,QAAQrD,EAAM,kBACtBsD,IAAKxD,EAAIwB,WAAW8B,EAAW,MAC/BG,MAAOzD,EAAIwB,WAAW6B,EAAO,UAC7B,MAGR,YAAAR,uBAAA,SAAuB9B,EAAe6B,GAAtC,WACQlD,EAAS,GACTf,EAAKqB,EAAIwB,WAAWT,EAAM,iBAU9B,OARAf,EAAIC,QAAQc,GAAM,SAAAH,GACd,OAAQA,EAAET,WACN,IAAK,MACDT,EAAOW,KAAK,EAAKqD,oBAAoB/E,EAAIiC,EAAGgC,QAKjDlD,GAGX,YAAAgE,oBAAA,SAAoB/E,EAAYoC,EAAe6B,GAA/C,WACQlD,EAAwB,CACxBf,GAAIA,EACJgF,MAAO3D,EAAIuD,QAAQxC,EAAM,QACzB0C,MAAO,IAwBX,OArBAzD,EAAIC,QAAQc,GAAM,SAAAH,GACd,OAAQA,EAAET,WACN,IAAK,MACD,EAAKmB,uBAAuBV,EAAGlB,EAAO+D,OACtC,MAEJ,IAAK,iBACD,IAAI9E,EAAKqB,EAAIuD,QAAQ3C,EAAG,OACxBlB,EAAOkE,OAAShB,EAAQiB,QAAO,SAAAd,GAAK,OAAAA,EAAEpE,IAAMA,KAAI,GAChD,MAEJ,IAAK,UACDe,EAAOoE,UAAY9D,EAAIwB,WAAWZ,EAAG,OACrC,MAEJ,IAAK,SACDlB,EAAOqE,OAAS/D,EAAIwB,WAAWZ,EAAG,WAKvClB,GAIX,YAAAY,eAAA,SAAeS,GAAf,WACUrB,EAAS,EAAAsE,mBAAmBjD,EAAM,IAAI,EAAAkD,kBAkB5C,OAhBAjE,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,IACDT,EAAOU,SAASC,KAAK,EAAK6D,SAAS/C,EAAGzB,IACtC,MAEJ,IAAK,YACDA,EAAOU,SAASC,KAAK,EAAK8D,eAAehD,EAAGzB,IAC5C,MAEJ,IAAK,MACD,EAAKuC,yBAAyBd,EAAGzB,OAKtCA,GAGX,YAAAuC,yBAAA,SAAyB/B,EAAekE,GAAxC,WACI7H,KAAK+E,uBAAuBpB,EAAMkE,EAAUC,SAAW,GAAI,MAAM,SAAAlD,GAC7D,GAAG,EAAAmD,uBAAuBnD,EAAGiD,EAAUG,MAAO,WAC1C,OAAO,EAEX,OAAQpD,EAAEhB,WACN,IAAK,SACDqE,EAAMC,gBAAgBL,EAAWpE,EAAI4B,UAAUT,EAAG,QAClD,MAEJ,IAAK,WACDqD,EAAMC,gBAAgBL,EAAW/C,EAAOqD,oBAAoBvD,IAC5D,MAEJ,IAAK,UACD,EAAKwD,WAAWxD,EAAGiD,GACnB,MAEJ,IAAK,MAED,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAO,WAAA,SAAW5D,EAAeqD,GAGP,QAFDpE,EAAIwB,WAAWT,EAAM,aAG/BqD,EAAUC,SAAgB,MAAI,SAGtC,YAAAF,eAAA,SAAepD,EAAe6D,GAA9B,WACQlF,EAAS,EAAAsE,mBAAmBjD,EAAM,IAAI,EAAA8D,iBAAiBD,IAU3D,OARA5E,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,IACDT,EAAOU,SAASC,KAAK,EAAK6D,SAAS/C,EAAGzB,QAK3CA,GAGX,YAAAwE,SAAA,SAASnD,EAAe6D,GAAxB,WACQlF,EAAS,EAAAsE,mBAAmBjD,EAAM,IAAI,EAAA+D,WAAWF,IAwBrD,OAtBA5E,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,wBACD,IAAM4E,EAAY,IAAI,EAAAC,aACtBD,EAAU3H,KAAO,OACjBsC,EAAOU,SAASC,KAAK0E,GAErB,MAEJ,IAAK,UACD,IAAIE,EAAI,EAAKC,aAAa/D,GAEtB8D,IACAvF,EAAOU,SAAW,CAAC6E,IACvB,MAEJ,IAAK,MACD,EAAK9C,mBAAmBhB,EAAGzB,OAKhCA,GAGX,YAAAyC,mBAAA,SAAmBjC,EAAeiF,GAE9BC,OAAOC,OAAOF,EAAIZ,MAAO,EAAApC,mBAAmBjC,EAAM,YAElD3D,KAAK+E,uBAAuBpB,EAAMiF,EAAId,SAAW,GAAI,MAAM,SAAAlD,GACvD,OAAQA,EAAEhB,WACN,IAAK,SACDgF,EAAIvD,UAAY5B,EAAI4B,UAAUT,EAAG,OACjC,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAA+D,aAAA,SAAanE,GACT,IAAc,oBAAgBvC,SAASuC,GAAzB,eAAgC,CAAzC,IAAIH,EAAC,KACN,OAAQA,EAAET,WACN,IAAK,SACL,IAAK,SACD,OAAO5D,KAAK+I,oBAAoB1E,MAKhD,YAAA0E,oBAAA,SAAoBvE,GAgBhB,IAfA,IAAIrB,EAAS,IAAI,EAAA6F,eACbC,EAA6B,UAAlBzE,EAAKZ,UAQhBsF,EAAmD,KACnDC,EAAY1F,EAAI0B,SAASX,EAAM,aAE/B4E,EAAO,CAAEC,SAAU,OAAQC,MAAO,OAAQC,OAAQ,KAClDC,EAAO,CAAEH,SAAU,OAAQC,MAAO,MAAOC,OAAQ,KAEvC,gBAAgBtH,SAASuC,GAAzB,eAAgC,CAAzC,IAAIH,EAAC,KACN,OAAQA,EAAET,WACN,IAAK,YACGuF,IACAC,EAAKG,OAAS9F,EAAIgG,SAASpF,EAAG,IAAKxB,EAAS6G,KAC5CF,EAAKD,OAAS9F,EAAIgG,SAASpF,EAAG,IAAKxB,EAAS6G,MAEhD,MAEJ,IAAK,SACDvG,EAAO2E,SAAgB,MAAIrE,EAAIgG,SAASpF,EAAG,KAAMxB,EAAS6G,KAC1DvG,EAAO2E,SAAiB,OAAIrE,EAAIgG,SAASpF,EAAG,KAAMxB,EAAS6G,KAC3D,MAEJ,IAAK,YACL,IAAK,YACD,IAAKP,EAAW,CACZ,IAAIQ,EAAqB,aAAftF,EAAET,UAA2BwF,EAAOI,EAC1CI,EAAY,UAAgBpG,QAAQa,EAAG,SACvCwF,EAAa,UAAgBrG,QAAQa,EAAG,aAExCuF,IACAD,EAAIL,MAAQM,EAAUE,aAEtBD,IACAF,EAAIJ,OAAS9F,EAAIsG,UAAUF,EAAYhH,EAAS6G,MAExD,MAEJ,IAAK,mBACDR,EAAW,mBACX,MAEJ,IAAK,WACDA,EAAW,WACX,MAEJ,IAAK,UACD,IAAIc,EAAIhK,KAAKiK,aAAa5F,GAEtB2F,GACA7G,EAAOU,SAASC,KAAKkG,IA4BrC,MAvBgB,oBAAZd,GACA/F,EAAO2E,SAAkB,QAAI,QAEzBsB,EAAKE,QACLnG,EAAO2E,SAAS,cAAgBsB,EAAKE,MACrCnG,EAAO2E,SAAgB,MAAI,SAGf,YAAZoB,GACJ/F,EAAO2E,SAAkB,QAAI,QAC7B3E,EAAO2E,SAAmB,SAAI,WAC9B3E,EAAO2E,SAAgB,MAAI,MAC3B3E,EAAO2E,SAAiB,OAAI,MAEzBsB,EAAKG,SACJpG,EAAO2E,SAAe,KAAIsB,EAAKG,QAChCC,EAAKD,SACJpG,EAAO2E,SAAc,IAAI0B,EAAKD,UAE7BN,GAA2B,QAAdG,EAAKE,OAAiC,SAAdF,EAAKE,QAC/CnG,EAAO2E,SAAgB,MAAIsB,EAAKE,OAG7BnG,GAGX,YAAA8G,aAAA,SAAatG,GAGT,IAFA,IAAIuG,EAAc,UAAgB1G,QAAQG,EAAM,eAElC,gBAAgB1B,SAASiI,GAAzB,eAAuC,CAAhD,IAAI7F,EAAC,KACN,OAAQA,EAAET,WACN,IAAK,MACD,OAAO5D,KAAKmK,aAAa9F,IAIrC,OAAO,MAGX,YAAA8F,aAAA,SAAaxG,GACT,IAAIR,EAAS,IAAI,EAAAiH,aACbC,EAAW,UAAgB7G,QAAQG,EAAM,YACzC2G,EAAO,UAAgB9G,QAAQ6G,EAAU,QAE7ClH,EAAO8D,IAAMxD,EAAIwB,WAAWqF,EAAM,SAElC,IAAIC,EAAO,UAAgB/G,QAAQG,EAAM,QACrC6G,EAAO,UAAgBhH,QAAQ+G,EAAM,QAEzCpH,EAAO2E,SAAmB,SAAI,WAE9B,IAAc,oBAAgB7F,SAASuI,GAAzB,eAAgC,CAAzC,IAAInG,EAAC,KACN,OAAQA,EAAET,WACN,IAAK,MACDT,EAAO2E,SAAgB,MAAIrE,EAAIgG,SAASpF,EAAG,KAAMxB,EAAS6G,KAC1DvG,EAAO2E,SAAiB,OAAIrE,EAAIgG,SAASpF,EAAG,KAAMxB,EAAS6G,KAC3D,MAEJ,IAAK,MACDvG,EAAO2E,SAAe,KAAIrE,EAAIgG,SAASpF,EAAG,IAAKxB,EAAS6G,KACxDvG,EAAO2E,SAAc,IAAIrE,EAAIgG,SAASpF,EAAG,IAAKxB,EAAS6G,MAKnE,OAAOvG,GAGX,YAAAa,WAAA,SAAWQ,GAAX,WACQrB,EAAS,IAAI,EAAAsH,aAkBjB,OAhBAhH,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,KACDT,EAAOU,SAASC,KAAK,EAAK4G,cAAc9F,IACxC,MAEJ,IAAK,UACDzB,EAAOwH,QAAU,EAAKC,kBAAkBhG,GACxC,MAEJ,IAAK,QACD,EAAKiG,qBAAqBjG,EAAGzB,OAKlCA,GAGX,YAAAyH,kBAAA,SAAkBpG,GACd,IAAIrB,EAAS,GAUb,OARAM,EAAIC,QAAQc,GAAM,SAAAH,GACd,OAAQA,EAAET,WACN,IAAK,UACDT,EAAOW,KAAK,CAAEgH,MAAOrH,EAAIgG,SAASpF,EAAG,WAK1ClB,GAGX,YAAA0H,qBAAA,SAAqBlH,EAAeoH,GAApC,WAyBI,OAxBAA,EAAMjD,SAAW,GACjBiD,EAAMC,UAAY,GAElBhL,KAAK+E,uBAAuBpB,EAAMoH,EAAMjD,SAAUiD,EAAMC,WAAW,SAAApG,GAC/D,OAAQA,EAAEhB,WACN,IAAK,WACDmH,EAAM1F,UAAY5B,EAAI4B,UAAUT,EAAG,OACnC,MAEJ,IAAK,UACDqD,EAAMC,gBAAgB6C,EAAOjG,EAAOmG,mBAAmBrG,IACvD,MAEJ,IAAK,SACD,EAAKsG,mBAAmBtG,EAAGmG,GAC3B,MAEJ,QACI,OAAO,EAGf,OAAO,KAGHA,EAAMjD,SAAS,eACnB,IAAK,gBACMiD,EAAMjD,SAAS,cACtBiD,EAAMjD,SAAS,eAAiB,OAChCiD,EAAMjD,SAAS,gBAAkB,OACjC,MAEJ,IAAK,eACMiD,EAAMjD,SAAS,cACtBiD,EAAMjD,SAAS,eAAiB,SAK5C,YAAAoD,mBAAA,SAAmB1G,EAAeuG,GAC9B,IAAII,EAAc1H,EAAIgG,SAASjF,EAAM,eACjC4G,EAAiB3H,EAAIgG,SAASjF,EAAM,kBACpC6G,EAAgB5H,EAAIgG,SAASjF,EAAM,iBACnC8G,EAAe7H,EAAIgG,SAASjF,EAAM,gBAEtCuG,EAAMjD,SAAgB,MAAI,OAC1BiD,EAAMjD,SAAS,iBAAmBhD,EAAOyG,QAAQR,EAAMjD,SAAS,iBAAkBsD,GAClFL,EAAMjD,SAAS,eAAiBhD,EAAOyG,QAAQR,EAAMjD,SAAS,eAAgBwD,GAC9EP,EAAMjD,SAAS,gBAAkBhD,EAAOyG,QAAQR,EAAMjD,SAAS,gBAAiBuD,GAChFN,EAAMjD,SAAS,cAAgBhD,EAAOyG,QAAQR,EAAMjD,SAAS,cAAeqD,IAGhF,YAAAT,cAAA,SAAclG,GAAd,WACQrB,EAAS,IAAI,EAAAqI,gBAcjB,OAZA/H,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,KACDT,EAAOU,SAASC,KAAK,EAAK2H,eAAe7G,IACzC,MAEJ,IAAK,OACD,EAAK8G,wBAAwB9G,EAAGzB,OAKrCA,GAGX,YAAAuI,wBAAA,SAAwB/H,EAAegI,GACnCA,EAAI7D,SAAW9H,KAAK+E,uBAAuBpB,EAAM,GAAI,MAAM,SAAAiB,GACvD,OAAQA,EAAEhB,WACN,IAAK,WACD+H,EAAItG,UAAYP,EAAOqD,oBAAoBvD,GAC3C,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAA6G,eAAA,SAAejH,GAAf,WACQrB,EAAS,IAAI,EAAAyI,iBAkBjB,OAhBAnI,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,MACDT,EAAOU,SAASC,KAAK,EAAKE,WAAWY,IACrC,MAEJ,IAAK,IACDzB,EAAOU,SAASC,KAAK,EAAKC,eAAea,IACzC,MAEJ,IAAK,OACD,EAAKiH,yBAAyBjH,EAAGzB,OAKtCA,GAGX,YAAA0I,yBAAA,SAAyBlI,EAAemI,GACpCA,EAAKhE,SAAW9H,KAAK+E,uBAAuBpB,EAAM,GAAI,MAAM,SAAAiB,GACxD,OAAQA,EAAEhB,WACN,IAAK,WACDkI,EAAKC,KAAOtI,EAAIuD,QAAQpC,EAAG,MAAO,MAClC,MAEJ,IAAK,SACD,MAEJ,IAAK,WACDkH,EAAKzG,UAAYP,EAAOqD,oBAAoBvD,GAC5C,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAG,uBAAA,SAAuBpB,EAAeuD,EAAsC8E,EAA2CC,GAAvH,WA4HI,YA5HkC,IAAA/E,MAAA,WAAsC,IAAA8E,MAAA,WAA2C,IAAAC,MAAA,MACnH/E,EAAQA,GAAS,GAGjBzD,EAAIC,QAAQC,GAAM,SAAAiB,GACd,OAAQA,EAAEhB,WACN,IAAK,KACDsD,EAAM,cAAgBpC,EAAOoH,UAAUtH,GACvC,MAEJ,IAAK,gBACDsC,EAAM,kBAAoBpC,EAAOqH,qBAAqBvH,GACtD,MAEJ,IAAK,QACDsC,EAAa,MAAIzD,EAAI2I,UAAUxH,EAAG,MAAO,KAAM,EAAAnC,MAAME,OACrD,MAEJ,IAAK,KACDuE,EAAM,aAAeA,EAAM,cAAgBzD,EAAIgG,SAAS7E,EAAG,MAAO/B,EAASwJ,UAC3E,MAEJ,IAAK,MACDnF,EAAM,oBAAsBzD,EAAI2I,UAAUxH,EAAG,OAAQ,KAAM,EAAAnC,MAAMC,KACjE,MAEJ,IAAK,YACDwE,EAAM,oBAAsBzD,EAAI2I,UAAUxH,EAAG,MAAO,KAAM,EAAAnC,MAAMG,WAChE,MAEJ,IAAK,MACD,GAAI,EAAKG,YACL,MAER,IAAK,OACDmE,EAAa,MAAIpC,EAAOwH,YAAY1H,EAAG,KACvC,MAEJ,IAAK,WACD,EAAK2H,cAAc3H,EAAGsC,GACtB,MAEJ,IAAK,SACDA,EAAM,mBAAqBpC,EAAO0H,cAAc5H,GAChD,MAEJ,IAAK,IACDsC,EAAM,eAAiBpC,EAAO2H,YAAY7H,GAC1C,MAEJ,IAAK,IACDsC,EAAM,cAAgB,SACtB,MAEJ,IAAK,IACD,EAAKwF,eAAe9H,EAAGsC,GACvB,MAEJ,IAAK,MACL,IAAK,SACD,EAAKyF,iBAAiB/H,EAAGsC,GACzB,MAEJ,IAAK,SACD,EAAK0F,UAAUhI,EAAGsC,GAClB,MAEJ,IAAK,aACD,EAAK2F,sBAAsBjI,EAAGoH,GAAc9E,GAC5C,MAEJ,IAAK,iBACDA,EAAM,kBAAoBpC,EAAOgI,cAAclI,GAC/CsC,EAAM,mBAAqB,WAC3B,MAEJ,IAAK,OACD,EAAK2F,sBAAsBjI,EAAGsC,GAC9B,MAEJ,IAAK,MACDA,EAAc,OAAIpC,EAAOiI,cAAcnI,GACvC,MAEJ,IAAK,YACD,EAAKiI,sBAAsBjI,EAAGsC,GAC9B,MAEJ,IAAK,SAGD,MAEJ,IAAK,aACL,IAAK,QACD,EAAK8F,sBAAsBpI,EAAGoH,GAAc9E,GAC5C,MAEJ,IAAK,YACDA,EAAM,gBAAkBpC,EAAOmI,iBAAiBrI,GAChD,MAEJ,IAAK,SACDsC,EAAM,kBAAoBzD,EAAIwB,WAAWL,EAAG,OAC5C,MAEJ,IAAK,UACqB,OAAlBjB,EAAKC,WACL,EAAKsJ,aAAatI,EAAGsC,GACzB,MAEJ,IAAK,OACL,IAAK,UACL,IAAK,YAED,MAEJ,QACmB,MAAX+E,GAAoBA,EAAQrH,IAC5B,EAAK5B,OAAS+C,QAAQC,KAAK,mCAAmCpB,EAAEhB,eAKzEsD,GAGX,YAAAwF,eAAA,SAAelI,EAAe0C,GAC1B,IAAIiG,EAAM1J,EAAIwB,WAAWT,EAAM,OAE/B,GAAW,MAAP2I,GAAsB,QAAPA,EAAnB,CAGA,OAAQA,GACJ,IAAK,OACL,IAAK,kBACL,IAAK,eACL,IAAK,cACL,IAAK,WACL,IAAK,gBACL,IAAK,UACL,IAAK,aACDjG,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,cACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,QACDA,EAAM,mBAAqB,YAC3B,MAEJ,IAAK,OACL,IAAK,aACL,IAAK,YACDA,EAAM,yBAA2B,OACjC,MAEJ,IAAK,QACDA,EAAM,mBAAqB,YAInC,IAAIkG,EAAM3J,EAAI2I,UAAU5H,EAAM,SAE1B4I,IACAlG,EAAM,yBAA2BkG,KAGzC,YAAAR,UAAA,SAAUpI,EAAe0C,GACrB,IAAImG,EAAQ5J,EAAIwB,WAAWT,EAAM,SAE7B6I,IACAnG,EAAM,eAAiBmG,IAG/B,YAAAV,iBAAA,SAAiBnI,EAAe0C,GAC5B,IAAIoG,EAAY7J,EAAIgG,SAASjF,EAAM,aAC/B+I,EAAO9J,EAAIgG,SAASjF,EAAM,QAC1BgJ,EAAQ/J,EAAIgG,SAASjF,EAAM,SAC3BiJ,EAAQhK,EAAIgG,SAASjF,EAAM,SAC3BkJ,EAAMjK,EAAIgG,SAASjF,EAAM,OAEzB8I,IAAWpG,EAAM,eAAiBoG,IAClCC,GAAQC,KAAOtG,EAAM,eAAiBqG,GAAQC,IAC9CC,GAASC,KAAKxG,EAAM,gBAAkBuG,GAASC,IAGvD,YAAAR,aAAA,SAAa1I,EAAe0C,GACxB,IAAIyG,EAASlK,EAAIgG,SAASjF,EAAM,UAC5BoJ,EAAQnK,EAAIgG,SAASjF,EAAM,SAC3BqJ,EAAOpK,EAAIuD,QAAQxC,EAAM,OAAQ,MACjCsJ,EAAWrK,EAAIwB,WAAWT,EAAM,YAKpC,GAHImJ,IAAQzG,EAAM,cAAgByG,GAC9BC,IAAO1G,EAAM,iBAAmB0G,GAEvB,OAATC,EACA,OAAOC,GACH,IAAK,OACD5G,EAAM,eAAiB,IAAI2G,EAAO,KAAKE,QAAQ,GAC/C,MAEJ,IAAK,UACD7G,EAAM,eAAiB,eAAe2G,EAAO,GAAE,MAC/C,MAEJ,QACI3G,EAAM,eAAiBA,EAAM,cAAmB2G,EAAO,GAAE,OAMzE,YAAAb,sBAAA,SAAsBxI,EAAewJ,GACjCvK,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,OACDoK,EAAO,gBAAkBlJ,EAAOgI,cAAclI,GAC9C,MAEJ,IAAK,QACDoJ,EAAO,iBAAmBlJ,EAAOgI,cAAclI,GAC/C,MAEJ,IAAK,MACDoJ,EAAO,eAAiBlJ,EAAOgI,cAAclI,GAC7C,MAEJ,IAAK,SACDoJ,EAAO,kBAAoBlJ,EAAOgI,cAAclI,QAMhE,YAAA2H,cAAA,SAAc/H,EAAewJ,GACzB,OAAQvK,EAAIwB,WAAWT,EAAM,UACzB,IAAK,QACDwJ,EAAe,OAAIvK,EAAIgG,SAASjF,EAAM,OACtC,MAEJ,IAAK,UACL,QACIwJ,EAAe,OAAIvK,EAAIgG,SAASjF,EAAM,SAOlD,YAAAqI,sBAAA,SAAsBrI,EAAewJ,GACjCvK,EAAIC,QAAQc,GAAM,SAAAI,GACd,OAAQA,EAAEhB,WACN,IAAK,QACL,IAAK,OACDoK,EAAO,eAAiBlJ,EAAOiI,cAAcnI,GAC7C,MAEJ,IAAK,MACL,IAAK,QACDoJ,EAAO,gBAAkBlJ,EAAOiI,cAAcnI,GAC9C,MAEJ,IAAK,MACDoJ,EAAO,cAAgBlJ,EAAOiI,cAAcnI,GAC5C,MAEJ,IAAK,SACDoJ,EAAO,iBAAmBlJ,EAAOiI,cAAcnI,QAKnE,EAt/BA,GAAa,EAAAqJ,iBAw/Bb,SAAKpL,GACD,2BACA,iBACA,iBACA,uBACA,yBALJ,CAAKA,MAAQ,KAQb,+BAwEA,OAvEW,EAAAa,QAAP,SAAec,EAAe0J,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAI3J,EAAK4J,WAAWC,OAAQF,IAAK,CAC7C,IAAI9J,EAAIG,EAAK4J,WAAWD,GAEN,GAAd9J,EAAEiK,UACFJ,EAAY7J,KAIjB,EAAAuC,kBAAP,SAAyBjD,EAAe4K,EAAUC,GAC9C,IAAInK,EAAI,UAAgBb,QAAQG,EAAM4K,GACtC,OAAOlK,EAAIZ,EAAIwB,WAAWZ,EAAGmK,GAAY,MAGtC,EAAAvJ,WAAP,SAAkBT,EAAegK,GAC7B,OAAO,UAAgBnM,KAAKmC,EAAMgK,IAG/B,EAAApC,UAAP,SAAiB5H,EAAegK,EAAkBC,EAAyBC,QAAzB,IAAAD,MAAA,WAAyB,IAAAC,MAAA,SACvE,IAAIC,EAAIlL,EAAIwB,WAAWT,EAAMgK,GAE7B,OAAQG,GACJ,IAAK,SACD,OAAOA,EAEX,IAAK,OACD,OAAOD,EAGf,OAAOC,EAAI,IAAIA,EAAMF,GAGlB,EAAAtJ,SAAP,SAAgBX,EAAegK,EAAkBC,GAC7C,YAD6C,IAAAA,OAAA,GACtC,UAAgBtJ,SAASX,EAAMgK,EAAUC,IAG7C,EAAAzH,QAAP,SAAexC,EAAegK,EAAkBC,GAE5C,YAF4C,IAAAA,MAAA,GAClChL,EAAIwB,WAAWT,EAAMgK,GAClBI,SAASnL,EAAIwB,WAAWT,EAAMgK,IAAaC,GAGrD,EAAAhF,SAAP,SAAgBjF,EAAegK,EAAkB3N,GAC7C,YAD6C,IAAAA,MAAiBgC,EAASgM,KAChEpL,EAAIqL,YAAYrL,EAAIwB,WAAWT,EAAMgK,GAAW3N,IAGpD,EAAAkJ,UAAP,SAAiBvF,EAAe3D,GAC5B,YAD4B,IAAAA,MAAiBgC,EAASgM,KAC/CpL,EAAIqL,YAAYtK,EAAKsF,YAAajJ,IAGtC,EAAAiO,YAAP,SAAmB3B,EAAatM,GAC5B,QAD4B,IAAAA,MAAiBgC,EAASgM,KAC3C,MAAP1B,GAAeA,EAAI4B,QAAQ,OAAS,EACpC,OAAO5B,EAEX,IAAI6B,EAASJ,SAASzB,GAEtB,OAAQtM,GACJ,KAAKgC,EAASgM,IAAK,OAAQ,IAAOG,GAAQjB,QAAQ,GAAK,KACvD,KAAKlL,EAAS6G,IAAK,OAAQsF,EAAS,OAAOjB,QAAQ,GAAK,KACxD,KAAKlL,EAASwJ,SAAU,OAAQ,GAAM2C,GAAQjB,QAAQ,GAAK,KAC3D,KAAKlL,EAASoM,OAAQ,OAAQ,KAAQD,GAAQjB,QAAQ,GAAK,KAC3D,KAAKlL,EAASqM,QAAS,OAAQ,IAAOF,GAAQjB,QAAQ,GAAK,IAG/D,OAAOZ,GAGJ,EAAA9H,UAAP,SAAiBb,EAAegK,GAC5B,IAAIrB,EAAM1J,EAAIwB,WAAWT,EAAMgK,GAE/B,OAAOrB,GAAOA,EAAIgC,QAAQ,SAAU,KAAKA,QAAQ,QAAS,QAElE,EAxEA,GA0EA,2BA8GA,OA7GW,EAAA1C,YAAP,SAAmB7H,GACf,OAAOnB,EAAI0B,SAASP,EAAG,OAAO,GAAQ,OAAS,UAG5C,EAAA0H,YAAP,SAAmB1H,EAAYvC,GAC3B,IAAIxB,EAAiBgC,EAASgM,IAE9B,OAAQpL,EAAIwB,WAAWL,EAAG,SACtB,IAAK,MAAO,MACZ,IAAK,MAAO/D,EAAOgC,EAASqM,QAGhC,OAAOzL,EAAIgG,SAAS7E,EAAGvC,EAAMxB,IAG1B,EAAA2L,cAAP,SAAqB5H,GACjB,OAAOnB,EAAI0B,SAASP,EAAG,OAAO,GAAQ,eAAiB,QAGpD,EAAAkI,cAAP,SAAqBlI,GACjB,OAAOnB,EAAIgG,SAAS7E,EAAG,MAGpB,EAAAmI,cAAP,SAAqBnI,GAGjB,GAAY,OAFDnB,EAAIwB,WAAWL,EAAG,OAGzB,MAAO,OAEX,IAAIjC,EAAQc,EAAI2I,UAAUxH,EAAG,SAG7B,OAFWnB,EAAIgG,SAAS7E,EAAG,KAAM/B,EAASoM,QAE5B,WAAmB,QAATtM,EAAkB,QAAUA,IAGjD,EAAAsK,iBAAP,SAAwBrI,GAEpB,MAAe,SADJnB,EAAIwB,WAAWL,EAAG,OACJ,QAAU,QAGhC,EAAAuD,oBAAP,SAA2BvD,GACvB,IAAIS,EAAY,GACZ8H,EAAM1J,EAAIwB,WAAWL,EAAG,OAgB5B,MAbc,KAAVuI,EAAI,KAAW9H,GAAa,cAClB,KAAV8H,EAAI,KAAW9H,GAAa,aAClB,KAAV8H,EAAI,KAAW9H,GAAa,cAClB,KAAV8H,EAAI,KAAW9H,GAAa,aAClB,KAAV8H,EAAI,KAAW9H,GAAa,YAClB,KAAV8H,EAAI,KAAW9H,GAAa,aAClB,KAAV8H,EAAI,KAAW9H,GAAa,YAClB,KAAV8H,EAAI,KAAW9H,GAAa,aAClB,KAAV8H,EAAI,KAAW9H,GAAa,YAClB,KAAV8H,EAAI,KAAW9H,GAAa,YACjB,KAAX8H,EAAI,MAAY9H,GAAa,YAClB,KAAX8H,EAAI,MAAY9H,GAAa,YAE1BA,EAAU+J,QAGd,EAAAlD,UAAP,SAAiBtH,GACb,IAAI/D,EAAO4C,EAAIwB,WAAWL,EAAG,OAE7B,OAAQ/D,GACJ,IAAK,QACL,IAAK,OAAQ,MAAO,OACpB,IAAK,SAAU,MAAO,SACtB,IAAK,MACL,IAAK,QAAS,MAAO,QACrB,IAAK,OAAQ,MAAO,UAGxB,OAAOA,GAGJ,EAAAsL,qBAAP,SAA4BvH,GACxB,IAAI/D,EAAO4C,EAAIwB,WAAWL,EAAG,OAE7B,OAAQ/D,GACJ,IAAK,OACL,IAAK,WAAY,MAAO,WACxB,IAAK,MAAO,MAAO,MACnB,IAAK,SAAU,MAAO,SACtB,IAAK,SAAU,MAAO,SAG1B,OAAOA,GAGJ,EAAA0K,QAAP,SAAe8D,EAAWC,GACtB,OAAS,MAALD,EAAkBC,EACb,MAALA,EAAkBD,EAEf,QAAQA,EAAC,MAAMC,EAAC,KAGpB,EAAArE,mBAAP,SAA0BrG,GACtB,IAAIS,EAAY,GAShB,OAPI5B,EAAI0B,SAASP,EAAG,iBAAgBS,GAAa,cAC7C5B,EAAI0B,SAASP,EAAG,cAAaS,GAAa,cAC1C5B,EAAI0B,SAASP,EAAG,gBAAeS,GAAa,YAC5C5B,EAAI0B,SAASP,EAAG,aAAYS,GAAa,aACzC5B,EAAI0B,SAASP,EAAG,aAAYS,GAAa,aACzC5B,EAAI0B,SAASP,EAAG,aAAYS,GAAa,aAEtCA,EAAU+J,QAEzB,EA9GA,I,2UClmCA,aACA,SACA,SAEA,SAAS,wEAAAG,WAaT,uBAA4BC,EAAkBC,EAA4BC,EAAoCC,QAApC,IAAAD,MAAA,WAAoC,IAAAC,MAAA,MAC1G,IAAIC,EAAS,IAAI,EAAA3B,eACb4B,EAAW,IAAI,EAAAC,aAAaC,OAAOC,UAEnCC,EAAU,EAAH,CACPC,cAAc,EACdnN,aAAa,EACboN,aAAa,EACbC,YAAY,EACZpN,OAAO,EACPqN,cAAc,EACdhL,UAAW,OACXiL,WAAW,GACPX,GASR,OANAC,EAAO7M,YAAckN,EAAQlN,YAC7B6M,EAAO5M,MAAQiN,EAAQjN,OAAS4M,EAAO5M,MAEvC6M,EAASxK,UAAY4K,EAAQ5K,WAAa,OAC1CwK,EAASS,UAAYL,EAAQK,UAEtB,EAAAC,aAAalQ,KAAKmP,EAAMI,GAAQnP,MAAK,SAAA+P,GAExC,OADAX,EAASY,OAAOD,EAAKf,EAAeC,EAAgBO,GAC7CO,O,wjBCzCf,IAGA,2B,+CAEA,OAFiC,OAEjC,EAFA,CAHA,OAGiCE,eAApB,EAAApN,e,m7BCHb,aACA,SAGA,2B,+CASA,OAT0C,OAEtC,GADC,EAAAqN,cAAc,O,yBAGf,GADC,EAAAA,cAAc,S,2BAGf,GADC,EAAAA,cAAc,a,+BAGf,GADC,EAAAA,cAAc,Y,8BAPc,GADhC,EAAAnN,QAAQ,kBACIoN,GAAb,CAA0C,EAAAC,aAA7B,EAAAD,uBAYb,+B,+CAGA,OAHwC,OAEpC,GADC,EAAAD,cAAc,O,yBADY,GAD9B,EAAAnN,QAAQ,gBACIsN,GAAb,CAAwC,EAAAD,aAA3B,EAAAC,sB,mGCfb,aAkBA,SAAgBC,EAAYpN,EAAeF,GACvC,MAAO,CACH5C,KAAM4C,EAAIpB,KAAKsB,EAAM,OACrBhB,MAAOc,EAAIpB,KAAKsB,EAAM,SACtBqN,KAAMvN,EAAIwN,WAAWtN,EAAM,KAAM,EAAAuN,YAAYjC,QAC7C1F,OAAQ9F,EAAIwN,WAAWtN,EAAM,QAAS,EAAAuN,YAAYC,OAClDC,MAAO3N,EAAI0B,SAASxB,EAAM,SAC1B0N,OAAQ5N,EAAI0B,SAASxB,EAAM,WAPnC,gBAWA,wBAA6BA,EAAeF,GAGxC,IAFA,IAAIN,EAAkB,GAER,MAAAM,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,OAAQT,EAAOoK,KAAOwD,EAAY5O,EAAGsB,GAAM,MAChD,IAAK,MAAON,EAAOmO,IAAMP,EAAY5O,EAAGsB,GAAM,MAC9C,IAAK,QAASN,EAAOsK,MAAQsD,EAAY5O,EAAGsB,GAAM,MAClD,IAAK,SAAUN,EAAOoO,OAASR,EAAY5O,EAAGsB,IAItD,OAAON,I,s5BC1CX,aAIA,2B,+CAMA,OANkC,OAE9B,GADC,EAAAwN,cAAc,S,2BAIf,GADC,EAAAA,cAAc,U,4BAJM,GADxB,EAAAnN,QAAQ,OACIiF,GAAb,CAHA,OAGkCoI,aAArB,EAAApI,gB,2HCFA,EAAA+I,GAAK,CACdC,OAAQ,gEAsBC,EAAAP,YAA+C,CACxDrC,IAAK,CAAE6C,IAAK,IAAMC,KAAM,MACxBjI,IAAK,CAAEgI,IAAK,EAAI,MAAOC,KAAM,MAC7BtF,SAAU,CAAEqF,IAAK,GAAKC,KAAM,MAC5B1C,OAAQ,CAAEyC,IAAK,KAAOC,KAAM,MAC5BR,MAAO,CAAEO,IAAK,EAAGC,KAAM,MACvBzC,QAAS,CAAEwC,IAAK,IAAMC,KAAM,KAC5BC,WAAY,CAAEF,IAAK,EAAI,IAAKC,KAAM,OAGtC,yBAA8BxE,EAAa0E,GACvC,YADuC,IAAAA,MAAyB,EAAAX,YAAYrC,KACrE1B,EAAM,CAAE2E,MAAOlD,SAASzB,GAAO0E,EAAMH,IAAK7Q,KAAMgR,EAAMF,MAAS,MAG1E,6BAAkCxE,GAC9B,OAAOA,EAAMyB,SAASzB,GAAO,IAAM,O,yjBCvCvC,IAIA,cAGI,WAAY4E,EAAqBhS,EAAc6P,GAA/C,MACI,YAAMmC,EAAKhS,IAAK,K,OAChB,EAAKiS,gBAAkBpC,E,EAQ/B,OAbkC,OAU9B,YAAA/N,SAAA,SAAS3C,GACLc,KAAKiS,gBAAkBjS,KAAKgS,gBAAgB/O,kBAAkB/D,IAEtE,EAbA,CAJA,OAIkC6C,MAArB,EAAAmQ,gB,4jBCJb,IAEA,2B,+CAEA,OAFqC,OAErC,EAFA,CAFA,OAEqCrB,aAAxB,EAAAzN,mB,skBCHb,MAII,SAAmBiF,GAAA,KAAAA,SAHnB,KAAAhD,UAAoB,KACpB,KAAAyC,SAAmC,IAF1B,EAAA+I,cAQb,6E,OACI,EAAAhN,SAA0B,G,EAC9B,OAFmC,OAEnC,EAFA,CAAmCgN,GAAtB,EAAAH,iB,2jBCRb,IAEA,2B,+CAEA,OAFoC,OAEpC,EAFA,CAFA,OAEoCA,eAAvB,EAAA1H,kB,05BCFb,aAIA,2B,+CAGA,OAHsC,OAElC,GADC,EAAA2H,cAAc,gB,2BADU,GAD5B,EAAAnN,QAAQ,YACI2O,GAAb,CAHA,OAGsCtB,aAAzB,EAAAsB,oB,y5BCJb,aACA,SAIA,2B,+CAOA,OAPsC,OAIxB,YAAAC,MAAV,SAAgBzO,GACZ3D,KAAKqS,OAAS,UAAgBhQ,KAAKsB,EAAM,WAH7C,GADC,EAAAgN,cAAc,W,6BADU,GAD5B,EAAAnN,QAAQ,cACI8E,GAAb,CAHA,OAGsCoI,eAAzB,EAAApI,oB,yjBCLb,IAEA,2B,+CAEA,OAFkC,OAElC,EAFA,CAFA,OAEkCoI,eAArB,EAAAtG,gB,g6BCFb,aAIA,2B,+CAGA,OAH4C,OAExC,GADC,EAAAkI,Y,2BAD8B,GADlC,EAAA9O,QAAQ,cACI+O,GAAb,CAHA,OAG4C1B,aAA/B,EAAA0B,0B,uFCMb,4BAAiC5O,EAAeF,GAC5C,MAAO,CACHkK,OAAQlK,EAAIwN,WAAWtN,EAAM,UAC7BiK,MAAOnK,EAAIwN,WAAWtN,EAAM,SAC5BkK,KAAMpK,EAAIuD,QAAQrD,EAAM,QACxBmK,SAAUrK,EAAIpB,KAAKsB,EAAM,e,2+BCfjC,aACA,SAEA,SACA,SAEA,SACA,SACA,SAIA,yE,OACI,EAAAqE,MAA6B,G,EACjC,OAFsC,OAAT,GAF5B,EAAAxE,QAAQ,KACR,EAAAK,SAAS,EAAA+M,qBAAsB,EAAAE,qBACnBpJ,GAAb,CAAsC,EAAAgJ,eA0CtC,SAAgB3I,EAAuBpE,EAAeqE,EAA4BvE,GAC9E,GAAIE,EAAK6O,cAAgB,EAAAhB,GAAGC,OACxB,OAAO,EAEX,OAAQ9N,EAAKC,WACT,IAAK,OACDoE,EAAMyK,KAAOC,EAAU/O,EAAMF,GAC7B,MAEJ,IAAK,SACDuE,EAAM/D,aAAe,EAAAC,uBAAuBP,EAAMF,GAClD,MAEJ,IAAK,QACDuE,EAAM2K,UAAYC,EAAejP,EAAMF,GACvC,MAEJ,IAAK,UAED,OADAuE,EAAM6K,YAAc,EAAAC,iBAAiBnP,EAAMF,IACpC,EAGX,IAAK,gBAED,OADAuE,EAAM+K,cAAgBtP,EAAIpB,KAAKsB,EAAM,QAC9B,EAGX,IAAK,WACDqE,EAAMgL,UAAYvP,EAAI0B,SAASxB,EAAM,OAAO,GAC5C,MAEJ,IAAK,WACDqE,EAAMiL,SAAWxP,EAAI0B,SAASxB,EAAM,OAAO,GAC3C,MAEJ,IAAK,kBACDqE,EAAMkL,gBAAkBzP,EAAI0B,SAASxB,EAAM,OAAO,GAClD,MAEJ,IAAK,aACDqE,EAAMmL,aAAe1P,EAAIuD,QAAQrD,EAAM,OACvC,MAEJ,IAAK,SACDqE,EAAMoL,UAAY3P,EAAIpB,KAAKsB,EAAM,OACjC,MAEJ,IAAK,MACDqE,EAAMrC,SAAW,EAAAC,mBAAmBjC,EAAMF,GAC1C,MAEJ,QACI,OAAO,EAGf,OAAO,EAGX,SAAgBiP,EAAU/O,EAAeF,GACrC,OAAOA,EAAIxB,SAAS0B,EAAM,OACrBzB,KAAI,SAAAC,GAAK,OACNkR,SAAU5P,EAAIwN,WAAW9O,EAAG,OAC5BmR,OAAQ7P,EAAIpB,KAAKF,EAAG,UACpB+E,MAAOzD,EAAIpB,KAAKF,EAAG,WAI/B,SAAgByQ,EAAejP,EAAeF,GAG1C,IAFA,IAAIN,EAA6B,GAEnB,MAAAM,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,QACDT,EAAOf,GAAKqB,EAAIpB,KAAKF,EAAG,OACxB,MAEJ,IAAK,OACDgB,EAAOiE,MAAQ3D,EAAIuD,QAAQ7E,EAAG,QAK1C,OAAOgB,EA5HE,EAAAuE,mBAgCb,oCAAyC/D,EAAeF,GAGpD,IAFA,IAAIN,EAA8B,GAEpB,MAAAM,EAAIxB,SAAS0B,GAAb,eACVoE,EADM,KACqB5E,EAAQM,GAGvC,OAAON,GAGX,2BA0DA,cASA,oB,29BCxHA,aACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAIA,yE,OAGI,EAAA6E,MAAsC,G,EAC1C,OAJgC,OAAT,GAFtB,EAAAxE,QAAQ,KACR,EAAAK,SAAS,EAAA0P,YAAa,EAAAC,cAAe,EAAAC,WAAY,EAAAhL,aAAc,EAAA8J,uBAAwB,EAAAJ,mBAC3E5J,GAAb,CAAgC,EAAAmI,eAmDhC,SAAgBgD,EAAiB/P,EAAeqE,EAAsBvE,GAClE,OAAQE,EAAKC,WACT,IAAK,SACDoE,EAAMoL,UAAY3P,EAAIpB,KAAKsB,EAAM,OACjC,MAEJ,IAAK,MACDqE,EAAM2L,OAAS,EAAA5C,YAAYpN,EAAMF,GACjC,MAEJ,IAAK,SACDuE,EAAM4L,MAAQC,EAAclQ,EAAMF,GAClC,MAEJ,IAAK,MACDuE,EAAM8L,QAAUC,EAAapQ,EAAMF,GACnC,MAEJ,IAAK,YACDuE,EAAMpF,UAAYa,EAAIpB,KAAKsB,EAAM,OACjC,MAEJ,IAAK,UACDqE,EAAMgM,QAAUvQ,EAAIwN,WAAWtN,EAAM,OACrC,MAEJ,IAAK,IACDqE,EAAMiM,QAAUxQ,EAAIyQ,eAAevQ,EAAM,OACzC,MAEA,IAAK,QACLqE,EAAMrF,MAAQc,EAAIpB,KAAKsB,EAAM,OAC7B,MAEJ,IAAK,KACDqE,EAAMmM,SAAW1Q,EAAIwN,WAAWtN,EAAM,MAAO,EAAAuN,YAAY7E,UACzD,MAEJ,IAAK,IACDrE,EAAMoM,KAAO3Q,EAAI0B,SAASxB,EAAM,OAAO,GACvC,MAEJ,IAAK,SACDqE,EAAMqM,OAAS5Q,EAAI0B,SAASxB,EAAM,OAAO,GACzC,MAEJ,IAAK,UACDqE,EAAMsM,aAAe7Q,EAAI0B,SAASxB,EAAM,OAAO,GAC/C,MAEJ,IAAK,IACDqE,EAAMuM,QAAU9Q,EAAI0B,SAASxB,EAAM,OAAO,GAC1C,MAEJ,IAAK,IACDqE,EAAMwM,UAAY,CACd7R,MAAOc,EAAIpB,KAAKsB,EAAM,SACtB9C,KAAM4C,EAAIpB,KAAKsB,EAAM,QAEzB,MAEJ,IAAK,OACDqE,EAAMyM,KAAOhR,EAAI0B,SAASxB,EAAM,OAAO,GACvC,MAEJ,IAAK,YACDqE,EAAM0M,UAAYjR,EAAI0B,SAASxB,EAAM,OAAO,GAC5C,MAEJ,IAAK,UACDqE,EAAM2M,QAAUlR,EAAI0B,SAASxB,EAAM,OAAO,GAC1C,MAEJ,IAAK,UACDqE,EAAM4M,QAAUnR,EAAI0B,SAASxB,EAAM,OAAO,GAC1C,MAEJ,IAAK,YACDqE,EAAM6M,kBAAoBpR,EAAIpB,KAAKsB,EAAM,OACzC,MAEJ,IAAK,SACL,IAAK,SACL,IAAK,SACL,QACI,OAAO,EAGf,OAAO,EAGX,SAAgBkQ,EAAclQ,EAAeF,GACzC,MAAO,CACH4J,MAAO5J,EAAIpB,KAAKsB,EAAM,SACtBmR,OAAQrR,EAAIpB,KAAKsB,EAAM,UACvBoR,GAAItR,EAAIpB,KAAKsB,EAAM,MACnBqR,SAAUvR,EAAIpB,KAAKsB,EAAM,aAIjC,SAAgBoQ,EAAapQ,EAAeF,GACxC,MAAO,CACH5C,KAAM4C,EAAIpB,KAAKsB,EAAM,OACrBsR,WAAYxR,EAAIpB,KAAKsB,EAAM,SAC3BuR,WAAYzR,EAAIpB,KAAKsB,EAAM,SA3JtB,EAAA4E,aAyCb,8BAAmC5E,EAAeF,GAG9C,IAFA,IAAIN,EAAwB,GAEd,MAAAM,EAAIxB,SAAS0B,GAAb,eACV+P,EADM,KACevQ,EAAQM,GAGjC,OAAON,GAGX,qBA2FA,kBASA,kB,YChFA,SAASgS,EAAaxR,EAAeF,GACjC,MAAO,CACH2R,gBAAiB3R,EAAIuD,QAAQrD,EAAM,OACnC0R,MAAO5R,EAAIwN,WAAWtN,EAAM,SAC5B2R,UAAW7R,EAAI0B,SAASxB,EAAM,OAC9B4R,WAAY9R,EAAI0B,SAASxB,EAAM,cAAc,GAC7CgH,QAASlH,EAAIxB,SAAS0B,EAAM,OACvBzB,KAAI,SAAAC,GAAK,OACN2I,MAAOrH,EAAIwN,WAAW9O,EAAG,KACzBkT,MAAO5R,EAAIwN,WAAW9O,EAAG,cA9DzC,IAAYqT,E,gGAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACnB,wBACA,sBACA,0BACA,sBACA,oBAUJ,kCAAuC7R,EAAeF,GAGlD,IAFA,IAAIgS,EAA6B,GAEnB,MAAAhS,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,OACD6R,EAAQC,SAAW,CACf5K,MAAOrH,EAAIwN,WAAW9O,EAAG,KACzBwT,OAAQlS,EAAIwN,WAAW9O,EAAG,KAC1ByT,YAAanS,EAAIpB,KAAKF,EAAG,WAE7B,MAEJ,IAAK,OACDsT,EAAQ5U,KAAO4C,EAAIpB,KAAKF,EAAG,OAC3B,MAEJ,IAAK,QACDsT,EAAQI,YAAc,CAClBtI,KAAM9J,EAAIwN,WAAW9O,EAAG,QACxBsL,MAAOhK,EAAIwN,WAAW9O,EAAG,SACzBmP,IAAK7N,EAAIwN,WAAW9O,EAAG,OACvBoP,OAAQ9N,EAAIwN,WAAW9O,EAAG,UAC1B2T,OAAQrS,EAAIwN,WAAW9O,EAAG,UAC1B4T,OAAQtS,EAAIwN,WAAW9O,EAAG,UAC1B6T,OAAQvS,EAAIwN,WAAW9O,EAAG,WAE9B,MAEJ,IAAK,OACDsT,EAAQ9K,QAAUwK,EAAahT,EAAGsB,IAK9C,OAAOgS,I,u5BClFX,aAIA,2B,+CAKA,OALmC,OAE/B,GADC,EAAA9E,cAAc,S,2BAGf,GADC,EAAAA,cAAc,S,2BAHO,GADzB,EAAAnN,QAAQ,QACIgQ,GAAb,CAHA,OAGmC3C,aAAtB,EAAA2C,iB,o5BCJb,aAIA,2B,+CACA,OADgC,OAAT,GADtB,EAAAhQ,QAAQ,QACIiQ,GAAb,CAHA,OAGgC5C,aAAnB,EAAA4C,c,6jBCJb,IAEA,2B,+CAEA,OAFsC,OAEtC,EAFA,CAFA,OAEsC/C,eAAzB,EAAA9E,oB,2jBCFb,IAEA,2B,+CAEA,OAFqC,OAErC,EAFA,CAFA,OAEqC8E,eAAxB,EAAAlF,mB,yjBCFb,IAEA,2B,+CAGA,OAHkC,OAGlC,EAHA,CAFA,OAEkCkF,eAArB,EAAAjG,gB,q5BCFb,aAIA,2B,+CAGA,OAHiC,OAE7B,GADC,EAAA6H,Y,2BADmB,GADvB,EAAA9O,QAAQ,MACI+P,GAAb,CAHA,OAGiC1C,aAApB,EAAA0C,e,0jBCJb,aACA,SAEA,2B,+CAMA,OANmC,OAG/B,YAAA1R,SAAA,SAAS3C,GACLc,KAAK4T,MAAQ,EAAAqC,WAAW/W,EAAMc,KAAKyB,SAAS7B,YAEpD,EANA,CAAmC,EAAAmC,MAAtB,EAAAmU,iB,YCWb,SAAgBtJ,EAAUjJ,EAAe/D,GAKrC,IAJA,IAAIuD,EAA0B,CAC1BsB,KAAM7E,EAAUyC,KAAKsB,EAAM,SAGhB,MAAA/D,EAAUqC,SAAS0B,GAAnB,eAA0B,CAApC,IAAIwS,EAAE,KACP,OAAQA,EAAGvS,WACP,IAAK,SACDT,EAAOiT,OAASxW,EAAUyC,KAAK8T,EAAI,OACnC,MAEJ,IAAK,UACDhT,EAAOkT,QAAUzW,EAAUyC,KAAK8T,EAAI,OACpC,MAEJ,IAAK,eACDhT,EAAOmT,QAAU1W,EAAUyC,KAAK8T,EAAI,WACpChT,EAAOoT,MAAQ3W,EAAUyC,KAAK8T,EAAI,OAK9C,OAAOhT,E,iFA1BX,sBAA2BjE,EAAeU,GACtC,OAAOA,EAAUqC,SAAS/C,GAAMgD,KAAI,SAAAiU,GAAM,OAAAvJ,EAAUuJ,EAAIvW,OAG5D,e,2UCVA,aACA,SACA,SAGA,SACA,SAKA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,SACA,SACA,SAMW,EAAA6C,MAAQ,CACfC,IAAK,QACLC,MAAO,QACPC,UAAW,eAGf,iBAUI,WAAoB4T,GAAA,KAAAA,eARpB,KAAAlG,WAAqB,EACrB,KAAAjL,UAAoB,OA+3BxB,OAr3BI,YAAAoL,OAAA,SAAOT,EAAwBP,EAA4BC,EAAoCO,QAApC,IAAAP,MAAA,MACvD1P,KAAKgQ,SAAWA,EAChBhQ,KAAKiQ,QAAUA,EACfjQ,KAAKyW,YAAc,KAInBC,EAFAhH,EAAiBA,GAAkBD,GAGnCiH,EAAkBjH,GAElBkH,EAAcjH,EAAgB,oCAC9BA,EAAekH,YAAY5W,KAAK6W,sBAEL,MAAvB7G,EAAS8G,aACT9W,KAAKyW,YAAczW,KAAK+W,cAAc/G,EAAS8G,WAAWE,WAC1DhX,KAAKiX,SAAWjH,EAAS8G,WAAWG,SAEpCN,EAAcjH,EAAgB,wBAC9BA,EAAekH,YAAY5W,KAAKkX,aAAalH,EAAS8G,WAAWE,aAGjEhH,EAASmH,gBACTR,EAAcjH,EAAgB,kCAC9BA,EAAekH,YAAY5W,KAAKoX,gBAAgBpH,EAASmH,cAAcE,cAAe3H,MAItFO,EAAQE,aAAeH,EAASsH,eAChCtX,KAAKuX,gBAAgBvH,EAASsH,cAAe5H,GAEjD,IAAI8H,EAAkBxX,KAAKyX,eAAezH,EAAS0H,aAAazF,gBAAgB5O,MAEhF,GAAIrD,KAAKsQ,UAAW,CAChB,IAAIqH,EAAU3X,KAAK4X,gBACnBC,EAAeF,EAASH,GACxB/H,EAAcmH,YAAYe,QAG1BE,EAAepI,EAAe+H,IAItC,YAAAD,gBAAA,SAAgBO,EAA0BpI,GACtC,I,eAAQqI,GACJ,EAAK/H,SAASgI,SAASD,EAAExB,MAAOwB,EAAEzB,SAAS7V,MAAK,SAAAwX,GAC5C,IAAIC,EAAU,mDACMH,EAAEtT,KAAI,oCACXwT,EAAQ,wBAGvBtB,EAAcjH,EAAgB,QAAQqI,EAAEtT,MACxCiL,EAAekH,YAAYuB,EAAmBD,Q,OARzC,MAAAJ,EAAUlE,MAAMtM,QAAO,SAAAd,GAAK,OAAAA,EAAE+P,SAA9B,e,EAAJ,OAab,YAAA6B,iBAAA,SAAiB/S,GACb,OAAKA,EAGKrF,KAAKqF,UAAS,IAAIA,EAFjBrF,KAAKqF,WAKpB,YAAA0R,cAAA,SAAcpS,GAGV,IAFA,IAAI0T,EAAuC,GAEzB,MAAA1T,EAAO2C,QAAO,SAAAd,GAAK,OAAQ,MAARA,EAAEpE,MAArB,eACdiW,GADKnR,EAAK,MACM9E,IAAM8E,EAG1B,IAAkB,UAAAvC,EAAO2C,QAAO,SAAAd,GAAK,OAAAA,EAAE9B,WAArB,eAA+B,CAA5C,IACG4T,EAAYD,GADXnR,EAAK,MACsBxC,SAEhC,GAAI4T,EACA,I,IACQC,E,WADCC,IACDD,EAAaD,EAAU3T,OAAO2C,QAAO,SAAAd,GAAK,OAAAA,EAAElE,QAAUkW,EAAYlW,YAEpDiW,EAAWlK,OAAS,GAClC,EAAKoK,oBAAoBF,EAAW,GAAGzT,OAAQ0T,EAAY1T,S,OAJ3C,MAAAoC,EAAMvC,OAAN,e,EAAJ,WAOf3E,KAAKiQ,QAAQjN,OAClB+C,QAAQC,KAAK,yBAAyBkB,EAAMxC,SAGpD,IAAkB,UAAAC,EAAA,eAAQ,CAArB,IAAIuC,KAAK,MACJwR,QAAU1Y,KAAKoY,iBAAiBpY,KAAK2Y,gBAAgBzR,EAAM9E,KAGrE,OAAOiW,GAGX,YAAAO,eAAA,SAAepV,GACX,GAAI,aAAcA,EACd,IAAc,UAACA,EAA0BK,SAA3B,eAAqC,CAA9C,IAAI1B,EAAC,KACNA,EAAEkD,UAAYrF,KAAKoY,iBAAiBjW,EAAEkD,WACtClD,EAAEkG,OAAS7E,EAEPrB,aAAa,EAAAsI,aACbzK,KAAK6Y,aAAa1W,GAGlBnC,KAAK4Y,eAAezW,KAMpC,YAAA0W,aAAA,SAAa9N,GACT,IAAc,UAAAA,EAAMlH,SAAN,eACV,IADC,IACa,MADR,KAC6BA,SAArB,eAA+B,CAAxC,IAAIe,EAAC,KACNA,EAAEkD,SAAW9H,KAAKyY,oBAAoB1N,EAAMC,UAAWpG,EAAEkD,SAAU,CAC/D,cAAe,eAAgB,aAAc,gBAC7C,eAAgB,gBAAiB,cAAe,mBAGpD9H,KAAK4Y,eAAehU,KAKhC,YAAA6T,oBAAA,SAAoBnY,EAA+B0N,EAAgC8K,GAC/E,QAD+E,IAAAA,MAAA,OAC1ExY,EACD,OAAO0N,EAEG,MAAVA,IAAgBA,EAAS,IAChB,MAAT8K,IAAeA,EAAQjQ,OAAOkQ,oBAAoBzY,IAEtD,IAAgB,UAAAwY,EAAA,eAAO,CAAlB,IAAIE,EAAG,KACJ1Y,EAAM2Y,eAAeD,KAAShL,EAAOiL,eAAeD,KACpDhL,EAAOgL,GAAO1Y,EAAM0Y,IAG5B,OAAOhL,GAGX,YAAAkL,cAAA,SAAc7T,EAAmB2C,GAC7B,IAAIrE,EAAO3D,KAAKwW,aAAa2C,cAAc,WA6B3C,OA3BAxV,EAAK0B,UAAYA,EAEb2C,IACIA,EAAM6N,cACNlS,EAAKuD,MAAMkS,YAAcpZ,KAAKqZ,aAAarR,EAAM6N,YAAYtI,MAC7D5J,EAAKuD,MAAMoS,aAAetZ,KAAKqZ,aAAarR,EAAM6N,YAAYpI,OAC9D9J,EAAKuD,MAAMqS,WAAavZ,KAAKqZ,aAAarR,EAAM6N,YAAYvE,KAC5D3N,EAAKuD,MAAMsS,cAAgBxZ,KAAKqZ,aAAarR,EAAM6N,YAAYtE,SAG/DvJ,EAAM0N,WACD1V,KAAKiQ,QAAQlN,cACdY,EAAKuD,MAAM4D,MAAQ9K,KAAKqZ,aAAarR,EAAM0N,SAAS5K,QACnD9K,KAAKiQ,QAAQC,eACdvM,EAAKuD,MAAMuS,UAAYzZ,KAAKqZ,aAAarR,EAAM0N,SAASC,UAG5D3N,EAAM2C,SAAW3C,EAAM2C,QAAQyK,kBAC/BzR,EAAKuD,MAAMwS,YAAc,GAAG1R,EAAM2C,QAAQyK,gBAC1CzR,EAAKuD,MAAMyS,UAAY3Z,KAAKqZ,aAAarR,EAAM2C,QAAQ0K,OAEnDrN,EAAM2C,QAAQ2K,YACd3R,EAAKuD,MAAM0S,WAAa,qBAK7BjW,GAGX,YAAA8T,eAAA,SAAezH,GACX,IAAI7M,EAAS,GAEbnD,KAAK4Y,eAAe5I,GAEpB,IAAmB,UAAAhQ,KAAK6Z,eAAe7J,EAASnM,UAA7B,eAAwC,CAAvD,IAAI4R,EAAO,KACPqE,EAAiB9Z,KAAKkZ,cAAclZ,KAAKqF,UAAWoQ,EAAQsE,WAAa/J,EAAS/L,cACtFjE,KAAKga,eAAevE,EAAQxT,SAAU+N,EAAU8J,GAChD3W,EAAOW,KAAKgW,GAGhB,OAAO3W,GAGX,YAAA0W,eAAA,SAAe5X,GAIX,I,MAHIgY,EAAU,CAAEF,UAAW,KAAM9X,SAAU,IACvCkB,EAAS,CAAC8W,GAEE,MAAAhY,EAAA,eAAU,CAAtB,IAAI0B,EAAI,KACR,GAAIA,aAAgB,EAAA+D,iBAAkB,CAClC,IAAM0L,EAAYzP,EAAKqE,MAAMoL,UACvBtN,EAAI9F,KAAKyW,aAAerD,EAAYpT,KAAKyW,YAAYrD,GAAa,MAEpD,QAAjB,EAAAtN,aAAC,EAADA,EAAGL,sBAAc,eAAEyN,mBAClB+G,EAAQF,UAAYA,EACpBE,EAAU,CAAEF,UAAW,KAAM9X,SAAU,IACvCkB,EAAOW,KAAKmW,IAMpB,GAFAA,EAAQhY,SAAS6B,KAAKH,GAEnBA,aAAgB,EAAA+D,iBACnB,CACI,IAAMwS,EAAIvW,EAENoW,EAAYG,EAAElS,MAAM/D,aACpBkW,GAAe,EACfC,GAAe,EAenB,GAbGpa,KAAKiQ,QAAQG,YAAc8J,EAAErW,WAC5BsW,EAAcD,EAAErW,SAASwW,WAAU,SAACC,G,QAEhC,OAAuB,IADvBF,EAAuG,QAAzF,EAAU,QAAV,EAAAE,EAAEzW,gBAAQ,eAAEwW,WAAU,SAACE,GAAoB,OAAAA,aAAa,EAAA9R,cAA0B,QAAV8R,EAAE1Z,eAAe,SAAK,QAKjHkZ,IAA6B,GAAhBI,KACZF,EAAQF,UAAYA,EACpBE,EAAU,CAAEF,UAAW,KAAM9X,SAAU,IACvCkB,EAAOW,KAAKmW,KAGG,GAAhBE,EAAmB,CAClB,IAAIK,EAAWN,EAAErW,SAASsW,GACtBM,EAAWL,EAAcI,EAAS3W,SAASwK,OAAS,EAExD,GAAG8L,EAAcD,EAAErW,SAASwK,OAAS,GAAKoM,EAAU,CAChD,IAAI5W,EAAWF,EAAKE,SAChB6W,EAAe7R,OAAOC,OAAO,IAAI,EAAApB,iBAAoB/D,EAAM,CAAEE,SAAUA,EAAS8W,MAAMR,KAI1F,GAHAxW,EAAKE,SAAWA,EAAS8W,MAAM,EAAGR,GAClCF,EAAQhY,SAAS6B,KAAK4W,GAEnBD,EAAU,CACT,IAAIG,EAAcJ,EAAS3W,SACvBgX,EAAUhS,OAAOC,OAAO,IAAI,EAAAP,WAAciS,EAAU,CAAE3W,SAAU+W,EAAYD,MAAM,EAAGP,KACzFzW,EAAKE,SAASC,KAAK+W,GACnBL,EAAS3W,SAAW+W,EAAYD,MAAMP,OAS1D,IAFA,IAAIU,EAAmB,KAEd3M,EAAIhL,EAAOkL,OAAS,EAAGF,GAAK,EAAGA,IACT,MAAvBhL,EAAOgL,GAAG4L,UACV5W,EAAOgL,GAAG4L,UAAYe,EAEtBA,EAAmB3X,EAAOgL,GAAG4L,UAIrC,OAAO5W,GAGX,YAAAkW,aAAA,SAAa0B,GACT,OAAOA,EAAI,GAAGA,EAAEjJ,MAAQiJ,EAAEla,KAAS,MAGvC,YAAAma,YAAA,SAAYpW,EAAW8J,GACnB,YADmB,IAAAA,MAAA,SACf,eAAeuM,KAAKrW,GACb,IAAIA,EAEF,SAANA,EAAe8J,EAAY9J,GAGtC,YAAAgT,cAAA,WACI,IAAID,EAAU3H,SAASmJ,cAAc,OAIrC,OAFAxB,EAAQtS,UAAerF,KAAKqF,UAAS,WAE9BsS,GAGX,YAAAd,mBAAA,WASI,OAAOsB,EARS,IAAInY,KAAKqF,UAAS,gJACvBrF,KAAKqF,UAAS,oBAAoBrF,KAAKqF,UAAS,2GAChDrF,KAAKqF,UAAS,+CACPrF,KAAKqF,UAAS,kDACrBrF,KAAKqF,UAAS,2DACdrF,KAAKqF,UAAS,eAAerF,KAAKqF,UAAS,wDAC3CrF,KAAKqF,UAAS,wBAsE7B,YAAA+R,gBAAA,SAAgBzS,EAAyB+K,GAIrC,IAJJ,IAKYzJ,EACAiV,EANZ,OACQC,EAAY,GACZC,EAAe,G,aAMf,GAHInV,EAAW,KAAK,EAAKoV,eAAeC,EAAIlZ,GAAIkZ,EAAIlU,OAChD8T,EAAgB,OAEhBI,EAAI/T,WAA2B,WAAd+T,EAAI9T,OAAqB,CAC1C,IAAI+T,EAAU,EAAKC,iBAAiBF,EAAIlZ,GAAIkZ,EAAIlU,OAE5CkU,EAAIlU,MAAQ,EACZ+T,GAAa,EAAKM,cAAc,KAAK,EAAKJ,eAAeC,EAAIlZ,GAAIkZ,EAAIlU,MAAQ,GAAM,CAC/E,gBAAiBmU,IAIrBH,EAAatX,KAAKyX,GAGtBJ,GAAa,EAAKM,cAAiBxV,EAAQ,UAAW,CAClD,QAAW,EAAKyV,mBAAmBJ,EAAI/T,UAAW+T,EAAIlZ,IACtD,oBAAqBmZ,SAGxB,GAAID,EAAIjU,OAAQ,CACjB,IAAI,GAAW,KAAK,EAAKhC,UAAS,IAAIiW,EAAIjU,OAAOJ,KAAM0U,cAEvDR,GAAa,EAAKM,cAAiBxV,EAAQ,UAAW,CAClD,QAAW,MACX,QAAW,eACX,WAAc,OAAO,EAAQ,KAC9BqV,EAAIjU,OAAOH,OAEd,EAAK8I,SAAS4L,mBAAmBN,EAAIjU,OAAOJ,KAAKxG,MAAK,SAAA+O,GAClD,IAAInO,EAAO,IAAI,EAAKgE,UAAS,cAAc,EAAQ,SAASmK,EAAI,MAChEE,EAAekH,YAAYuB,EAAmB9W,YAIlD6Z,EAAgB,EAAKW,oBAAoBP,EAAI9T,QAGjD2T,GAAa,EAAKM,cAAcxV,EAAU,EAAF,CACpC,QAAW,YACX,sBAAuB,SACvB,kBAAmBiV,GAChBI,EAAIpU,S,OA3CC,MAAAvC,EAAA,eAAQ,CAAnB,IAAI2W,EAAG,K,IAqDZ,OANIF,EAAa/M,OAAS,IACtB8M,GAAanb,KAAKyb,cAAc,IAAIzb,KAAKqF,UAAS,WAAY,CAC1D,gBAAiB+V,EAAaU,KAAK,QAIpC3D,EAAmBgD,IAG9B,YAAAjE,aAAA,SAAavS,GAIT,IAHA,IAAIwW,EAAY,GACZ9C,EAAYrY,KAAKyW,YAEH,MAAA9R,EAAA,eAAQ,CAArB,IAAIuC,EAAK,KACN6U,EAAa7U,EAAMvC,OAEvB,GAAGuC,EAAM9B,OAAQ,CACb,IAAI4W,EAAc9U,EAAM9B,QAAUiT,EAAUnR,EAAM9B,QAE9C4W,EACAD,EAAYA,EAAUE,OAAOD,EAAYrX,QACrC3E,KAAKiQ,QAAQjN,OACjB+C,QAAQC,KAAK,2BAA2BkB,EAAM9B,QAGtD,IAAqB,UAAA2W,EAAA,eAAW,CAA3B,IAAIG,EAAQ,KACTjW,EAAW,GAEXiB,EAAM5E,QAAU4Z,EAAS5Z,OACzB2D,GAAeiB,EAAM5E,OAAM,IAAI4E,EAAMwR,QAChCxR,EAAM5E,OACX2D,GAAeiB,EAAM5E,OAAM,IAAI4E,EAAMwR,QAAO,IAAIwD,EAAS5Z,OAEzD2D,GAAY,IAAIiB,EAAMwR,QAAO,IAAIwD,EAAS5Z,OAE1C4E,EAAMhC,WAAagC,EAAM5E,SACzB2D,EAAW,IAAIjG,KAAKqF,UAAS,IAAI6B,EAAM5E,OAAM,KAAO2D,GAEpDiB,EAAMzB,gBAAqC,KAAnByW,EAAS5Z,QACjCtC,KAAKmc,0BAA0BD,EAASpX,OAAQoC,EAAMzB,gBAG1D0V,GAAanb,KAAKyb,cAAcxV,EAAUiW,EAASpX,SAI3D,OAAOqT,EAAmBgD,IAG9B,YAAAiB,cAAA,SAAczY,EAAmB0E,GAC7B,OAAI1E,aAAgB,EAAA+D,iBACT1H,KAAKqc,gBAAgB1Y,GACrBA,aAAgB,EAAAiN,qBAChB5Q,KAAKsc,oBAAoB3Y,GACzBA,aAAgB,EAAA4E,WAChBvI,KAAKuc,UAAU5Y,GACfA,aAAgB,EAAA4P,YAChBvT,KAAKwc,WAAW7Y,GAChBA,aAAgB,EAAA6P,cAChBxT,KAAKyc,aAAa9Y,GAClBA,aAAgB,EAAA8P,WAChBzT,KAAK0c,UAAU/Y,GACfA,aAAgB,EAAA8G,aAChBzK,KAAK2c,YAAYhZ,GACjBA,aAAgB,EAAA6H,gBAChBxL,KAAK4c,eAAejZ,GACpBA,aAAgB,EAAAiI,iBAChB5L,KAAK6c,gBAAgBlZ,GACrBA,aAAgB,EAAA2E,iBAChBtI,KAAK8c,gBAAgBnZ,GACrBA,aAAgB,EAAAqF,eAChBhJ,KAAK+c,cAAcpZ,GACpBA,aAAgB,EAAAyG,aACfpK,KAAKgd,YAAYrZ,GAGrB,MAGX,YAAAsZ,eAAA,SAAetZ,EAAqBuZ,GAChC,OAAOld,KAAKga,eAAerW,EAAKE,SAAUF,EAAMuZ,IAGpD,YAAAlD,eAAA,SAAemD,EAAsB9U,EAAqB6U,GAA1D,WACI,GAAY,MAATC,EACC,OAAO,KAEX,IAAIha,EAASga,EAAMjb,KAAI,SAAAC,GACnB,IAAIkC,EAAI,EAAK+X,cAAcja,EAAGkG,GAK9B,OAHGhE,GAAK,EAAK4L,QAAQjN,QAChBqB,EAAU+Y,cAAgBjb,GAExBkC,KACRiD,QAAO,SAAAnF,GAAK,OAAK,MAALA,KAEf,GAAG+a,EACC,IAAa,UAAA/Z,EAAA,eAAM,CAAf,IAAIyB,EAAC,KACLsY,EAAKtG,YAAYhS,GAEzB,OAAOzB,GAGX,YAAAkZ,gBAAA,SAAgB1Y,G,YACRR,EAASnD,KAAKwW,aAAa2C,cAAc,KAE7CnZ,KAAKqd,YAAY1Z,EAAMR,GACvBnD,KAAKid,eAAetZ,EAAMR,GAC1BnD,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAEtC,IAAM+D,EAAQvD,EAAKqE,MAAMoL,YAA0B,QAAb,EAAApT,KAAKiX,gBAAQ,eAAGtT,EAAKqE,MAAMoL,YAC3DT,EAAgC,QAApB,EAAAhP,EAAKqE,MAAM2K,iBAAS,QAAyB,QAArB,EAAAzL,aAAK,EAALA,EAAOzB,sBAAc,eAAEkN,UAEjE,GAAIA,EAAW,CACX,IAAI0I,EAAiBrb,KAAKqb,eAAe1I,EAAUvQ,GAAmB,QAAf,EAAAuQ,EAAUvL,aAAK,QAAI,GAC1EjE,EAAOkC,UAAY,EAAAkY,YAAYpa,EAAOkC,UAAWgW,GAGrD,GAAI1X,EAAKqE,MAAMoL,UAAW,CACtB,IAAIoK,EAAiBxd,KAAKoY,iBAAiBpY,KAAK2Y,gBAAgBhV,EAAKqE,MAAMoL,YAC3EjQ,EAAOkC,UAAY,EAAAkY,YAAYpa,EAAOkC,UAAWmY,GAGrD,OAAOra,GAGX,YAAAgZ,0BAAA,SAA0BjV,EAAYc,GAClC,IAAK,IAAMkS,KAAKlS,EAAO,CACnB,IAAM2G,EAAI3G,EAAMkS,GAEhB,OAAOA,GACH,IAAK,cACDla,KAAKyd,kBAAkBvW,EAAOyH,MAM9C,YAAA8O,kBAAA,SAAkBvW,EAAY8M,KAI9B,YAAA0J,oBAAA,SAAoBxW,EAAYc,GAC5B,IAAK,IAAMkS,KAAKlS,EAAO,CACnB,IAAM2G,EAAI3G,EAAMkS,GAEhB,OAAQA,GACJ,IAAK,YACDhT,EAAkB,WAAIlH,KAAKgb,YAAYrM,GACvC,MAEJ,IAAK,UACDzH,EAAkB,WAAIlH,KAAK2d,cAAchP,GACzC,MAEJ,IAAK,SACDzH,EAAc,OAAIlH,KAAK4d,aAAajP,GACpC,MAEJ,IAAK,QACDzH,EAAa,MAAIlH,KAAKgb,YAAYrM,GAClC,MAEJ,IAAK,WACDzH,EAAM,aAAelH,KAAKqZ,aAAa1K,GACvC,MAEJ,IAAK,OACDzH,EAAM,eAAiByH,EAAI,OAAS,SACpC,MAEJ,IAAK,UACDzH,EAAM,cAAgByH,EAAI,SAAW,SACrC,MAEJ,IAAK,YACDzH,EAAM,aAAeyH,EAAI,UAAY,OACzC,IAAK,OACDzH,EAAM,kBAAoByH,EAAI,YAAc,OAC5C,MAEJ,IAAK,SACL,IAAK,SACDzH,EAAM,mBAAqByH,EAAI,eAAiB,OAChD,MAEJ,IAAK,QACDzH,EAAM,eAAiBlH,KAAK6d,eAAelP,GAC3C,MAEJ,IAAK,YACD3O,KAAK8d,gBAAgB5W,EAAOyH,GAC5B,MAEJ,IAAK,oBACD3O,KAAK+d,2BAA2B7W,EAAOyH,MAMvD,YAAAoP,2BAAA,SAA2B7W,EAAYoC,GACnC,OAAOA,GACH,IAAK,YACDpC,EAAM,kBAAoB,MAC1BA,EAAM,aAAe,QACrB,MAEJ,IAAK,cACDA,EAAM,kBAAoB,QAC1BA,EAAM,aAAe,UAKjC,YAAA2W,eAAA,SAAejK,GACX,MAAO,CAACA,EAAMvG,MAAOuG,EAAMkB,OAAQlB,EAAMmB,GAAInB,EAAMoB,UAAU1N,QAAO,SAAAd,GAAK,OAAAA,KAAGtE,KAAI,SAAAsE,GAAK,UAAIA,EAAC,OAAKsV,KAAK,MAGxG,YAAA8B,aAAA,SAAajK,GACT,MAAmB,OAAfA,EAAO9S,KACA,OAEDb,KAAKqZ,aAAa1F,EAAO3C,MAAK,UAAUhR,KAAKgb,YAAYrH,EAAOhR,QAG9E,YAAAgb,cAAA,SAAc7J,GACV,OAAIA,EAAQjT,KACDb,KAAKgb,YAAYlH,EAAQoB,WAAY,EAAAzS,MAAMC,MAK1D,YAAAob,gBAAA,SAAgB5W,EAAYsN,GACxB,GAAsB,MAAlBA,EAAU3T,MAAkC,QAAlB2T,EAAU3T,KAAxC,CAGA,OAAQ2T,EAAU3T,MACd,IAAK,OACL,IAAK,kBACL,IAAK,eACL,IAAK,cACL,IAAK,WACL,IAAK,gBACL,IAAK,UACL,IAAK,aACDqG,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,cACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,QACDA,EAAM,mBAAqB,YAC3B,MAEJ,IAAK,OACL,IAAK,aACL,IAAK,YACDA,EAAM,yBAA2B,OACjC,MAEJ,IAAK,QACDA,EAAM,mBAAqB,YAI/BsN,EAAU7R,QACVuE,EAAM,yBAA2BlH,KAAKgb,YAAYxG,EAAU7R,UAGpE,YAAAma,gBAAA,SAAgBnZ,GACZ,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,KAQ7C,OANAnZ,KAAKid,eAAetZ,EAAMR,GAC1BnD,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAElCQ,EAAK0O,SACLlP,EAAO6a,KAAOra,EAAK0O,QAEhBlP,GAGX,YAAA4Z,cAAA,SAAcpZ,GACV,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,OAS7C,OAPAhW,EAAO+D,MAAM+W,QAAU,eACvB9a,EAAO+D,MAAMmM,SAAW,WACxBlQ,EAAO+D,MAAMgX,WAAa,MAE1Ble,KAAKid,eAAetZ,EAAMR,GAC1BnD,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAE/BA,GAGX,YAAA6Z,YAAA,SAAYrZ,GACR,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,OAU7C,OARAnZ,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAElCnD,KAAKgQ,UACLhQ,KAAKgQ,SAASmO,kBAAkBxa,EAAKsD,KAAKxG,MAAK,SAAA+F,GAC3CrD,EAAO8D,IAAMT,KAIdrD,GAGX,YAAAqZ,WAAA,SAAW7Y,GACP,OAAO3D,KAAKwW,aAAa4H,eAAeza,EAAKtC,OAGjD,YAAAob,aAAA,SAAa9Y,GACT,IAAIoI,EAAO/L,KAAKwW,aAAa2C,cAAc,QAG3C,OAFApN,EAAK7E,MAAMmX,WAAa1a,EAAK2a,KAC7BvS,EAAKwS,UAAY,MAAM5a,EAAK6a,KAAI,IACzBzS,GAGX,YAAA2Q,UAAA,SAAU/Y,GACN,IAAI8a,EAAUze,KAAKwW,aAAa2C,cAAc,QAiB9C,OAfAsF,EAAQF,UAAY,SAEjBve,KAAKiQ,QAAQI,cACZqO,YAAW,WACP,IAAI7W,EA0KpB,SAA2ClE,EAAmB9C,GAG1D,IAFA,IAAIwH,EAAS1E,EAAK0E,OAED,MAAVA,KAAoBA,aAAkBxH,IACzCwH,EAASA,EAAOA,OAEpB,OAAUA,EAhLkBsW,CAA6Bhb,EAAM,EAAA+D,kBAExB,MAAxBG,EAAUG,MAAMyK,OAGnB5K,EAAUG,MAAMyK,KAAKmM,MAAK,SAACvP,EAAGC,GAAM,OAAAD,EAAEgE,SAASvB,MAAQxC,EAAE+D,SAASvB,SAClE2M,EAAQvX,MAAM+W,QAAU,eACxB,EAAAY,cAAcJ,EAAS5W,EAAUG,MAAMyK,SACxC,GAGAgM,GAGX,YAAAnC,oBAAA,SAAoB3Y,GAChB,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,QAE7C,OADAhW,EAAOf,GAAKuB,EAAKc,KACVtB,GAGX,YAAAoZ,UAAA,SAAU5Y,GACN,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,QAU7C,OARGxV,EAAKvB,KACJe,EAAOf,GAAKuB,EAAKvB,IAErBpC,KAAKqd,YAAY1Z,EAAMR,GACvBnD,KAAKid,eAAetZ,EAAMR,GAE1BnD,KAAK0d,oBAAoBva,EAAO+D,MAAOvD,EAAKqE,OAErC7E,GAGX,YAAAwZ,YAAA,SAAYhZ,GACR,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,SAS7C,OAPIxV,EAAKgH,SACLxH,EAAOyT,YAAY5W,KAAK8e,mBAAmBnb,EAAKgH,UAEpD3K,KAAKqd,YAAY1Z,EAAMR,GACvBnD,KAAKid,eAAetZ,EAAMR,GAC1BnD,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAE/BA,GAGX,YAAA2b,mBAAA,SAAmBnU,GAGf,IAFA,IAAIxH,EAASnD,KAAKwW,aAAa2C,cAAc,YAE7B,MAAAxO,EAAA,eAAS,CAApB,IAAIyC,EAAG,KACJ2R,EAAU/e,KAAKwW,aAAa2C,cAAc,OAE1C/L,EAAItC,QACJiU,EAAQ7X,MAAM4D,MAAWsC,EAAItC,MAAK,MAEtC3H,EAAOyT,YAAYmI,GAGvB,OAAO5b,GAGX,YAAAyZ,eAAA,SAAejZ,GACX,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,MAM7C,OAJAnZ,KAAKqd,YAAY1Z,EAAMR,GACvBnD,KAAKid,eAAetZ,EAAMR,GAC1BnD,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAE/BA,GAGX,YAAA0Z,gBAAA,SAAgBlZ,GACZ,IAAIR,EAASnD,KAAKwW,aAAa2C,cAAc,MAQ7C,OANAnZ,KAAKqd,YAAY1Z,EAAMR,GACvBnD,KAAKid,eAAetZ,EAAMR,GAC1BnD,KAAKsd,kBAAkB3Z,EAAKmE,SAAU3E,GAElCQ,EAAKoI,OAAM5I,EAAO6b,QAAUrb,EAAKoI,MAE9B5I,GAGX,YAAAma,kBAAA,SAAkBpW,EAA+B+X,GAC7C,GAAa,MAAT/X,EAGJ,IAAK,IAAI8R,KAAO9R,EACRA,EAAM+R,eAAeD,KACrBiG,EAAM/X,MAAM8R,GAAO9R,EAAM8R,KAKrC,YAAAqE,YAAA,SAAY/c,EAAoB2e,GACxB3e,EAAM+E,YACN4Z,EAAM5Z,UAAY/E,EAAM+E,YAGhC,YAAAgW,eAAA,SAAejZ,EAAY8c,GACvB,OAAUlf,KAAKqF,UAAS,QAAQjD,EAAE,IAAI8c,GAG1C,YAAAzD,cAAA,SAAc0D,EAAmBra,EAAgCsa,QAAA,IAAAA,MAAA,MAC7D,IAAIjc,EAASgc,EAAY,SAEzB,IAAK,IAAMnG,KAAOlU,EACd3B,GAAU,KAAK6V,EAAG,KAAKlU,EAAOkU,GAAI,QAMtC,OAHIoG,IACAjc,GAAU,IAAMic,GAEbjc,EAAS,SAGpB,YAAAqY,iBAAA,SAAiBpZ,EAAY8c,GACzB,OAAUlf,KAAKqF,UAAS,QAAQjD,EAAE,IAAI8c,GAG1C,YAAAxD,mBAAA,SAAmBra,EAAce,GAAjC,WAMI,MAAO,IALMf,EAAK8N,QAAQ,SAAS,SAAArJ,GAC/B,IAAIoZ,EAAMtQ,SAAS9I,EAAEuZ,UAAU,GAAI,IAAM,EACzC,MAAO,YAAY,EAAK7D,iBAAiBpZ,EAAI8c,GAAI,QAG/B,KAG1B,YAAArD,oBAAA,SAAoBrU,GAWhB,MAVc,CACV,KAAQ,OACR,OAAU,OACV,QAAW,UACX,YAAe,cACf,YAAe,cACf,WAAc,cACd,WAAc,eAGHA,IAAWA,GAG9B,YAAAmR,gBAAA,SAAgBtT,GACZ,OAAOA,aAAS,EAATA,EAAW8J,QAAQ,SAAU,KAAKA,QAAQ,QAAS,QAElE,EAl4BA,GAo4BA,SAAS0I,EAAeyH,EAAwBzb,GAC5C,IAAc,UAAAA,EAAA,eAAQ,CAAjB,IAAIe,EAAC,KACN0a,EAAU1I,YAAYhS,IAG9B,SAAS8R,EAAkB/S,GACvB,KAAOA,EAAK4b,YACR5b,EAAK6b,YAAY7b,EAAK4b,YAI9B,SAASpH,EAAmBiH,GACxB,IAAIK,EAAezP,SAASmJ,cAAc,SAE1C,OADAsG,EAAalB,UAAYa,EAClBK,EAGX,SAAS9I,EAAchT,EAAmB+b,GACtC/b,EAAKiT,YAAY5G,SAAS2P,cAAcD,IAt5B/B,EAAA5P,gB,oFClCb,yBAA8BnM,EAAmB8O,EAAsBmN,QAAA,IAAAA,MAAuB,KAE1F,IAAI1F,EAAIvW,EAAKkc,QAAQ,KAEjBC,EAAMnc,EAAKoc,wBACXC,EAAM9F,EAAE6F,wBAERxS,GAAQuS,EAAIvS,KAAOyS,EAAIzS,MAAQqS,EAC/BK,EAAMxN,EAAKyN,MAAK,SAAA3F,GAAK,MAAW,SAAXA,EAAErT,OAAoBqT,EAAElH,SAASvB,MAAQvE,KAElE,GAAU,MAAP0S,EAMH,OAHAtc,EAAKuD,MAAM+W,QAAU,eACrBta,EAAKuD,MAAM4D,MAAYmV,EAAI5M,SAASvB,MAAQvE,EAAK,KAEzC0S,EAAI3M,QACR,IAAK,MACL,IAAK,YACD3P,EAAKuD,MAAMiZ,aAAe,mBAC1B,MAEJ,IAAK,SACL,IAAK,QACL,IAAK,aACDxc,EAAKuD,MAAMiZ,aAAe,qB,0jBC1BtC,aAGA,SAEA,cAGI,WAAYpO,EAAqBhS,EAAc6P,GAA/C,MACI,YAAMmC,EAAKhS,IAAK,K,OAChB,EAAKiS,gBAAkBpC,E,EAa/B,OAlBmC,OAc/B,YAAA/N,SAAA,SAAS3C,GACL2J,OAAOC,OAAO9I,KAAM,EAAAogB,mBAAmBlhB,EAAMc,KAAKyB,SAAS7B,YAC3DI,KAAKqX,cAAgBrX,KAAKgS,gBAAgB9L,mBAAmBhH,IAErE,EAlBA,CAAmC,EAAA6C,MAAtB,EAAAse,iB,wNCNb,aACA,SAwEA,SAAgBzN,EAAejP,EAAeF,GAM1C,IALA,IAAIN,EAAoB,CACpBf,GAAIqB,EAAIpB,KAAKsB,EAAM,SACnB2c,UAAW,IAGD,MAAA7c,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,gBACDT,EAAOod,WAAa9c,EAAIpB,KAAKF,EAAG,OAChC,MACJ,IAAK,cACDgB,EAAOmd,UAAUxc,KAAK0c,EAA6Bre,EAAGsB,KAKlE,OAAON,EAGX,SAAgBmD,EAAuB3C,EAAeF,GAMlD,IALA,IAAIN,EAA4B,CAC5Bf,GAAIqB,EAAIpB,KAAKsB,EAAM,iBACnB8c,OAAQ,IAGE,MAAAhd,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,OACDT,EAAOsB,KAAOhB,EAAIpB,KAAKF,EAAG,OAC1B,MACJ,IAAK,iBACDgB,EAAOud,eAAiBjd,EAAIpB,KAAKF,EAAG,OACpC,MACJ,IAAK,eACDgB,EAAOwd,mBAAqBld,EAAIpB,KAAKF,EAAG,OACxC,MACJ,IAAK,YACDgB,EAAOyd,UAAYnd,EAAIpB,KAAKF,EAAG,OAC/B,MACJ,IAAK,MACDgB,EAAOsd,OAAO3c,KAAKqD,EAAoBhF,EAAGsB,KAKtD,OAAON,EAGX,SAAgBgE,EAAoBxD,EAAeF,GAK/C,IAJA,IAAIN,EAAyB,CACzBiE,MAAO3D,EAAIuD,QAAQrD,EAAM,SAGf,MAAAF,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,QACDT,EAAOqK,MAAQ/J,EAAIpB,KAAKF,EAAG,OAC3B,MACJ,IAAK,aACDgB,EAAO0d,QAAUpd,EAAIuD,QAAQ7E,EAAG,OAChC,MACJ,IAAK,SACDgB,EAAOqE,OAAS/D,EAAIpB,KAAKF,EAAG,OAC5B,MACJ,IAAK,UACDgB,EAAO9B,KAAOoC,EAAIpB,KAAKF,EAAG,OAC1B,MACJ,IAAK,QACDgB,EAAO2d,cAAgBrd,EAAIpB,KAAKF,EAAG,OACnC,MACJ,IAAK,iBACDgB,EAAO4d,gBAAkBtd,EAAIpB,KAAKF,EAAG,OACrC,MACJ,IAAK,MACDgB,EAAOsC,eAAiB,EAAAC,yBAAyBvD,EAAGsB,GACpD,MACJ,IAAK,MACDN,EAAOwC,SAAW,EAAAC,mBAAmBzD,EAAGsB,IAKpD,OAAON,EAGX,SAAgBqd,EAA6B7c,EAAeF,GAKxD,IAJA,IAAIN,EAAiC,CACjCiE,MAAO3D,EAAIuD,QAAQrD,EAAM,SAGf,MAAAF,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,gBACDT,EAAOqK,MAAQ/J,EAAIuD,QAAQ7E,EAAG,OAC9B,MACJ,IAAK,MACDgB,EAAO6d,eAAiB7Z,EAAoBhF,EAAGsB,IAK3D,OAAON,EAGX,SAAgB8d,EAA4Btd,EAAeF,GAEvD,IAAIoD,EAAOpD,EAAID,QAAQG,EAAM,QACzBmD,EAAQD,GAAQpD,EAAID,QAAQqD,EAAM,SAClCE,EAAYD,GAASrD,EAAID,QAAQsD,EAAO,aAE5C,OAAOC,EAAY,CACf3E,GAAIqB,EAAIpB,KAAKsB,EAAM,kBACnBud,YAAazd,EAAIpB,KAAK0E,EAAW,MACjCG,MAAOzD,EAAIpB,KAAKyE,EAAO,UACvB,KA3IR,8BAAmCnD,EAAeF,GAO9C,IANA,IAAIN,EAAkC,CAClCge,WAAY,GACZC,mBAAoB,GACpBC,eAAgB,IAGN,MAAA5d,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,MACDT,EAAOge,WAAWrd,KAAK8O,EAAezQ,EAAGsB,IACzC,MACJ,IAAK,cACDN,EAAOie,mBAAmBtd,KAAKwC,EAAuBnE,EAAGsB,IACzD,MACJ,IAAK,eACDN,EAAOke,eAAevd,KAAKmd,EAA4B9e,EAAGsB,KAKtE,OAAON,GAGX,mBAoBA,2BA6BA,wBAqCA,iCAmBA,iC,wHClLA,aACA,SAEA,0BAA+Bme,GAI3B,OAHI,UAAO9e,qBACP8e,EAAYA,EAAUnS,QAAQ,aAAc,MAEzC,IAAIoS,WAAYC,gBAAgBF,EAAW,oBAGtD,8BAAmC3d,GAC/B,OAAO,IAAI8d,eAAgBC,kBAAkB/d,IAGjD,+BA+DA,OA9DI,YAAA1B,SAAA,SAAS0B,EAAeC,QAAA,IAAAA,MAAA,MAGpB,IAFA,IAAMT,EAAS,GAENgL,EAAI,EAAG4M,EAAIpX,EAAKyK,WAAWC,OAAQF,EAAI4M,EAAG5M,IAAK,CACpD,IAAIvJ,EAAIjB,EAAKyK,WAAWuT,KAAKxT,GAEX,GAAdvJ,EAAE0J,UAA+B,MAAb1K,GAAsBgB,EAAchB,WAAaA,GACrET,EAAOW,KAAKc,GAGpB,OAAOzB,GAGX,YAAAK,QAAA,SAAQG,EAAeC,GACnB,IAAK,IAAIuK,EAAI,EAAG4M,EAAIpX,EAAKyK,WAAWC,OAAQF,EAAI4M,EAAG5M,IAAK,CACpD,IAAIvJ,EAAIjB,EAAKyK,WAAWuT,KAAKxT,GAE7B,GAAkB,GAAdvJ,EAAE0J,UAAkB1J,EAAchB,WAAaA,EAC/C,OAAOgB,EAGf,OAAO,MAGX,YAAAvC,KAAA,SAAKsB,EAAeC,GAChB,IAAK,IAAIuK,EAAI,EAAG4M,EAAIpX,EAAKie,WAAWvT,OAAQF,EAAI4M,EAAG5M,IAAK,CACpD,IAAIkB,EAAI1L,EAAKie,WAAWD,KAAKxT,GAE7B,GAAIkB,EAAEzL,WAAaA,EACf,OAAOyL,EAAEyC,MAGjB,OAAO,MAGX,YAAA9K,QAAA,SAAQxC,EAAegK,EAAkBqT,QAAA,IAAAA,MAAA,MACrC,IAAI1U,EAAMnN,KAAKqC,KAAKmC,EAAMgK,GAC1B,OAAOrB,EAAMyB,SAASzB,GAAO0U,GAGjC,YAAAC,UAAA,SAAUtd,EAAegK,EAAkBqT,QAAA,IAAAA,MAAA,MACvC,IAAI1U,EAAMnN,KAAKqC,KAAKmC,EAAMgK,GAC1B,OAAOrB,EAAM4U,WAAW5U,GAAO0U,GAGnC,YAAA1c,SAAA,SAASX,EAAegK,EAAkBqT,GAGtC,YAHsC,IAAAA,MAAA,MAC9B7hB,KAAKqC,KAAKmC,EAAMgK,IAGpB,IAAK,IAAK,OAAO,EACjB,IAAK,IAAK,OAAO,EACjB,QAAS,OAAOqT,IAIxB,YAAA3N,eAAA,SAAe1P,EAAegK,GAC1B,OAAO,EAAAwT,kBAAkBhiB,KAAKqC,KAAKmC,EAAMgK,KAG7C,YAAAyC,WAAA,SAAWzM,EAAegK,EAAkBqD,GACxC,YADwC,IAAAA,MAAyB,EAAAX,YAAYrC,KACtE,EAAAoT,cAAcjiB,KAAKqC,KAAKmC,EAAMgK,GAAWqD,IAExD,EA/DA,GAAa,EAAAhS,YAiEb,IAAMqiB,EAAkB,IAAIriB,EAE5B,UAAeqiB,G,8KCjFf,IAAMC,EAAeC,OAAO,mBAiF5B,SAAgBC,EAAkBhe,EAAY2J,EAAasU,GACnDA,EAAOjhB,OAEP2M,GADIuU,EAAOD,EAAOjhB,MACNkhB,MAAQA,EAAKC,QAAUD,EAAKC,QAAQne,EAAEyF,aAAezF,EAAEyF,aAGvE,IAAK,IAAIqE,EAAI,EAAG4M,EAAI1W,EAAEud,WAAWvT,OAAQF,EAAI4M,EAAG5M,IAAK,CACjD,IACIoU,EADAlgB,EAAOgC,EAAEud,WAAWD,KAAKxT,GAGlB,OAFPoU,EAAOD,EAAOxJ,MAAMzW,EAAKuB,cAK7BoK,EAAOuU,EAAKA,MAAQA,EAAKC,QAAUD,EAAKC,QAAQngB,EAAKyP,OAASzP,EAAKyP,OAGvE,OAAO9D,EAeX,SAASyU,EAAsBC,GAC3B,OAAOA,EAAMP,KAAkBO,EAAMP,GAAgB,CACjD9gB,KAAM,KACNyX,MAAO,GACPjV,SAAU,KAhHlB,mBAAwBY,GACpB,OAAO,SAASnC,GACCmgB,EAAsBngB,EAAOqgB,WACnCC,SAAWne,IAI1B,sB,IAAyB,sDACrB,OAAO,SAASnC,GACZ,IAAIggB,EAASG,EAAsBngB,EAAOqgB,WAC1CL,EAAOze,SAAW,GAClB,IAAa,UAAA5B,EAAA,eAAU,CAAnB,IAAI2C,EAAC,KACDmQ,EAAK0N,EAAsB7d,EAAE+d,WACjCL,EAAOze,SAASkR,EAAG6N,UAAY,CAAEF,MAAO9d,EAAE+d,UAAWL,OAAQvN,MAKzE,oBAAyByN,GACrB,YADqB,IAAAA,MAAA,MACd,SAAUlgB,EAAaigB,GACbE,EAAsBngB,GAC5BjB,KAAO,CAAEkhB,KAAI,EAAEC,QAAO,KAIrC,yBAA8BhU,EAAkBgU,GAC5C,YAD4C,IAAAA,MAAA,MACrC,SAAUlgB,EAAaigB,GACbE,EAAsBngB,GAC5BwW,MAAMtK,GAAY,CAAE+T,KAAI,EAAEC,QAAO,KAIhD,0BAA+BK,GAC3B,IAAIP,EAAwB,CACxBjhB,KAAM,KACNyX,MAAO,GACP8J,SAAU,KACV/e,SAAU,MAGd,IAAI,IAAIqW,KAAK2I,EAAW,CACpB,IAAIlU,EAAIkU,EAAU3I,GAEV,SAALA,EACCoI,EAAOM,SAAWjU,EAEdA,EAAEmU,QACNR,EAAOxJ,MAAMnK,EAAEmU,OAAS,CAAEP,KAAMrI,EAAGsI,QAAS,OAIpD,OAAOF,GAGX,8BAAgB7a,EAA4BpD,EAAY2J,GACpD,IACIsU,EADQzZ,OAAOka,eAAe/U,GACfmU,GAEnB,GAAc,MAAVG,EACA,OAAOtU,EAEXqU,EAAkBhe,EAAG2J,EAAQsU,GAE7B,IAAK,IAAInU,EAAI,EAAG4M,EAAI1W,EAAER,SAASwK,OAAQF,EAAI4M,EAAG5M,IAAM,CAChD,IAAIxK,EAAOU,EAAER,SAAS8d,KAAKxT,GACvB6U,EAAQV,EAAOze,SAASF,EAAKC,WAEjC,GAAIof,EAAO,CACP,IAAIC,EAAMpa,OAAOqa,OAAOF,EAAMN,OAC9Bjb,EAAmB9D,EAAMsf,GACxBjV,EAAenK,SAASC,KAAKmf,IAItC,OAAOjV,GAGX,uB,8FCjFA,aACA,SAWA,iCAAsCrK,EAAeF,GAGjD,IAFA,IAAIN,EAA2B,GAEjB,MAAAM,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAOA,EAAEyB,WACL,IAAK,aACD,IAAIuf,EAAU1f,EAAID,QAAQrB,EAAG,OAEzBghB,IACAhgB,EAAOsC,eAAiB,EAAAC,yBAAyByd,EAAS1f,IAC9D,MAEJ,IAAK,aACD,IAAI2f,EAAU3f,EAAID,QAAQrB,EAAG,OAEzBihB,IACAjgB,EAAOwC,SAAW,EAAAC,mBAAmBwd,EAAS3f,KAK9D,OAAON,I,mFCjCX,aACA,SA2BA,sBAA2BQ,EAAeF,GAQtC,IAPA,IAAIN,EAAS,CACTf,GAAIqB,EAAIpB,KAAKsB,EAAM,WACnB9C,KAAM4C,EAAIpB,KAAKsB,EAAM,QACrB0f,YAAa5f,EAAI0B,SAASxB,EAAM,eAAe,GAC/C4L,QAAS9L,EAAI0B,SAASxB,EAAM,WAAW,IAG7B,MAAAF,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,MACDT,EAAOsC,eAAiB,EAAAC,yBAAyBvD,EAAGsB,GACpD,MAEJ,IAAK,MACDN,EAAOwC,SAAW,EAAAC,mBAAmBzD,EAAGsB,GACxC,MAEJ,IAAK,OAIL,IAAK,OACDN,EAAOsB,KAAOhB,EAAIpB,KAAKF,EAAG,OAC1B,MAEJ,IAAK,UACDgB,EAAOuB,QAAUjB,EAAIpB,KAAKF,EAAG,OAC7B,MAEJ,IAAK,UACDgB,EAAOoC,QAAU9B,EAAIpB,KAAKF,EAAG,OAAOqD,MAAM,KAC1C,MAEJ,IAAK,OACDrC,EAAOmgB,KAAO7f,EAAIpB,KAAKF,EAAG,OAC1B,MAEJ,IAAK,OACDgB,EAAOmC,KAAO7B,EAAIpB,KAAKF,EAAG,OAC1B,MAEJ,IAAK,eACDgB,EAAOogB,cAAe,EACtB,MAEJ,IAAK,SACDpgB,EAAOqgB,QAAS,EAChB,MAEJ,IAAK,aACDrgB,EAAOsgB,YAAa,EACpB,MAEJ,IAAK,SACDtgB,EAAOugB,QAAS,EAChB,MAEJ,IAAK,aACDvgB,EAAOwgB,WAAalgB,EAAIuD,QAAQ7E,EAAG,QAK/C,OAAOgB,I,ykBC3FX,aAIA,SACA,SACA,SAEA,cASI,WAAY4O,EAAqBhS,EAAc6P,GAA/C,MACI,YAAMmC,EAAKhS,IAAK,K,OAChB,EAAKiS,gBAAkBpC,E,EAQ/B,OAnBgC,OAc5B,YAAA/N,SAAA,SAAS3C,GACL2J,OAAOC,OAAO9I,KAAM4jB,EAAgB1kB,EAAMc,KAAKyB,SAAS7B,YACxDI,KAAKiX,SAAW,EAAA4M,MAAM7jB,KAAK2E,QAAQ,SAAAmB,GAAK,OAAAA,EAAE1D,MAC1CpC,KAAKgX,UAAYhX,KAAKgS,gBAAgB7N,gBAAgBjF,IAE9D,EAnBA,CAAgC,EAAA6C,MA0BhC,SAAgB6hB,EAAgBjgB,EAAeF,GAK3C,IAJA,IAAIN,EAAS,CACTwB,OAAQ,IAGE,MAAAlB,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,cACDT,EAAO2gB,SAAW,EAAAC,sBAAsB5hB,EAAGsB,GAC3C,MAEJ,IAAK,QACDN,EAAOwB,OAAOb,KAAK,EAAAQ,WAAWnC,EAAGsB,KAK7C,OAAON,EA3CE,EAAA6gB,aA0Bb,qB,YC7BA,SAAgBzG,EAAY0G,EAAmB5e,GAC3C,OAAS4e,EAA4BA,EAAS,IAAI5e,EAA5BA,E,4GAL1B,2BAAgC7B,EAAsB6B,GAClD,OAAO7B,EAAQ6B,UAAYkY,EAAY/Z,EAAQ6B,UAAWA,IAG9D,gBAIA,qBAA0BtF,GACtB,IAAImkB,EAAKnkB,EAAKokB,YAAY,KAAO,EAIjC,MAAO,CAHY,GAAND,EAAU,GAAKnkB,EAAKsf,UAAU,EAAG6E,GACzB,GAANA,EAAUnkB,EAAOA,EAAKsf,UAAU6E,KAKnD,iBAA+BE,EAAYC,GACvC,OAAOD,EAAME,QAAO,SAACjV,EAAG7I,GAEpB,OADA6I,EAAEgV,EAAG7d,IAAMA,EACJ6I,IACR,M,mGCnBP,aAEA,SACA,SACA,SACA,SACA,SACA,SAEA,0BAKI,KAAAkV,MAAgB,GAChB,KAAAC,SAAiC,GAwGrC,OAjGW,EAAAnkB,KAAP,SAAYokB,EAAM7U,GACd,IAAIlH,EAAI,IAAI6H,EAIZ,OAFA7H,EAAEgc,QAAU9U,EAEL,EAAAjP,eAAeN,KAAKokB,GACtBhkB,MAAK,SAAAsR,GAGF,OAFArJ,EAAEjH,SAAWsQ,EAENrJ,EAAEjH,SAASP,uBACnBT,MAAK,SAAAkB,G,MACJ+G,EAAE/G,KAAOA,EAEL,MAA6E,QAA1D,EAAAA,EAAKue,MAAK,SAAA1Z,GAAK,OAAAA,EAAE3F,MAAQ,EAAAmB,kBAAkB2iB,yBAAe,QAAI,CACjFriB,OAAQ,oBACRzB,KAAM,EAAAmB,kBAAkB2iB,gBAFtBriB,EAAM,SAAEzB,EAAI,OAKlB,OAAO6H,EAAEkc,qBAAqBtiB,EAAQzB,GAAMJ,MAAK,WAAM,OAAAiI,SAInE,YAAA9H,KAAA,SAAKC,GACD,YADC,IAAAA,MAAA,QACMb,KAAKyB,SAASb,KAAKC,IAGtB,YAAA+jB,qBAAR,SAA6B7kB,EAAcc,GAA3C,WACI,GAAIb,KAAKwkB,SAASzkB,GACd,OAAOiB,QAAQC,QAAQjB,KAAKwkB,SAASzkB,IAEzC,IAAKC,KAAKyB,SAAS3B,OAAOC,GACtB,OAAOiB,QAAQC,QAAQ,MAE3B,IAAI4jB,EAAa,KAEjB,OAAOhkB,GACH,KAAK,EAAAmB,kBAAkB2iB,eACnB3kB,KAAK0X,aAAemN,EAAO,IAAI,EAAA3S,aAAalS,KAAKyB,SAAU1B,EAAMC,KAAK0kB,SACtE,MAEJ,KAAK,EAAA1iB,kBAAkB8iB,UACnB9kB,KAAKsX,cAAgBuN,EAAO,IAAI,EAAA3O,cAAclW,KAAKyB,SAAU1B,GAC7D,MAEJ,KAAK,EAAAiC,kBAAkB+iB,UACnB/kB,KAAKmX,cAAgB0N,EAAO,IAAI,EAAAxE,cAAcrgB,KAAKyB,SAAU1B,EAAMC,KAAK0kB,SACxE,MAEJ,KAAK,EAAA1iB,kBAAkBgjB,OACnBhlB,KAAK8W,WAAa+N,EAAO,IAAI,EAAAb,WAAWhkB,KAAKyB,SAAU1B,EAAMC,KAAK0kB,SAI1E,OAAY,MAARG,EACO7jB,QAAQC,QAAQ,OAE3BjB,KAAKwkB,SAASzkB,GAAQ8kB,EACtB7kB,KAAKukB,MAAMzgB,KAAK+gB,GAETA,EAAKxkB,OAAOI,MAAK,WACpB,GAAiB,MAAbokB,EAAKljB,MAAoC,GAApBkjB,EAAKljB,KAAK0M,OAC/B,OAAOwW,EAEN,IAAAI,EAAU,EAAA7jB,UAAUyjB,EAAK9kB,MAAK,GAC/B4B,EAAOkjB,EAAKljB,KAAKO,KAAI,SAAAgjB,GACrB,OAAO,EAAKN,qBAAqB,GAAGK,EAASC,EAAI5iB,OAAU4iB,EAAIrkB,SAGnE,OAAOG,QAAQU,IAAIC,GAAMlB,MAAK,WAAM,OAAAokB,UAI5C,YAAA1G,kBAAA,SAAkB/b,GACd,OAAOpC,KAAKmlB,aAAanlB,KAAK0X,aAActV,EAAI,QAC3C3B,MAAK,SAAA+F,GAAK,OAAAA,EAAI4e,IAAIC,gBAAgB7e,GAAK,SAGhD,YAAAoV,mBAAA,SAAmBxZ,GACf,OAAOpC,KAAKmlB,aAAanlB,KAAKmX,cAAe/U,EAAI,QAC5C3B,MAAK,SAAA+F,GAAK,OAAAA,EAAI4e,IAAIC,gBAAgB7e,GAAK,SAGhD,YAAAwR,SAAA,SAAS5V,EAAY4W,GACjB,OAAOhZ,KAAKmlB,aAAanlB,KAAKsX,cAAelV,EAAI,cAC5C3B,MAAK,SAAA+F,GAAK,OAAAA,EAAI4e,IAAIC,gBAAgB,IAAIC,KAAK,CAACC,EAAY/e,EAAGwS,MAAUxS,MAGtE,YAAA2e,aAAR,SAAqBN,EAAYziB,EAAYojB,GACzC,IAAIN,EAAML,EAAKljB,KAAKue,MAAK,SAAA1Z,GAAK,OAAAA,EAAEpE,IAAMA,KAEtC,GAAW,MAAP8iB,EACA,OAAOlkB,QAAQC,QAAQ,MAEtB,IAAAwkB,EAAU,EAAArkB,UAAUyjB,EAAK9kB,MAAK,GAEnC,OAAOC,KAAKyB,SAASpB,KAAKolB,EAASP,EAAI5iB,OAAQkjB,IAEvD,EA9GA,GAgHA,SAAgBD,EAAY/V,EAAkBkW,GAK1C,IAJA,IACMC,EAAUD,EAAQvW,QAAQ,SAAU,IACpCyW,EAAU,IAAIC,MAFR,IAIJ1X,EAAI,EAAGA,EAJH,GAIYA,IACpByX,EALQ,GAKMzX,EAAI,GAAKS,SAAS+W,EAAQG,OAAW,EAAJ3X,EAAO,GAAI,IAE9D,IAASA,EAAI,EAAGA,EAAI,GAAIA,IACpBqB,EAAKrB,GAAKqB,EAAKrB,GAAKyX,EAAQzX,EARpB,IAUZ,OAAOqB,EA3HE,EAAAe,eAgHb,iB,QC5HAlR,EAAOD,QAAUM,ICCbqmB,EAA2B,G,OAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU7mB,QAG3C,IAAIC,EAAS0mB,EAAyBE,GAAY,CAGjD7mB,QAAS,IAOV,OAHA8mB,EAAoBD,GAAUE,KAAK9mB,EAAOD,QAASC,EAAQA,EAAOD,QAAS4mB,GAGpE3mB,EAAOD,QCjBW4mB,CAAoB,M","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__792__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType): Promise<any> {\r\n        return this._zip.files[path]?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"string\").then(text => {\r\n            if (!text)\r\n                return;\r\n\r\n            return parseRelationships(parseXmlString(text).firstElementChild, this.xmlParser);\r\n        })\r\n    }\r\n}","import { parseXmlString, serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path, 'string').then(text => {\r\n                this._xmlDocument = parseXmlString(text);\r\n                this.parseXml(this._xmlDocument.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","export default {\r\n    trimXmlDeclaration: false\r\n}","import { DocxElement, IDomNumbering, NumberingPicBullet } from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, RunElement } from './dom/run';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\nimport { BodyElement } from './dom/body';\r\nimport { BreakElement } from './dom/break';\r\nimport { HyperlinkElement } from './dom/hyperlink';\r\nimport { TableCellElement } from './dom/table-cell';\r\nimport { TableColumn, TableElement } from './dom/table';\r\nimport { DrawingElement } from './dom/drawing';\r\nimport { TableRowElement } from './dom/table-row';\r\nimport { ImageElement } from './dom/image';\r\nimport { deserializeElement } from './parser/xml-serialize';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        const result = new DocumentElement();\r\n\r\n        result.body = new BodyElement();\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.body.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.body.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.body.sectionProps = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): ParagraphElement {\r\n        const result = deserializeElement(node, new ParagraphElement());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph.props, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: DocxElement): HyperlinkElement {\r\n        var result = deserializeElement(node, new HyperlinkElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: DocxElement): RunElement {\r\n        var result = deserializeElement(node, new RunElement(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"lastRenderedPageBreak\": {\r\n                    const breakElem = new BreakElement();\r\n                    breakElem.type = 'page';\r\n                    result.children.push(breakElem);\r\n                }\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n\r\n        Object.assign(run.props, parseRunProperties(elem, globalXmlParser));\r\n\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): DocxElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): DocxElement {\r\n        var result = new DrawingElement();\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): DocxElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): ImageElement {\r\n        var result = new ImageElement();\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): TableElement {\r\n        var result = new TableElement();\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): TableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: TableElement) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: TableElement) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): TableRowElement {\r\n        var result = new TableRowElement();\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: TableRowElement) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): TableCellElement {\r\n        var result = new TableCellElement();\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: TableCellElement) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport { default as config } from './config';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { SectionProperties } from \"./section\";\r\n\r\nexport class BodyElement extends DocxContainer {\r\n    sectionProps: SectionProperties;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"bookmarkStart\")\r\nexport class BookmarkStartElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n    @fromAttribute(\"name\")\r\n    name: string;\r\n    @fromAttribute(\"colFirst\")\r\n    colFirst: number;\r\n    @fromAttribute(\"colLast\")\r\n    colLast: number;\r\n}\r\n\r\n@element(\"bookmarkEnd\")\r\nexport class BookmarkEndElement extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('br')\r\nexport class BreakElement extends DocxElement {\r\n    @fromAttribute(\"type\")\r\n    type: \"page\" | \"column\" | \"textWrapping\";\r\n    \r\n    @fromAttribute(\"clear\")\r\n    clear: \"all\" | \"left\" | \"right\" | \"none\";\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Underline {\r\n    color: string;\r\n    type: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    documentElement: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.documentElement = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","import { BodyElement } from \"./body\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\nexport class DocumentElement extends DocxElement {\r\n    body: BodyElement;\r\n}","export class DocxElement {\r\n    className: string = null;\r\n    cssStyle: Record<string, string> = {};\r\n\r\n    constructor(public parent?: DocxElement) {\r\n    }\r\n}\r\n\r\nexport class DocxContainer extends DocxElement {\r\n    children: DocxElement[] = [];\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { DocxContainer } from \"./dom\";\r\n\r\nexport class DrawingElement extends DocxContainer {\r\n\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('fldChar')\r\nexport class FieldCharElement extends DocxElement {\r\n    @fromAttribute('fldCharType')\r\n    type: 'begin' | 'end' | 'separate'; \r\n}","import globalXmlParser from \"../parser/xml-parser\";\r\nimport { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element('hyperlink')\r\nexport class HyperlinkElement extends DocxContainer {\r\n    @fromAttribute('anchor')\r\n    anchor?: string;\r\n\r\n    protected parse(elem: Element) {\r\n        this.anchor = globalXmlParser.attr(elem, \"anchor\");\r\n    }\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class ImageElement extends DocxContainer {\r\n    src: string;\r\n}","import { fromText, element } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"instrText\")\r\nexport class InstructionTextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { Length, ns } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { BookmarkEndElement, BookmarkStartElement } from \"./bookmark\";\r\n\r\n@element(\"p\")\r\n@children(BookmarkStartElement, BookmarkEndElement)\r\nexport class ParagraphElement extends DocxContainer {\r\n    props: ParagraphProperties = {} as ParagraphProperties;\r\n}\r\n\r\nexport interface ParagraphProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { Border, parseBorder } from \"./border\";\r\nimport { BreakElement } from \"./break\";\r\nimport { Length, LengthUsage, Underline } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\nimport { FieldCharElement } from \"./fieldChar\";\r\nimport { InstructionTextElement } from \"./instructions\";\r\nimport { SymbolElement } from \"./symbol\";\r\nimport { TabElement } from \"./tab\";\r\nimport { TextElement } from \"./text\";\r\n\r\n@element('r')\r\n@children(TextElement, SymbolElement, TabElement, BreakElement, InstructionTextElement, FieldCharElement)\r\nexport class RunElement extends DocxContainer {\r\n    id?: string;\r\n    styleName: string;\r\n    props: RunProperties = <RunProperties>{};\r\n}\r\n\r\nexport interface RunProperties {\r\n    styleName: string;\r\n    fontSize: Length;\r\n    color: string;\r\n    bold: boolean;\r\n    italics: boolean;\r\n    caps: boolean;\r\n    smallCaps: boolean;\r\n    strike: boolean;\r\n    doubleStrike: boolean;\r\n    outline: boolean;\r\n    imprint: boolean;\r\n    underline: Underline;\r\n    border: Border;\r\n    fonts: RunFonts;\r\n    shading: Shading;\r\n    highlight: string;\r\n    spacing: Length;\r\n    stretch: number;\r\n    verticalAlignment: 'baseline' | 'superscript' | 'subscript' | string;\r\n}\r\n\r\nexport interface Shading {\r\n    foreground: string,\r\n    background: string,\r\n    type: string\r\n}\r\n\r\nexport interface RunFonts {\r\n    ascii: string;\r\n    hAscii: string;\r\n    cs: string;\r\n    eastAsia: string;\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    switch (elem.localName) {\r\n        case 'rStyle': \r\n            props.styleName = xml.attr(elem, 'val');\r\n            break;\r\n\r\n        case 'bdr': \r\n            props.border = parseBorder(elem, xml);\r\n            break;\r\n\r\n        case 'rFonts': \r\n            props.fonts = parseRunFonts(elem, xml);\r\n            break;\r\n\r\n        case 'shd': \r\n            props.shading = parseShading(elem, xml);\r\n            break;\r\n\r\n        case 'highlight': \r\n            props.highlight = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'spacing':\r\n            props.spacing = xml.lengthAttr(elem, 'val');\r\n            break;\r\n\r\n        case 'w':\r\n            props.stretch = xml.percentageAttr(elem, 'val');\r\n            break;\r\n\r\n            case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        case \"b\":\r\n            props.bold = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"strike\":\r\n            props.strike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"dstrike\":\r\n            props.doubleStrike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"i\":\r\n            props.italics = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"u\":\r\n            props.underline = {\r\n                color: xml.attr(elem, \"color\"),\r\n                type: xml.attr(elem, 'val')\r\n            };\r\n            break;\r\n            \r\n        case 'caps':\r\n            props.caps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'smallCaps':\r\n            props.smallCaps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'imprint':\r\n            props.imprint = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'outline':\r\n            props.outline = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'vertAlign':\r\n            props.verticalAlignment = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'emboss':\r\n        case 'shadow':\r\n        case 'vanish':\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseRunFonts(elem: Element, xml: XmlParser): RunFonts {\r\n    return {\r\n        ascii: xml.attr(elem, 'ascii'),\r\n        hAscii: xml.attr(elem, 'hAscii'),\r\n        cs: xml.attr(elem, 'cs'),\r\n        eastAsia: xml.attr(elem, 'eastAsia'),\r\n    };\r\n}\r\n\r\nexport function parseShading(elem: Element, xml: XmlParser): Shading {\r\n    return {\r\n        type: xml.attr(elem, 'val'),\r\n        foreground: xml.attr(elem, 'color'),\r\n        background: xml.attr(elem, 'fill')\r\n    };\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('sym')\r\nexport class SymbolElement extends DocxElement {\r\n    @fromAttribute('font')\r\n    font: string;\r\n    @fromAttribute('char')\r\n    char: string;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('tab')\r\nexport class TabElement extends DocxElement {\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class TableCellElement extends DocxContainer {\r\n    span?: number;\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class TableRowElement extends DocxContainer {\r\n\r\n}","import { DocxContainer } from \"./dom\";\r\n\r\nexport class TableElement extends DocxContainer {\r\n    columns?: TableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface TableColumn {\r\n    width?: string;\r\n}","import { element, fromText } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('t')\r\nexport class TextElement extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomNumbering, DocxContainer, DocxElement } from './dom/dom';\r\nimport { Length, Underline } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { ParagraphElement, ParagraphProperties } from './dom/paragraph';\r\nimport { appendClass, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunFonts, RunProperties, Shading } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\nimport { Border } from './dom/border';\r\nimport { BodyElement } from './dom/body';\r\nimport { TableColumn, TableElement } from './dom/table';\r\nimport { TableRowElement } from './dom/table-row';\r\nimport { TableCellElement } from './dom/table-cell';\r\nimport { HyperlinkElement } from './dom/hyperlink';\r\nimport { DrawingElement } from './dom/drawing';\r\nimport { ImageElement } from './dom/image';\r\nimport { BreakElement } from './dom/break';\r\nimport { TabElement } from './dom/tab';\r\nimport { SymbolElement } from './dom/symbol';\r\nimport { TextElement } from './dom/text';\r\nimport { LineSpacing } from './dom/line-spacing';\r\nimport { Style } from './styles/style';\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    domStyleMap: Record<string, IDomStyle>;\r\n    styleMap: Record<string, Style>;\r\n    currentParagrashStyle: any; \r\n\r\n    constructor(private htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.domStyleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.domStyleMap = this.processStyles(document.stylesPart.domStyles);\r\n            this.styleMap = document.stylesPart.styleMap;\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.documentElement.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: DocxElement) {\r\n        if (\"children\" in element) {\r\n            for (var e of (element as DocxContainer).children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e instanceof TableElement) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: TableElement) {\r\n        for (var r of table.children) {\r\n            for (var c of (r as DocxContainer).children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: BodyElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.sectionProps);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: DocxElement[]): { sectProps: SectionProperties, elements: DocxElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if (elem instanceof ParagraphElement) {\r\n                const styleName = elem.props.styleName;\r\n                const s = this.domStyleMap && styleName ? this.domStyleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem instanceof ParagraphElement)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex((r: DocxContainer) => {\r\n                        rBreakIndex = r.children?.findIndex((t: BreakElement) => t instanceof BreakElement && t.type == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex] as RunElement;\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = Object.assign(new ParagraphElement(), elem, { children: children.slice(pBreakIndex) });\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  Object.assign(new RunElement(), breakRun, { children: runChildren.slice(0, rBreakIndex) });\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderColor(c: string, autoColor: string = 'black'): string {\r\n        if (/[a-f0-9]{6}/i.test(c))\r\n            return `#${c}`;\r\n\r\n        return c === 'auto' ? autoColor : c;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.domStyleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                if (style.paragraphProps && subStyle.target == \"p\") {\r\n                    this.renderParagraphProperties(subStyle.values, style.paragraphProps);\r\n                }\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: DocxElement, parent: DocxElement): Node {\r\n        if (elem instanceof ParagraphElement) {\r\n            return this.renderParagraph(elem);\r\n        } else if (elem instanceof BookmarkStartElement) {\r\n            return this.renderBookmarkStart(elem);\r\n        } else if (elem instanceof RunElement) {\r\n            return this.renderRun(elem);\r\n        } else if (elem instanceof TextElement) {\r\n            return this.renderText(elem);\r\n        } else if (elem instanceof SymbolElement) {\r\n            return this.renderSymbol(elem);\r\n        } else if (elem instanceof TabElement) {\r\n            return this.renderTab(elem);\r\n        } else if (elem instanceof TableElement) {\r\n            return this.renderTable(elem);\r\n        } else if (elem instanceof TableRowElement) {\r\n            return this.renderTableRow(elem);\r\n        } else if (elem instanceof TableCellElement) {\r\n            return this.renderTableCell(elem);\r\n        } else if (elem instanceof HyperlinkElement) {\r\n            return this.renderHyperlink(elem);\r\n        } else if (elem instanceof DrawingElement) {\r\n            return this.renderDrawing(elem);\r\n        }else if (elem instanceof ImageElement) {\r\n            return this.renderImage(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: DocxContainer, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: DocxElement[], parent: DocxElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => {\r\n            let n = this.renderElement(e, parent);\r\n\r\n            if(n && this.options.debug)\r\n                (n as any).$$docxElement = e;\r\n\r\n            return n;\r\n        }).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        const style = elem.props.styleName && this.styleMap?.[elem.props.styleName]; \r\n        const numbering = elem.props.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level ?? 0);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.props.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.props.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraphProperties(style: any, props: ParagraphProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch(p as keyof(ParagraphProperties)) {\r\n                case \"lineSpacing\":\r\n                    this.renderLineSpacing(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderLineSpacing(style: any, spacing: LineSpacing) {   \r\n        //TODO\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch (p as keyof(RunProperties)) {\r\n                case 'highlight':\r\n                    style['background'] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'shading':\r\n                    style['background'] = this.renderShading(v);\r\n                    break;\r\n\r\n                case 'border':\r\n                    style['border'] = this.renderBorder(v);\r\n                    break;\r\n\r\n                case 'color':\r\n                    style[\"color\"] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'fontSize':\r\n                    style[\"font-size\"] = this.renderLength(v);\r\n                    break;\r\n\r\n                case 'bold':\r\n                    style[\"font-weight\"] = v ? 'bold' : 'normal';\r\n                    break;\r\n\r\n                case 'italics':\r\n                    style[\"font-style\"] = v ? 'italic' : 'normal';\r\n                    break;\r\n\r\n                case 'smallCaps':\r\n                    style[\"font-size\"] = v ? 'smaller' : 'none';\r\n                case 'caps':\r\n                    style[\"text-transform\"] = v ? 'uppercase' : 'none';\r\n                    break;\r\n\r\n                case 'strike':\r\n                case 'strike':\r\n                    style[\"text-decoration\"] = v ? 'line-through' : 'none';\r\n                    break;\r\n\r\n                case 'fonts':\r\n                    style[\"font-family\"] = this.renderRunFonts(v);\r\n                    break;\r\n    \r\n                case 'underline':\r\n                    this.renderUnderline(style, v);\r\n                    break;\r\n                \r\n                case 'verticalAlignment':\r\n                    this.renderRunVerticalAlignment(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderRunVerticalAlignment(style: any, align: string) {\r\n        switch(align) {\r\n            case 'subscript': \r\n                style['vertical-align'] = 'sub';\r\n                style['font-size'] = 'small';\r\n                break;\r\n\r\n            case 'superscript': \r\n                style['vertical-align'] = 'super';\r\n                style['font-size'] = 'small';\r\n                break;\r\n        }\r\n    }\r\n\r\n    renderRunFonts(fonts: RunFonts) {\r\n        return [fonts.ascii, fonts.hAscii, fonts.cs, fonts.eastAsia].filter(x => x).map(x => `'${x}'`).join(',');\r\n    }\r\n\r\n    renderBorder(border: Border) {\r\n        if (border.type == 'nil')\r\n            return 'none';\r\n\r\n        return `${this.renderLength(border.size)} solid ${this.renderColor(border.color)}`;\r\n    }\r\n    \r\n    renderShading(shading: Shading) {\r\n        if (shading.type == 'clear')\r\n            return this.renderColor(shading.background, autos.shd);\r\n        \r\n        return this.renderColor(shading.background, autos.shd);\r\n    }\r\n    \r\n    renderUnderline(style: any, underline: Underline) {\r\n        if (underline.type == null || underline.type == \"none\")\r\n            return;\r\n\r\n        switch (underline.type) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        if (underline.color)\r\n            style[\"text-decoration-color\"] = this.renderColor(underline.color);\r\n    }\r\n\r\n    renderHyperlink(elem: HyperlinkElement) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.anchor)\r\n            result.href = elem.anchor;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: DrawingElement) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: ImageElement) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: TabElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, ParagraphElement);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        //this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderRunProperties(result.style, elem.props);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: TableElement) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: TableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: TableRowElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: TableCellElement) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: DocxElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends DocxElement>(elem: DocxElement, type: any): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && !(parent instanceof type))\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertPercentage  } from \"../dom/common\";\r\nimport config from '../config';\r\n\r\nexport function parseXmlString(xmlString: string): Document {\r\n    if (config.trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n    return new DOMParser().parseFromString(xmlString, \"application/xml\");\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    percentageAttr(node: Element, attrName: string): number {\r\n        return convertPercentage(this.attr(node, attrName));\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","const schemaSymbol = Symbol(\"open-xml-schema\");\r\n\r\nexport type Converter = (val: string) => any;\r\n\r\nexport function element(name: string) {\r\n    return function(target: any) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.elemName = name;\r\n    }\r\n}\r\n\r\nexport function children(...elements: any[]) {\r\n    return function(target) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.children = {};\r\n        for(let c of elements) {\r\n            let cs = getPrototypeXmlSchema(c.prototype);\r\n            schema.children[cs.elemName] = { proto: c.prototype, schema: cs };\r\n        }\r\n    }\r\n}\r\n\r\nexport function fromText(convert: Converter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.text = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromAttribute(attrName: string, convert: Converter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.attrs[attrName] = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function buildXmlSchema(schemaObj: any): OpenXmlSchema {\r\n    var schema: OpenXmlSchema = {\r\n        text: null,\r\n        attrs: {},\r\n        elemName: null,\r\n        children: null\r\n    };\r\n\r\n    for(let p in schemaObj) {\r\n        let v = schemaObj[p];\r\n\r\n        if(p == \"$elem\") {\r\n            schema.elemName = v;\r\n        }\r\n        else if(v.$attr) {\r\n            schema.attrs[v.$attr] = { prop: p, convert: null };\r\n        }\r\n    }\r\n\r\n    return schema;\r\n}\r\n\r\nexport function deserializeElement<T = any>(n: Element, output: T): T {\r\n    var proto = Object.getPrototypeOf(output);\r\n    var schema = proto[schemaSymbol];\r\n\r\n    if (schema == null)\r\n        return output;\r\n\r\n    deserializeSchema(n, output, schema);\r\n\r\n    for (let i = 0, l = n.children.length; i < l; i ++) {\r\n        let elem = n.children.item(i);\r\n        let child = schema.children[elem.localName];\r\n\r\n        if (child) {\r\n            let obj = Object.create(child.proto);\r\n            deserializeElement(elem, obj);\r\n            (output as any).children.push(obj);\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function deserializeSchema(n: Element, output: any, schema: OpenXmlSchema) {\r\n    if (schema.text) {\r\n        let prop = schema.text;\r\n        output[prop.prop] = prop.convert ? prop.convert(n.textContent) : n.textContent; \r\n    }\r\n\r\n    for (let i = 0, l = n.attributes.length; i < l; i++) {\r\n        let attr = n.attributes.item(i);\r\n        let prop = schema.attrs[attr.localName];\r\n\r\n        if(prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert ? prop.convert(attr.value) : attr.value; \r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport interface OpenXmlSchema {\r\n    elemName: string;\r\n    text: OpenXmlSchemaProperty;\r\n    attrs: Record<string, OpenXmlSchemaProperty>;\r\n    children: Record<string, any>;\r\n}\r\n\r\nexport interface OpenXmlSchemaProperty {\r\n    prop: string;\r\n    convert: Converter;\r\n}\r\n\r\nfunction getPrototypeXmlSchema(proto: any): OpenXmlSchema {\r\n    return proto[schemaSymbol] || (proto[schemaSymbol] = {\r\n        text: null,\r\n        attrs: {},\r\n        children: {}\r\n    });\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n\r\n    paragraphStyle: any;\r\n    runStyle: any;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseRunProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\nexport interface Style {\r\n    id: string;\r\n    type: StyleType;\r\n    customStyle: boolean\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): Style {\r\n    let result = {\r\n        id: xml.attr(elem, 'styleId'),\r\n        type: xml.attr(elem, 'type'),\r\n        customStyle: xml.boolAttr(elem, 'customStyle', false),\r\n        default: xml.boolAttr(elem, 'default', false),\r\n    } as Style;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { keyBy } from \"../utils\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, Style, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n    styleMap: Record<string, Style>;\r\n    \r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseStylesPart(root, this._package.xmlParser));\r\n        this.styleMap = keyBy(this.styles, s => s.id);\r\n        this.domStyles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { DocxElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: DocxElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"sourceRoot":""}