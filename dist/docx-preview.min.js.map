{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/custom-props-part.ts","webpack://docx/./src/document-props/custom-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/header-footer/elements.ts","webpack://docx/./src/header-footer/parts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/notes/elements.ts","webpack://docx/./src/notes/parts.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/settings/settings-part.ts","webpack://docx/./src/settings/settings.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd {\"root\":\"JSZip\",\"commonjs\":\"jszip\",\"commonjs2\":\"jszip\",\"amd\":\"jszip\"}","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jszip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jszip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"jszip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__626__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n\tEndnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\r\n\tCustomProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/custom-properties\",\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, WmlTable, IDomNumbering,\r\n    WmlHyperlink, IDomImage, OpenXmlElement, WmlTableColumn, WmlTableCell,\r\n    WmlTableRow, NumberingPicBullet, WmlText, WmlSymbol, WmlBreak, WmlNoteReference\r\n} from './document/dom';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport xml from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFieldChar, WmlFieldSimple, WmlInstructionText } from './document/fields';\r\nimport { convertLength, LengthUsage, LengthUsageType } from './document/common';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n\tborderColor: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseNotes(xmlDoc: Element, elemName: string, elemClass: any): any[] {\r\n        var result = [];\r\n\r\n        for (let el of xml.elements(xmlDoc, elemName)) {\r\n            const node = new elemClass();\r\n            node.id = xml.attr(el, \"id\");\r\n            node.noteType = xml.attr(el, \"type\");\r\n            node.children = this.parseBodyElements(el);\r\n            result.push(node);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = xml.element(xmlDoc, \"body\");\r\n        var background = xml.element(xmlDoc, \"background\");\r\n        var sectPr = xml.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, xml) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xmlUtil.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xmlUtil.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n\t\t\t\tcase \"sdt\":\r\n\t\t\t\t\tthis.parseSdt(elem).forEach(el => children.push(el));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xmlUtil.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.attr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.attr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n            //case \"numbering\": result.target = \"p\"; break;\r\n        }\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.attr(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.attr(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.attr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, xml);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, xml);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.attr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xmlUtil.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.attr(n, \"numId\");\r\n                    var abstractNumId = xml.elementAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.element(elem, \"pict\");\r\n        var shape = pict && xml.element(pict, \"shape\");\r\n        var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.attr(imagedata, \"id\"),\r\n            style: xml.attr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.attr(node, \"abstractNumId\");\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyleName: undefined,\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pStyle\":\r\n                    result.pStyleName = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.attr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.attr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\tparseSdt(node: Element): OpenXmlElement[] {\r\n\t\tconst sdtContent = xml.element(node, \"sdtContent\");\r\n\t\treturn sdtContent ? this.parseBodyElements(sdtContent) : [];\r\n\t}\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <WmlParagraph>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, xml));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, xml));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, xml))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n\t\t\t\t\tparagraph.styleName = xml.attr(c, \"val\");\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    paragraph.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.attr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): WmlHyperlink {\r\n        var result: WmlHyperlink = <WmlHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.attr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): WmlRun {\r\n        var result: WmlRun = <WmlRun>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<WmlText>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldSimple\":\r\n                    result.children.push(<WmlFieldSimple>{\r\n                        type: DomType.SimpleField,\r\n                        instruction: xml.attr(c, \"instr\"),\r\n                        lock: xml.boolAttr(c, \"lock\", false),\r\n                        dirty: xml.boolAttr(c, \"dirty\", false)\r\n                    });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n\t\t\t\t\tresult.fieldRun = true;\r\n                    result.children.push(<WmlInstructionText>{\r\n                        type: DomType.Instruction,\r\n                        text: c.textContent\r\n                    });\r\n                    break;\r\n    \r\n                case \"fldChar\":\r\n\t\t\t\t\tresult.fieldRun = true;\r\n                    result.children.push(<WmlFieldChar>{\r\n                        type: DomType.ComplexField,\r\n                        charType: xml.attr(c, \"fldCharType\"),\r\n                        lock: xml.boolAttr(c, \"lock\", false),\r\n                        dirty: xml.boolAttr(c, \"dirty\", false)\r\n                    });\r\n                    break;\r\n\r\n                case \"noBreakHyphen\":\r\n                    result.children.push({ type: DomType.NoBreakHyphen });\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<WmlBreak>{ \r\n                        type: DomType.Break, \r\n                        break: xml.attr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<WmlBreak>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<WmlSymbol>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.attr(c, \"font\"),\r\n                        char: xml.attr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<WmlNoteReference>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.attr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n\t\t\t\tcase \"endnoteReference\":\r\n\t\t\t\t\tresult.children.push(<WmlNoteReference>{ \r\n\t\t\t\t\t\ttype: DomType.EndnoteReference, \r\n\t\t\t\t\t\tid: xml.attr(c, \"id\")\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.styleName = xml.attr(c, \"val\");\r\n                    break;\r\n\r\n\t\t\t\tcase \"vertAlign\":\r\n\t\t\t\t\trun.verticalAlign = values.valueOfVertAlign(c, true);\r\n\t\t\t\t\tbreak;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.lengthAttr(n, \"x\", LengthUsage.Emu);\r\n                        posY.offset = xml.lengthAttr(n, \"y\", LengthUsage.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.lengthAttr(n, \"cx\", LengthUsage.Emu);\r\n                    result.cssStyle[\"height\"] = xml.lengthAttr(n, \"cy\", LengthUsage.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.element(n, \"align\");\r\n                        var offsetNode = xml.element(n, \"posOffset\");\r\n\r\n                        pos.relative = xml.attr(n, \"relativeFrom\") ?? pos.relative;\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xmlUtil.sizeValue(offsetNode, LengthUsage.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.element(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = xml.element(elem, \"blipFill\");\r\n        var blip = xml.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.attr(blip, \"embed\");\r\n\r\n        var spPr = xml.element(elem, \"spPr\");\r\n        var xfrm = xml.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.lengthAttr(n, \"cx\", LengthUsage.Emu);\r\n                    result.cssStyle[\"height\"] = xml.lengthAttr(n, \"cy\", LengthUsage.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.lengthAttr(n, \"x\", LengthUsage.Emu);\r\n                    result.cssStyle[\"top\"] = xml.lengthAttr(n, \"y\", LengthUsage.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): WmlTable {\r\n        var result: WmlTable = { type: DomType.Table, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): WmlTableColumn[] {\r\n        var result = [];\r\n\r\n        xmlUtil.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.lengthAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: WmlTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.styleName = xml.attr(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n\t\t\t\t\ttable.className = values.classNameOftblLook(c);\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n\t\t\t\tcase \"tblStyleColBandSize\":\r\n\t\t\t\t\ttable.colBandSize = xml.intAttr(c, \"val\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"tblStyleRowBandSize\":\r\n\t\t\t\t\ttable.rowBandSize = xml.intAttr(c, \"val\");\r\n\t\t\t\t\tbreak;\r\n\t\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: WmlTable) {\r\n        var topFromText = xml.lengthAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.lengthAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.lengthAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.lengthAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): WmlTableRow {\r\n        var result: WmlTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: WmlTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: WmlTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: WmlTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n        xmlUtil.foreach(elem, c => {\r\n\t\t\tif (handler?.(c))\r\n\t\t\t\treturn;\r\n\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xmlUtil.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.lengthAttr(c, \"val\", LengthUsage.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xmlUtil.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xmlUtil.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n\t\t\t\t\t//TODO\r\n                    // style.verticalAlign = values.valueOfVertAlign(c);\r\n                    break;\r\n\r\n\t\t\t\tcase \"position\":\r\n\t\t\t\t\tstyle.verticalAlign = xml.lengthAttr(c, \"val\", LengthUsage.FontSize);\r\n\t\t\t\t\tbreak;\r\n\t\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"vanish\":\r\n                    if (xml.boolAttr(c, \"val\", true))\r\n                        style[\"display\"] = \"none\";\r\n                    break;\r\n\r\n\t\t\t\tcase \"kern\":\r\n\t\t\t\t\t//TODO\r\n\t\t\t\t\t//style['letter-spacing'] = xml.lengthAttr(elem, 'val', LengthUsage.FontSize);\r\n\t\t\t\t\tbreak;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n\t\t\t\tcase \"wordWrap\":\r\n\t\t\t\t\tif (xml.boolAttr(c, \"val\")) //TODO: test with examples\r\n\t\t\t\t\t\tstyle[\"overflow-wrap\"] = \"break-word\";\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bCs\":  \r\n\t\t\t\tcase \"iCs\":\r\n\t\t\t\tcase \"szCs\":\r\n\t\t\t\tcase \"tabs\": //ignore - tabs is parsed by other parser\r\n\t\t\t\tcase \"outlineLvl\": //TODO\r\n\t\t\t\tcase \"contextualSpacing\": //TODO\r\n\t\t\t\tcase \"tblStyleColBandSize\": //TODO\r\n\t\t\t\tcase \"tblStyleRowBandSize\": //TODO\r\n                case \"webHidden\": //TODO - maybe web-hidden should be implemented\r\n\t\t\t\tcase \"pageBreakBefore\": //TODO - maybe ignore \r\n\t\t\t\tcase \"keepLines\": //TODO - maybe ignore\r\n\t\t\t\tcase \"keepNext\": //TODO - maybe ignore\r\n\t\t\t\tcase \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (this.options.debug)\r\n                        console.warn(`DOCX: Unknown document element: ${elem.localName}.${c.localName}` );\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.attr(node, \"val\");\r\n\r\n        if (val == null)\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"none\":\r\n                style[\"text-decoration\"] = \"none\";\r\n                break;\r\n        }\r\n\r\n        var col = xmlUtil.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.attr(node, \"ascii\");\r\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\r\n\r\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\r\n\r\n        if (fonts.length > 0)\r\n            style[\"font-family\"] = fonts;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.lengthAttr(node, \"firstLine\");\r\n        var hanging = xml.lengthAttr(node, \"hanging\");\r\n        var left = xml.lengthAttr(node, \"left\");\r\n        var start = xml.lengthAttr(node, \"start\");\r\n        var right = xml.lengthAttr(node, \"right\");\r\n        var end = xml.lengthAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.lengthAttr(node, \"before\");\r\n        var after = xml.lengthAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.attr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.attr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.lengthAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.lengthAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xmlUtil.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nclass xmlUtil {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == Node.ELEMENT_NODE)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.attr(node, attrName);\r\n\r\n        if (v) {\r\n            if (v == \"auto\") {\r\n                return autoColor;\r\n            } else if (knownColors.includes(v)) {\r\n                return v;\r\n            }\r\n\r\n            return `#${v}`;\r\n        }\r\n\r\n        var themeColor = xml.attr(node, \"themeColor\");\r\n\r\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\r\n    }\r\n\r\n    static sizeValue(node: Element, type: LengthUsageType = LengthUsage.Dxa) {\r\n        return convertLength(node.textContent, type);\r\n    }\r\n}\r\n\r\nclass values {\r\n    static themeValue(c: Element, attr: string) {\r\n        var val = xml.attr(c, attr); \r\n        return val ? `var(--docx-${val}-font)` : null;\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type = LengthUsage.Dxa;\r\n\r\n        switch (xml.attr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = LengthUsage.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.lengthAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.lengthAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xmlUtil.colorAttr(c, \"color\");\r\n        var size = xml.lengthAttr(c, \"sz\", LengthUsage.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? autos.borderColor : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        const val = xml.attr(c, \"val\");\r\n\t\tconst classes = [\r\n\t\t\t'first-row', 'last-row', 'first-col', 'last-col', \r\n\t\t\t'odd-col', 'even-col', 'odd-row', 'even-row', \r\n\t\t\t'ne-cell', 'nw-cell', 'se-cell', 'sw-cell'\r\n\t\t];\r\n\r\n\t\treturn classes.filter((_, i) => val[i] == '1').join(' ');\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfVertAlign(c: Element, asTagName: boolean = false) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"subscript\": return \"sub\";\r\n            case \"superscript\": return asTagName ? \"sup\" : \"super\";\r\n        }\r\n\r\n        return asTagName ? null : type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.attr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { CustomProperty, parseCustomProps } from \"./custom-props\";\r\n\r\nexport class CustomPropsPart extends Part {\r\n    props: CustomProperty[];\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCustomProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CustomProperty {\r\n\tformatId: string;\r\n\tname: string;\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport function parseCustomProps(root: Element, xml: XmlParser): CustomProperty[] {\r\n\treturn xml.elements(root, \"property\").map(e => {\r\n\t\tconst firstChild = e.firstChild;\r\n\r\n\t\treturn {\r\n\t\t\tformatId: xml.attr(e, \"fmtid\"),\r\n\t\t\tname: xml.attr(e, \"name\"),\r\n\t\t\ttype: firstChild.nodeName,\r\n\t\t\tvalue: firstChild.textContent\r\n\t\t};\r\n\t});\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlBookmarkStart extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface WmlBookmarkEnd extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): WmlBookmarkStart {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): WmlBookmarkEnd {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\",\r\n\tcompatibility: \"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\nexport type Length = string;\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): string {\r\n    //\"simplified\" docx documents use pt's as units\r\n    if (val == null || /.+(p[xt]|[%])$/.test(val)) {\r\n        return val;\r\n    }\r\n\r\n\treturn `${(parseInt(val) * usage.mul).toFixed(2)}${usage.unit ?? ''}`;\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        case \"on\": return true;\r\n        case \"off\": return false;\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    NoBreakHyphen = \"noBreakHyphen\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n\tEndnoteReference = \"endnoteReference\",\r\n    Footnote = \"footnote\",\r\n    Endnote = \"endnote\",\r\n    SimpleField = \"simpleField\",\r\n    ComplexField = \"complexField\",\r\n    Instruction = \"instruction\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    \r\n\tstyleName?: string; //style name\r\n\tclassName?: string; //class mods\r\n\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface WmlHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface WmlNoteReference extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface WmlBreak extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface WmlText extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface WmlSymbol extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface WmlTable extends OpenXmlElement {\r\n    columns?: WmlTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n\r\n\tcolBandSize?: number;\r\n\trowBandSize?: number;\r\n}\r\n\r\nexport interface WmlTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface WmlTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface WmlTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyleName: string;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    suff: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface WmlParagraph extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n\tstyleName?: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface WmlRun extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n\tfieldRun?: boolean;  \r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Borders, parseBorders } from \"./border\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageNumber {\r\n    start: number;\r\n    chapSep: \"colon\" | \"emDash\" | \"endash\" | \"hyphen\" | \"period\" | string;\r\n    chapStyle: string;\r\n    format: \"none\" | \"cardinalText\" | \"decimal\" | \"decimalEnclosedCircle\" | \"decimalEnclosedFullstop\" \r\n        | \"decimalEnclosedParen\" | \"decimalZero\" | \"lowerLetter\" | \"lowerRoman\"\r\n        | \"ordinalText\" | \"upperLetter\" | \"upperRoman\" | string;\r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    pageBorders: Borders;\r\n    pageNumber: PageNumber;\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n    titlePage: boolean;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n\r\n            case \"titlePg\":\r\n                section.titlePage = xml.boolAttr(e, \"val\", true);\r\n                break;\r\n\r\n            case \"pgBorders\":\r\n                section.pageBorders = parseBorders(e, xml);\r\n                break;\r\n\r\n            case \"pgNumType\":\r\n                section.pageNumber = parsePageNumber(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parsePageNumber(elem: Element, xml: XmlParser): PageNumber {\r\n    return {\r\n        chapSep: xml.attr(elem, \"chapSep\"),\r\n        chapStyle: xml.attr(elem, \"chapStyle\"),\r\n        format: xml.attr(elem, \"fmt\"),\r\n        start: xml.intAttr(elem, \"start\")\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n\trenderEndnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n\tuseBase64URL: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true,\r\n\trenderEndnotes: true,\r\n\tuseBase64URL: false\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nconst embedFontTypeMap = {\r\n    embedRegular: 'regular',\r\n    embedBold: 'bold',\r\n    embedItalic: 'italic',\r\n    embedBoldItalic: 'boldItalic',\r\n}\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    embedFontRefs: EmbedFontRef[];\r\n}\r\n\r\nexport interface EmbedFontRef {\r\n    id: string;\r\n    key: string;\r\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\r\n}\r\n\r\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\r\n    return xml.elements(root).map(el => parseFont(el, xml));\r\n}\r\n\r\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xml.attr(elem, \"name\"),\r\n        embedFontRefs: []\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n            case \"embedBold\":\r\n            case \"embedItalic\":\r\n            case \"embedBoldItalic\":\r\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\r\n    return { \r\n        id: xml.attr(elem, \"id\"), \r\n        key: xml.attr(elem, \"fontKey\"),\r\n        type: embedFontTypeMap[elem.localName]\r\n    };\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { OpenXmlElement } from \"../document/dom\";\r\nimport { WmlHeader, WmlFooter } from \"./elements\";\r\n\r\nexport abstract class BaseHeaderFooterPart<T extends OpenXmlElement = OpenXmlElement> extends Part {\r\n    rootElement: T;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.rootElement = this.createRootElement();\r\n        this.rootElement.children = this._documentParser.parseBodyElements(root);\r\n    }\r\n\r\n    protected abstract createRootElement(): T;\r\n}\r\n\r\nexport class HeaderPart extends BaseHeaderFooterPart<WmlHeader> {\r\n    protected createRootElement(): WmlHeader {\r\n        return new WmlHeader();\r\n    }\r\n}\r\n\r\nexport class FooterPart extends BaseHeaderFooterPart<WmlFooter> {\r\n    protected createRootElement(): WmlFooter {\r\n        return new WmlFooter();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, WmlTable, IDomNumbering,\r\n    WmlHyperlink, IDomImage, OpenXmlElement, WmlTableColumn, WmlTableCell, WmlText, WmlSymbol, WmlBreak, WmlNoteReference\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { WmlParagraph } from './document/paragraph';\r\nimport { escapeClassName, keyBy, mergeDeep } from './utils';\r\nimport { computePixelToPoint, updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { FooterHeaderReference, SectionProperties } from './document/section';\r\nimport { WmlRun, RunProperties } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { WmlBaseNote, WmlFootnote } from './notes/elements';\r\nimport { ThemePart } from './theme/theme-part';\r\nimport { BaseHeaderFooterPart } from './header-footer/parts';\r\nimport { Part } from './common/part';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: Record<string, IDomStyle> = {};\r\n\tcurrentPart: Part = null;\r\n\r\n    footnoteMap: Record<string, WmlFootnote> = {};\r\n\tendnoteMap: Record<string, WmlFootnote> = {};\r\n    currentFootnoteIds: string[];\r\n    currentEndnoteIds: string[] = [];\r\n    usedHederFooterParts: any[] = [];\r\n\r\n\tdefaultTabSize: Length;\t\r\n\tcurrentTabs: any[] = [];\r\n\ttabsTimeout: any = 0;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.themePart) {\r\n            appendComment(styleContainer, \"docxjs document theme values\");\r\n            this.renderTheme(document.themePart, styleContainer);\r\n        }\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docxjs document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            this.prodessNumberings(document.numberingPart.domNumberings);\r\n\r\n            appendComment(styleContainer, \"docxjs document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.endnotesPart) {\r\n            this.endnoteMap = keyBy(document.endnotesPart.notes, x => x.id);\r\n        }\r\n\r\n\t\tif (document.settingsPart) {\r\n\t\t\tthis.defaultTabSize = document.settingsPart.settings?.defaultTabStop;\r\n\t\t}\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\r\n        } else {\r\n            appendChildren(bodyContainer, sectionElements);\r\n        }\r\n\r\n\t\tthis.refreshTabStops();\r\n    }\r\n\r\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\r\n        const variables = {};\r\n        const fontScheme = themePart.theme?.fontScheme;\r\n\r\n        if (fontScheme) {\r\n            if (fontScheme.majorFont) {\r\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\r\n            }\r\n\r\n            if (fontScheme.minorFont) {\r\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\r\n            }\r\n        }\r\n\r\n        const colorScheme = themePart.theme?.colorScheme;\r\n\r\n        if (colorScheme) {\r\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\r\n                variables[`--docx-${k}-color`] = `#${v}`;\r\n            }\r\n        }\r\n\r\n        const cssText = this.styleToString(`.${this.className}`, variables);\r\n        styleContainer.appendChild(createStyleElement(cssText));\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts) {\r\n            for (let ref of f.embedFontRefs) {\r\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\r\n                    const cssValues = {\r\n                        'font-family': f.name,\r\n                        'src': `url(${fontData})`\r\n                    };\r\n\r\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-weight'] = 'bold';\r\n                    }\r\n\r\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-style'] = 'italic';\r\n                    }\r\n\r\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\r\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\r\n                    styleContainer.appendChild(createStyleElement(cssText));\r\n\t\t\t\t\tthis.refreshTabStops();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    processStyleName(className: string): string {\r\n        return className ? `${this.className}_${escapeClassName(className)}`: this.className;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\r\n\r\n        for (const style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n\r\n                for (const baseValues of baseStyle.styles) {\r\n                    const styleValues = style.styles.find(x => x.target == baseValues.target);\r\n\r\n\t\t\t\t\tif (styleValues) {\r\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstyle.styles.push({ target: baseValues.target, values: { ...baseValues.values } });\r\n                    }\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processStyleName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    prodessNumberings(numberings: IDomNumbering[]) {\r\n        for (let num of numberings.filter(n => n.pStyleName)) {\r\n            const style = this.findStyle(num.pStyleName);\r\n\r\n            if (style?.paragraphProps?.numbering) {\r\n                style.paragraphProps.numbering.level = num.level;\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: WmlTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = props.pageMargins.left;\r\n                elem.style.paddingRight = props.pageMargins.right;\r\n                elem.style.paddingTop = props.pageMargins.top;\r\n                elem.style.paddingBottom = props.pageMargins.bottom;\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = props.pageSize.width;\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = props.pageSize.height;\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = props.columns.space;\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\t\tconst sections = this.splitBySection(document.children);\r\n\t\tlet prevProps = null;\r\n\r\n        for (let i = 0, l = sections.length; i < l; i++) {\r\n            this.currentFootnoteIds = [];\r\n\r\n\t\t\tconst section = sections[i];\r\n            const props = section.sectProps || document.props;\r\n            const sectionElement = this.createSection(this.className, props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n\r\n            this.options.renderHeaders && this.renderHeaderFooter(props.headerRefs, props, \r\n\t\t\t\tresult.length, prevProps != props, sectionElement);\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements, contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderNotes(this.currentFootnoteIds, this.footnoteMap, sectionElement);\r\n            }\r\n\r\n\t\t\tif (this.options.renderEndnotes && i == l - 1) {\r\n                this.renderNotes(this.currentEndnoteIds, this.endnoteMap, sectionElement);\r\n\t\t\t}\r\n\r\n            this.options.renderFooters && this.renderHeaderFooter(props.footerRefs, props, \r\n\t\t\t\tresult.length, prevProps != props, sectionElement);\r\n\r\n            result.push(sectionElement);\r\n\t\t\tprevProps = props;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, firstOfSection: boolean, into: HTMLElement) {\r\n        if (!refs) return;\r\n\r\n        var ref = (props.titlePage && firstOfSection ? refs.find(x => x.type == \"first\") : null)\r\n            ?? (page % 2 == 1 ? refs.find(x => x.type == \"even\") : null)\r\n            ?? refs.find(x => x.type == \"default\");\r\n\r\n        var part = ref && this.document.findPartByRelId(ref.id, this.document.documentPart) as BaseHeaderFooterPart;\r\n\r\n        if (part) {\r\n\t\t\tthis.currentPart = part;\r\n            if (!this.usedHederFooterParts.includes(part.path)) {\r\n                this.processElement(part.rootElement);\r\n                this.usedHederFooterParts.push(part.path);\r\n            }\r\n            this.renderElements([part.rootElement], into);\r\n\t\t\tthis.currentPart = null;\r\n        }\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as WmlBreak).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as WmlBreak).break == \"page\";\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const s = this.findStyle((elem as WmlParagraph).styleName);\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderWrapper(children: HTMLElement[]) {\r\n        return this.createElement(\"div\", { className: `${this.className}-wrapper` }, children);\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; overflow: hidden; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; overflow-wrap: break-word; }\r\n.${c} a { color: inherit; text-decoration: inherit; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        const stylesMap = this.styleMap;\r\n        const defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (const style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (const subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNotes(noteIds: string[], notesMap: Record<string, WmlBaseNote>, into: HTMLElement) {\r\n        var notes = noteIds.map(id => notesMap[id]).filter(x => x);\r\n\r\n        if (notes.length > 0) {\r\n            var result = this.createElement(\"ol\", null, this.renderElements(notes));\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(elem as WmlParagraph);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(elem as WmlBookmarkStart);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null; //ignore bookmark end\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(elem as WmlRun);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(elem as IDomImage);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(elem as WmlText);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(elem as WmlSymbol);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(elem as WmlBreak);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n\t\t\tcase DomType.Endnote:\r\n\t\t\t\treturn this.renderContainer(elem, \"li\");\r\n\r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as WmlNoteReference);\r\n\r\n\t\t\tcase DomType.EndnoteReference:\r\n\t\t\t\treturn this.renderEndnoteReference(elem as WmlNoteReference);\r\n\t\r\n\t\t\tcase DomType.NoBreakHyphen:\r\n                return this.createElement(\"wbr\");\r\n\t\t}\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n\t\t\tappendChildren(into, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\r\n        return this.createElement(tagName, null, this.renderChildren(elem));\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        const style = this.findStyle(elem.styleName);\r\n\t\telem.tabs ??= style?.paragraphProps?.tabs;  //TODO\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderCommonProperties(result.style, elem);\r\n\r\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            result.classList.add(this.numberingClass(numbering.id, numbering.level));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProperties(style, props);\r\n    }\r\n\r\n    renderCommonProperties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = props.fontSize;\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: WmlHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: OpenXmlElement) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src, this.currentPart).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: WmlText) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: WmlBreak) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: WmlSymbol) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: WmlNoteReference) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n\trenderEndnoteReference(elem: WmlNoteReference) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentEndnoteIds.push(elem.id);\r\n        result.textContent = `${this.currentEndnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n\t\t\ttabSpan.className = this.tabStopClass();\r\n\t\t\tvar stops = findParent<WmlParagraph>(elem, DomType.Paragraph)?.tabs;\r\n\t\t\tthis.currentTabs.push({ stops, span: tabSpan });\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n\t\tif (elem.fieldRun)\r\n\t\t\treturn null;\r\n\r\n        const result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n\t\tif (elem.verticalAlign) {\r\n\t\t\tconst wrapper = this.createElement(elem.verticalAlign as any);\r\n\t\t\tthis.renderChildren(elem, wrapper);\r\n\t\t\tresult.appendChild(wrapper);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.renderChildren(elem, result);\r\n\t\t}\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: WmlTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: WmlTableColumn[]) {\r\n        let result = this.createElement(\"colgroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: WmlTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n\t\tObject.assign(ouput.style, style);\r\n    }\r\n\r\n\trenderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n\t\tif (input.className) \r\n\t\t\touput.className = input.className;\r\n\t\t\r\n\t\tif (input.styleName)\r\n\t\t\touput.classList.add(this.processStyleName(input.styleName));\r\n\t}\r\n\r\n\tfindStyle(styleName: string) {\r\n\t\treturn styleName && this.styleMap?.[styleName];\r\n\t}\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n\ttabStopClass() {\r\n        return `${this.className}-tab-stop`;\r\n\t}\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",\r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n\trefreshTabStops() {\r\n\t\tif (!this.options.experimental) \r\n\t\t\treturn;\r\n\r\n\t\tclearTimeout(this.tabsTimeout);\r\n\r\n\t\tthis.tabsTimeout = setTimeout(() => {\r\n\t\t\tconst pixelToPoint = computePixelToPoint();\r\n\r\n\t\t\tfor (let tab of this.currentTabs) {\r\n\t\t\t\tupdateTabStop(tab.span, tab.stops, this.defaultTabSize, pixelToPoint);\r\n\t\t\t}\r\n\t\t}, 500);\r\n\t}\r\n\r\n    createElement = createElement;\r\n}\r\n\r\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\r\n    tagName: T,\r\n    props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\r\n    children: Node[] = undefined\r\n): HTMLElementTagNameMap[T] {\r\n    var result = Object.assign(document.createElement(tagName), props);\r\n    children && appendChildren(result, children);\r\n    return result;\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction appendChildren(elem: HTMLElement, children: Node[]) {\r\n    children.forEach(c => elem.appendChild(c));\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    return createElement(\"style\", { innerHTML: cssText });\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { Length } from \"./document/common\";\r\nimport { ParagraphTab } from \"./document/paragraph\";\r\n\r\ninterface TabStop {\r\n\tpos: number;\r\n\tleader: string;\r\n\tstyle: string;\r\n}\r\n\r\nconst defaultTab: TabStop = { pos: 0, leader: \"none\", style: \"left\" };\r\nconst maxTabs = 50;\r\n\r\nexport function computePixelToPoint(container: HTMLElement = document.body) {\r\n\tconst temp = document.createElement(\"div\");\r\n\ttemp.style.width = '100pt';\r\n\t\r\n\tcontainer.appendChild(temp);\r\n\tconst result = 100 / temp.offsetWidth;\r\n\tcontainer.removeChild(temp);\r\n\r\n\treturn result\r\n}\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], defaultTabSize: Length, pixelToPoint: number = 72 / 96) {\r\n    const p = elem.closest(\"p\");\r\n\r\n    const ebb = elem.getBoundingClientRect();\r\n    const pbb = p.getBoundingClientRect();\r\n    const pcs = getComputedStyle(p);\r\n\r\n\tconst tabStops = tabs?.length > 0 ? tabs.map(t => ({\r\n\t\tpos: lengthToPoint(t.position),\r\n\t\tleader: t.leader,\r\n\t\tstyle: t.style\r\n\t})).sort((a, b) => a.pos - b.pos) : [defaultTab];\r\n\r\n\tconst lastTab = tabStops[tabStops.length - 1];\r\n\tconst pWidthPt = pbb.width * pixelToPoint;\r\n\tconst size = lengthToPoint(defaultTabSize);\r\n    let pos = lastTab.pos + size;\r\n\r\n    if (pos < pWidthPt) {\r\n        for (; pos < pWidthPt && tabStops.length < maxTabs; pos += size) {\r\n            tabStops.push({ ...defaultTab, pos: pos });\r\n        }\r\n    }\r\n\r\n    const marginLeft = parseFloat(pcs.marginLeft);\r\n    const pOffset = pbb.left + marginLeft;\r\n    const left = (ebb.left - pOffset) * pixelToPoint;\r\n    const tab = tabStops.find(t => t.style != \"clear\" && t.pos > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    let width: number = 1;\r\n\r\n    if (tab.style == \"right\" || tab.style == \"center\") {\r\n\t\tconst tabStops = Array.from(p.querySelectorAll(`.${elem.className}`));\r\n\t\tconst nextIdx = tabStops.indexOf(elem) + 1;\r\n        const range = document.createRange();\r\n        range.setStart(elem, 1);\r\n\r\n\t\tif (nextIdx < tabStops.length) {\r\n\t\t\trange.setEndBefore(tabStops[nextIdx]);\r\n\t\t} else {\r\n\t\t\trange.setEndAfter(p);\r\n\t\t}\r\n\r\n\t\tconst mul = tab.style == \"center\" ? 0.5 : 1;\r\n        const nextBB = range.getBoundingClientRect();\r\n\t\tconst offset = nextBB.left + mul * nextBB.width - (pbb.left - marginLeft);\r\n\r\n\t\twidth = tab.pos - offset * pixelToPoint;\r\n    } else {\r\n        width = tab.pos - left;\r\n    }\r\n\r\n    elem.innerHTML = \"&nbsp;\";\r\n    elem.style.textDecoration = \"inherit\";\r\n    elem.style.wordSpacing = `${width.toFixed(0)}pt`;\r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.textDecoration = \"underline\";\r\n            elem.style.textDecorationStyle = \"dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.textDecoration = \"underline\";\r\n            break;\r\n    }\r\n}\r\n\r\nfunction lengthToPoint(length: Length): number {\r\n\treturn parseFloat(length);\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport abstract class WmlBaseNote implements OpenXmlElement {\r\n    id: string;\r\n\ttype: DomType;\r\n\tnoteType: string;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport class WmlFootnote extends WmlBaseNote {\r\n\ttype = DomType.Footnote\r\n}\r\n\r\nexport class WmlEndnote extends WmlBaseNote {\r\n\ttype = DomType.Endnote\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlBaseNote, WmlEndnote, WmlFootnote } from \"./elements\";\r\n\r\nexport class BaseNotePart<T extends WmlBaseNote> extends Part {\r\n    protected _documentParser: DocumentParser;\r\n\r\n    notes: T[]\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n}\r\n\r\nexport class FootnotesPart extends BaseNotePart<WmlFootnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"footnote\", WmlFootnote);\r\n    }\r\n}\r\n\r\nexport class EndnotesPart extends BaseNotePart<WmlEndnote> {\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path, parser);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.notes = this._documentParser.parseNotes(root, \"endnote\", WmlEndnote);\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphStyle: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pStyle\":\r\n                result.paragraphStyle = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { WmlSettings, parseSettings } from \"./settings\";\r\n\r\nexport class SettingsPart extends Part {\r\n\tsettings: WmlSettings;\r\n\r\n\tconstructor(pkg: OpenXmlPackage, path: string) {\r\n\t\tsuper(pkg, path);\r\n\t}\r\n\r\n\tparseXml(root: Element) {\r\n\t\tthis.settings = parseSettings(root, this._package.xmlParser);\r\n\t}\r\n}","import { DocumentParser } from \"../document-parser\";\r\nimport { Length } from \"../document/common\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface WmlSettings {\r\n\tdefaultTabStop: Length;\r\n\tfootnoteProps: NoteProperties;\r\n\tendnoteProps: NoteProperties;\r\n\tautoHyphenation: boolean;\r\n}\r\n\r\nexport interface NoteProperties {\r\n\tnummeringFormat: string;\r\n\tdefaultNoteIds: string[];\r\n}\r\n\r\nexport function parseSettings(elem: Element, xml: XmlParser) {\r\n\tvar result = {} as WmlSettings; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"defaultTabStop\": result.defaultTabStop = xml.lengthAttr(el, \"val\"); break;\r\n\t\t\tcase \"footnotePr\": result.footnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"endnotePr\": result.endnoteProps = parseNoteProperties(el, xml); break;\r\n\t\t\tcase \"autoHyphenation\": result.autoHyphenation = xml.boolAttr(el, \"val\"); break;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNoteProperties(elem: Element, xml: XmlParser) {\r\n\tvar result = {\r\n\t\tdefaultNoteIds: []\r\n\t} as NoteProperties; \r\n\r\n\tfor (let el of xml.elements(elem)) {\r\n\t\tswitch(el.localName) {\r\n\t\t\tcase \"numFmt\": \r\n\t\t\t\tresult.nummeringFormat = xml.attr(el, \"val\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"footnote\": \r\n\t\t\tcase \"endnote\": \r\n\t\t\t\tresult.defaultNoteIds.push(xml.attr(el, \"id\"));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","export function escapeClassName(className: string) {\r\n\treturn className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and').toLowerCase();\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"http://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substring(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function blobToBase64(blob: Blob): any {\r\n\treturn new Promise((resolve, _) => {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onloadend = () => resolve(reader.result);\r\n\t\treader.readAsDataURL(blob);\r\n\t});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { blobToBase64, resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart, HeaderPart } from \"./header-footer/parts\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { EndnotesPart, FootnotesPart } from \"./notes/parts\";\r\nimport { SettingsPart } from \"./settings/settings-part\";\r\nimport { CustomPropsPart } from \"./document-props/custom-props-part\";\r\n\r\nconst topLevelRels = [\r\n\t{ type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n\t{ type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n\t{ type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n\t{ type: RelationshipTypes.CustomProperties, target: \"docProps/custom.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n\tprivate _package: OpenXmlPackage;\r\n\tprivate _parser: DocumentParser;\r\n\tprivate _options: any;\r\n\r\n\trels: Relationship[];\r\n\tparts: Part[] = [];\r\n\tpartsMap: Record<string, Part> = {};\r\n\r\n\tdocumentPart: DocumentPart;\r\n\tfontTablePart: FontTablePart;\r\n\tnumberingPart: NumberingPart;\r\n\tstylesPart: StylesPart;\r\n\tfootnotesPart: FootnotesPart;\r\n\tendnotesPart: EndnotesPart;\r\n\tthemePart: ThemePart;\r\n\tcorePropsPart: CorePropsPart;\r\n\textendedPropsPart: ExtendedPropsPart;\r\n\tsettingsPart: SettingsPart;\r\n\r\n\tstatic load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n\t\tvar d = new WordDocument();\r\n\r\n\t\td._options = options;\r\n\t\td._parser = parser;\r\n\r\n\t\treturn OpenXmlPackage.load(blob, options)\r\n\t\t\t.then(pkg => {\r\n\t\t\t\td._package = pkg;\r\n\r\n\t\t\t\treturn d._package.loadRelationships();\r\n\t\t\t}).then(rels => {\r\n\t\t\t\td.rels = rels;\r\n\r\n\t\t\t\tconst tasks = topLevelRels.map(rel => {\r\n\t\t\t\t\tconst r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n\t\t\t\t\treturn d.loadRelationshipPart(r.target, r.type);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.all(tasks);\r\n\t\t\t}).then(() => d);\r\n\t}\r\n\r\n\tsave(type = \"blob\"): Promise<any> {\r\n\t\treturn this._package.save(type);\r\n\t}\r\n\r\n\tprivate loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n\t\tif (this.partsMap[path])\r\n\t\t\treturn Promise.resolve(this.partsMap[path]);\r\n\r\n\t\tif (!this._package.get(path))\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tlet part: Part = null;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase RelationshipTypes.OfficeDocument:\r\n\t\t\t\tthis.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.FontTable:\r\n\t\t\t\tthis.fontTablePart = part = new FontTablePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Numbering:\r\n\t\t\t\tthis.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Styles:\r\n\t\t\t\tthis.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Theme:\r\n\t\t\t\tthis.themePart = part = new ThemePart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footnotes:\r\n\t\t\t\tthis.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Endnotes:\r\n\t\t\t\tthis.endnotesPart = part = new EndnotesPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Footer:\r\n\t\t\t\tpart = new FooterPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.Header:\r\n\t\t\t\tpart = new HeaderPart(this._package, path, this._parser);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CoreProperties:\r\n\t\t\t\tthis.corePropsPart = part = new CorePropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.ExtendedProperties:\r\n\t\t\t\tthis.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase RelationshipTypes.CustomProperties:\r\n\t\t\t\tpart = new CustomPropsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase RelationshipTypes.Settings:\r\n\t\t\t\tthis.settingsPart = part = new SettingsPart(this._package, path);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (part == null)\r\n\t\t\treturn Promise.resolve(null);\r\n\r\n\t\tthis.partsMap[path] = part;\r\n\t\tthis.parts.push(part);\r\n\r\n\t\treturn part.load().then(() => {\r\n\t\t\tif (part.rels == null || part.rels.length == 0)\r\n\t\t\t\treturn part;\r\n\r\n\t\t\tconst [folder] = splitPath(part.path);\r\n\t\t\tconst rels = part.rels.map(rel => {\r\n\t\t\t\treturn this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n\t\t\t});\r\n\r\n\t\t\treturn Promise.all(rels).then(() => part);\r\n\t\t});\r\n\t}\r\n\r\n\tloadDocumentImage(id: string, part?: Part): PromiseLike<string> {\r\n\t\treturn this.loadResource(part ?? this.documentPart, id, \"blob\")\r\n\t\t\t.then(x => this.blobToURL(x));\r\n\t}\r\n\r\n\tloadNumberingImage(id: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.numberingPart, id, \"blob\")\r\n\t\t\t.then(x => this.blobToURL(x));\r\n\t}\r\n\r\n\tloadFont(id: string, key: string): PromiseLike<string> {\r\n\t\treturn this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n\t\t\t.then(x => x ? this.blobToURL(new Blob([deobfuscate(x, key)])) : x);\r\n\t}\r\n\r\n\tprivate blobToURL(blob: Blob): string | PromiseLike<string> {\r\n\t\tif (!blob)\r\n\t\t\treturn null;\r\n\r\n\t\tif (this._options.useBase64URL) {\r\n\t\t\treturn blobToBase64(blob);\r\n\t\t}\r\n\r\n\t\treturn URL.createObjectURL(blob);\r\n\t}\r\n\r\n\tfindPartByRelId(id: string, basePart: Part = null) {\r\n\t\tvar rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n\t\tconst folder = basePart ? splitPath(basePart.path)[0] : '';\r\n\t\treturn rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n\t}\r\n\r\n\tgetPathById(part: Part, id: string): string {\r\n\t\tconst rel = part.rels.find(x => x.id == id);\r\n\t\tconst [folder] = splitPath(part.path);\r\n\t\treturn rel ? resolvePath(rel.target, folder) : null;\r\n\t}\r\n\r\n\tprivate loadResource(part: Part, id: string, outputType: OutputType) {\r\n\t\tconst path = this.getPathById(part, id);\r\n\t\treturn path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n\t}\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n\tconst len = 16;\r\n\tconst trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n\tconst numbers = new Array(len);\r\n\r\n\tfor (let i = 0; i < len; i++)\r\n\t\tnumbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n\tfor (let i = 0; i < 32; i++)\r\n\t\tdata[i] = data[i] ^ numbers[i % len]\r\n\r\n\treturn data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__626__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(771);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__626__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","f","fn","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","borderColor","highlight","ignoreWidth","debug","parseNotes","elemName","elemClass","result","el","node","noteType","children","parseBodyElements","push","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","xmlUtil","colorAttr","foreach","localName","parseParagraph","parseTable","parseSdt","forEach","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","isDefault","boolAttr","linked","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","x","parseNumberingPicBullet","numId","abstractNumId","elementAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyleName","undefined","pStyle","rStyle","suff","bullet","find","levelText","format","sdtContent","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","styleName","className","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","SimpleField","instruction","lock","dirty","fieldRun","Instruction","ComplexField","charType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","EndnoteReference","d","parseDrawing","run","verticalAlign","valueOfVertAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","lengthAttr","LengthUsage","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","colBandSize","rowBandSize","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","join","length","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","knownColors","cb","i","childNodes","nodeType","Node","ELEMENT_NODE","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertLength","Percent","size","Border","_","asTagName","a","b","trim","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseInt","parseCustomProps","CustomPropsPart","firstChild","formatId","nodeName","value","parseExtendedProps","ExtendedPropsPart","safeParseToInt","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","parseBorder","Point","frame","shadow","top","bottom","ns","wordml","drawingml","picture","compatibility","mul","unit","LineHeight","usage","test","defaultValue","namespaceURI","fontSize","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","position","leader","parseRunProperty","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","parsePageNumber","chapSep","chapStyle","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","titlePage","pageBorders","parseBorders","pageNumber","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","renderEndnotes","useBase64URL","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","parseFonts","FontTablePart","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","WmlHeader","Header","WmlFooter","Footer","rootElement","createRootElement","BaseHeaderFooterPart","HeaderPart","FooterPart","htmlDocument","styleMap","currentPart","footnoteMap","endnoteMap","currentEndnoteIds","usedHederFooterParts","currentTabs","tabsTimeout","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","prodessNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","notes","endnotesPart","settingsPart","defaultTabSize","settings","defaultTabStop","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appendChildren","refreshTabStops","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","Object","entries","colors","k","cssText","styleToString","createStyleElement","fontsPart","ref","loadFont","fontData","cssValues","processStyleName","escapeClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","numberings","num","findStyle","processElement","processTable","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","sections","splitBySection","prevProps","l","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","renderHeaderFooter","contentElement","renderElements","renderNotes","refs","page","firstOfSection","into","part","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","defautStyles","subStyles","linkedStyle","concat","subStyle","noteIds","notesMap","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","Footnote","Endnote","renderFootnoteReference","renderEndnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProperties","classList","add","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","tabStopClass","stops","findParent","wrapper","renderTableColumns","colElem","colSpan","ouput","assign","lvl","selectors","numformat","replace","substring","clearTimeout","setTimeout","pixelToPoint","computePixelToPoint","tab","updateTabStop","comment","createComment","defaultTab","lengthToPoint","parseFloat","container","temp","offsetWidth","removeChild","closest","ebb","getBoundingClientRect","pbb","pcs","getComputedStyle","tabStops","t","sort","lastTab","pWidthPt","marginLeft","pOffset","Array","from","querySelectorAll","nextIdx","indexOf","range","createRange","setStart","setEndBefore","setEndAfter","nextBB","textDecoration","wordSpacing","textDecorationStyle","WmlBaseNote","WmlFootnote","WmlEndnote","BaseNotePart","FootnotesPart","EndnotesPart","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","attrLocalName","attributes","floatAttr","convertBoolean","globalXmlParser","parseSettings","SettingsPart","parseNoteProperties","defaultNoteIds","nummeringFormat","footnoteProps","endnoteProps","autoHyphenation","StylesPart","parseTheme","ThemePart","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","DmlTheme","themeElements","isObject","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","blob","reader","FileReader","onloadend","readAsDataURL","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","CustomProperties","parts","partsMap","_options","_parser","tasks","rel","loadRelationshipPart","FontTable","Numbering","Styles","Theme","Footnotes","Endnotes","corePropsPart","extendedPropsPart","Settings","folder","resolvePath","loadResource","blobToURL","Blob","deobfuscate","blobToBase64","createObjectURL","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}