{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/common/part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/common/package.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","load","pkg","loadRelationships","this","then","rels","Part","appendClass","classList","className","element","si","lastIndexOf","substring","array","by","reduce","a","x","wordml","LengthUsage","Dxa","mul","unit","Emu","FontSize","Border","Percent","LineHeight","val","usage","parseInt","type","elem","props","xml","namespaceURI","localName","color","attr","fontSize","lengthAttr","DomType","RelationshipTypes","xmlParser","elements","map","e","id","target","targetMode","parse","xmlString","skipDeclaration","replace","DOMParser","parseFromString","firstChild","result","childNodes","length","item","nodeType","push","nodeName","attributes","intAttr","node","attrName","defaultValue","floatAttr","parseFloat","boolAttr","convertLength","XmlParser","globalXmlParser","parseColumns","numberOfColumns","space","separator","equalWidth","columns","width","SectionType","section","pageSize","height","orientation","pageMargins","left","right","top","bottom","header","footer","gutter","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","WordDocument","doc","render","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","Package","find","OfficeDocument","loadRelationshipPart","Promise","resolve","exists","part","documentPart","DocumentPart","FontTable","fontTablePart","FontTablePart","Numbering","numberingPart","NumberingPart","Styles","stylesPart","StylesPart","folder","splitPath","rel","all","loadDocumentImage","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","el","fonts","parseFonts","parseFont","family","altName","fontKey","refId","_zip","files","file","async","relsPath","parseRelationships","_documentParser","body","parseDocumentFile","numberings","parseNumberingFile","styles","parseStylesFile","autos","shd","highlight","SizeType","Document","children","cssStyle","xbody","byTagName","foreach","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","basedOn","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","linked","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","text","textContent","fldCharType","Break","break","font","char","Tab","instrText","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","output","tagName","cb","defValue","autoColor","v","convertSize","indexOf","intVal","trim","b","checkMask","num","mask","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","BookmarkStart","colFirst","colLast","BookmarkEnd","htmlDocument","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontsPart","f","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","styleMap","keyBy","pBreakIndex","rBreakIndex","findIndex","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","styleClassName","display","textIndent","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && c.nodeName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then((el) => {\r\n                    this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\n\r\nexport class NumberingPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.numberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.styles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            cssStyle: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n        let spacing = null;\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"outlineLvl\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DomType, IDomTable, IDomNumbering, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.numberings, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n        var styles = this.document.stylesPart?.styles;\r\n        var styleMap = styles ? keyBy(styles, x => x.id) : null;\r\n\r\n        for(let elem of elements) {\r\n            if(elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = styleMap && styleName ? styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n    \r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n            \r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                \r\n                if(paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}