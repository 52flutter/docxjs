{"version":3,"file":"docx-preview.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,UACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,SAAUJ,GACQ,iBAAZC,QACdA,QAAc,KAAID,EAAQG,QAAQ,UAElCJ,EAAW,KAAIC,EAAQD,EAAY,OARrC,CASGO,MAAM,SAASC,GAClB,M,iHCVA,aACA,SACA,SACA,SAOA,aAGI,WAAoBC,EAAoBC,GAApB,KAAAD,KAAAA,EAAoB,KAAAC,QAAAA,EAFxC,KAAAC,UAAuB,IAAI,EAAAC,UAyC/B,OApCI,YAAAC,IAAA,SAAIC,GACA,OAAOC,KAAKN,KAAKO,MAqCzB,SAAuBF,GACnB,OAAOA,EAAKG,WAAW,KAAOH,EAAKI,OAAO,GAAKJ,EAtCpBK,CAAcL,KAGzC,YAAAM,OAAA,SAAON,EAAcO,GACjBN,KAAKN,KAAKa,KAAKR,EAAMO,IAGlB,EAAAE,KAAP,SAAYC,EAAmBd,GAC3B,OAAOe,EAAMC,UAAUF,GAAOG,MAAK,SAAAC,GAAO,WAAIC,EAAeD,EAAKlB,OAGtE,YAAAoB,KAAA,SAAKC,GACD,YADC,IAAAA,IAAAA,EAAA,QACMhB,KAAKN,KAAKuB,cAAc,CAAED,KAAI,KAGzC,YAAAR,KAAA,SAAKT,EAAciB,G,QACf,YADe,IAAAA,IAAAA,EAAA,UACmB,QAA3B,EAAc,QAAd,EAAAhB,KAAKF,IAAIC,UAAK,eAAEmB,MAAMF,UAAK,QAAIG,QAAQC,QAAQ,OAG1D,YAAAC,kBAAA,SAAkBtB,GAAlB,gBAAkB,IAAAA,IAAAA,EAAA,MACd,IAAIuB,EAAW,cAEf,GAAY,MAARvB,EAAc,CACR,OAAU,IAAAwB,WAAUxB,GAC1BuB,EADQ,KACO,SADH,KACc,QAG9B,OAAOtB,KAAKQ,KAAKc,GACZV,MAAK,SAAAY,GAAO,OAAAA,GAAM,IAAAC,oBAAmB,EAAKC,iBAAiBF,GAAKG,kBAAmB,EAAK/B,WAAa,SAI9G,YAAA8B,iBAAA,SAAiBF,GACb,OAAO,IAAAI,gBAAeJ,EAAKxB,KAAKL,QAAQkC,qBAEhD,EA1CA,GAAa,EAAAf,eAAAA,G,6ECVb,aAIA,aAKI,WAAsBgB,EAAiC/B,GAAjC,KAAA+B,SAAAA,EAAiC,KAAA/B,KAAAA,EA0B3D,OAvBI,YAAAS,KAAA,sBACI,OAAOW,QAAQY,IAAI,CACf/B,KAAK8B,SAAST,kBAAkBrB,KAAKD,MAAMa,MAAK,SAAAoB,GAChD,EAAKA,KAAOA,KAEZhC,KAAK8B,SAAStB,KAAKR,KAAKD,MAAMa,MAAK,SAAAqB,GAC/B,IAAMC,EAAS,EAAKJ,SAASJ,iBAAiBO,GAE1C,EAAKH,SAASnC,QAAQwC,aACtB,EAAKC,aAAeF,GAGxB,EAAKG,SAASH,EAAOP,yBAKjC,YAAAZ,KAAA,WACIf,KAAK8B,SAASzB,OAAOL,KAAKD,MAAM,IAAAuC,oBAAmBtC,KAAKoC,gBAGlD,YAAAC,SAAV,SAAmBpD,KAEvB,EA/BA,GAAa,EAAAsD,KAAAA,G,YCKb,IAAYC,E,kGAAAA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KACzB,oGACA,4FACA,oFACA,4FACA,sFACA,+FACA,oFACA,0FACA,gGACA,4FACA,sFACA,sFACA,+GACA,yGAGJ,8BAAmCvD,EAAeW,GAC9C,OAAOA,EAAU6C,SAASxD,GAAMyD,KAAI,SAAAC,GAAK,OACrCC,GAAIhD,EAAUiD,KAAKF,EAAG,MACtB3B,KAAMpB,EAAUiD,KAAKF,EAAG,QACxBG,OAAQlD,EAAUiD,KAAKF,EAAG,UAC1BI,WAAYnD,EAAUiD,KAAKF,EAAG,oB,+FC/BtC,aAKA,SAEA,SACA,SACA,SAEA,SAGW,EAAAK,MAAQ,CACfC,IAAK,QACLC,MAAO,QACPC,UAAW,eAGf,IA6iCKC,EA7iCL,0BAEI,KAAAC,iBAA2B,EAG3B,KAAAC,aAAuB,EACvB,KAAAC,OAAiB,EAqiCrB,OAniCI,YAAAC,kBAAA,SAAkBtB,GAAlB,WACQuB,EAA0B,CAC1BzC,KAAM,EAAA0C,QAAQC,SACdC,SAAU,GACVC,SAAU,GACVC,MAAO,MAGPC,EAAQ,UAAgBC,QAAQ9B,EAAQ,QAkB5C,OAhBA+B,EAAIC,QAAQH,GAAO,SAAAI,GACf,OAAQA,EAAKC,WACT,IAAK,IACDX,EAAOG,SAASS,KAAK,EAAKC,eAAeH,IACzC,MAEJ,IAAK,MACDV,EAAOG,SAASS,KAAK,EAAKE,WAAWJ,IACrC,MAEJ,IAAK,SACDV,EAAOK,OAAQ,IAAAU,wBAAuBL,EAAM,eAKjDV,GAGX,YAAAgB,gBAAA,SAAgBC,GAAhB,WACQjB,EAAS,GAcb,OAZAQ,EAAIC,QAAQQ,GAAS,SAAAC,GACjB,OAAQA,EAAEP,WACN,IAAK,QACDX,EAAOY,KAAK,EAAKO,WAAWD,IAC5B,MAEJ,IAAK,cACDlB,EAAOY,KAAK,EAAKQ,mBAAmBF,QAKzClB,GAGX,YAAAoB,mBAAA,SAAmBC,GAAnB,WACQrB,EAAoB,CACpBb,GAAI,KACJmC,KAAM,KACNjC,OAAQ,KACRkC,QAAS,KACTC,OAAQ,IA2BZ,OAxBAhB,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,aACD,IAAIe,EAAM,UAAgBnB,QAAQkB,EAAG,OAEjCC,GACA1B,EAAOwB,OAAOZ,KAAK,CACfvB,OAAQ,OACRsC,OAAQ,EAAKC,uBAAuBF,EAAK,MAEjD,MAEJ,IAAK,aACD,IAAIG,EAAM,UAAgBtB,QAAQkB,EAAG,OAEjCI,GACA7B,EAAOwB,OAAOZ,KAAK,CACfvB,OAAQ,IACRsC,OAAQ,EAAKC,uBAAuBC,EAAK,UAMtD7B,GAGX,YAAAmB,WAAA,SAAWE,GAAX,WACQrB,EAAoB,CACpBb,GAAIqB,EAAIsB,WAAWT,EAAM,WACzBU,UAAWvB,EAAIwB,SAASX,EAAM,WAC9BC,KAAM,KACNjC,OAAQ,KACRkC,QAAS,KACTC,OAAQ,GACRS,OAAQ,MAGZ,OAAQzB,EAAIsB,WAAWT,EAAM,SACzB,IAAK,YAAarB,EAAOX,OAAS,IAAK,MACvC,IAAK,QAASW,EAAOX,OAAS,QAAS,MACvC,IAAK,YAAaW,EAAOX,OAAS,OAqEtC,OAlEAmB,EAAIC,QAAQY,GAAM,SAAAH,GACd,OAAQA,EAAEP,WACN,IAAK,UACDX,EAAOuB,QAAUf,EAAI0B,UAAUhB,EAAG,OAClC,MAEJ,IAAK,OACDlB,EAAOsB,KAAOd,EAAIsB,WAAWZ,EAAG,OAChC,MAEJ,IAAK,OACDlB,EAAOiC,OAASzB,EAAI0B,UAAUhB,EAAG,OACjC,MAEJ,IAAK,OACDlB,EAAOmC,KAAO3B,EAAI0B,UAAUhB,EAAG,OAC/B,MAEJ,IAAK,UACDlB,EAAOoC,QAAU5B,EAAIsB,WAAWZ,EAAG,OAAOmB,MAAM,KAChD,MAEJ,IAAK,MACDrC,EAAOwB,OAAOZ,KAAK,CACfvB,OAAQ,IACRsC,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3ClB,EAAOsC,gBAAiB,IAAAC,0BAAyBrB,EAAG,WACpD,MAEJ,IAAK,MACDlB,EAAOwB,OAAOZ,KAAK,CACfvB,OAAQ,OACRsC,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3ClB,EAAOwC,UAAW,IAAAD,0BAAyBrB,EAAG,WAC9C,MAEJ,IAAK,QACL,IAAK,OACDlB,EAAOwB,OAAOZ,KAAK,CACfvB,OAAQ,KACRsC,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3C,MAEJ,IAAK,aACD,IAAc,YAAKuB,gBAAgBvB,GAArB,eAAuB,CAAhC,IAAIwB,EAAC,KACN1C,EAAOwB,OAAOZ,KAAK8B,GACvB,MAEJ,IAAK,OACL,IAAK,UACL,IAAK,SACL,IAAK,aACL,IAAK,iBACL,IAAK,eACL,IAAK,aAED,MAEJ,QACI,EAAK5C,OAAS6C,QAAQC,KAAK,gCAAgC1B,EAAEP,eAIlEX,GAGX,YAAAyC,gBAAA,SAAgBpB,GAAhB,WACQrB,EAAS,GAETzC,EAAOiD,EAAIsB,WAAWT,EAAM,QAC5BwB,EAAW,GAEf,OAAQtF,GACJ,IAAK,WAAYsF,EAAW,kBAAmB,MAC/C,IAAK,UAAWA,EAAW,iBAAkB,MAC7C,IAAK,WAAYA,EAAW,eAAgB,MAC5C,IAAK,UAAWA,EAAW,cAAe,MAC1C,IAAK,YAAaA,EAAW,aAAc,MAC3C,IAAK,YAAaA,EAAW,cAAe,MAC5C,IAAK,YAAaA,EAAW,aAAc,MAC3C,IAAK,YAAaA,EAAW,cAAe,MAC5C,QAAS,MAAO,GA6BpB,OA1BArC,EAAIC,QAAQY,GAAM,SAAAH,GACd,OAAQA,EAAEP,WACN,IAAK,MACDX,EAAOY,KAAK,CACRvB,OAAQwD,EAAW,KACnBlB,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3C,MAEJ,IAAK,MACDlB,EAAOY,KAAK,CACRvB,OAAQwD,EAAW,QACnBlB,OAAQ,EAAKC,uBAAuBV,EAAG,MAE3C,MAEJ,IAAK,QACL,IAAK,OACDlB,EAAOY,KAAK,CACRvB,OAAQwD,EACRlB,OAAQ,EAAKC,uBAAuBV,EAAG,UAMhDlB,GAGX,YAAA8C,mBAAA,SAAmBC,GAAnB,WACQ/C,EAAS,GACTgD,EAAU,GACVC,EAAU,GAuBd,OArBAzC,EAAIC,QAAQsC,GAAO,SAAA7B,GACf,OAAQA,EAAEP,WACN,IAAK,cACD,EAAKuC,uBAAuBhC,EAAG+B,GAC1BE,SAAQ,SAAAC,GAAK,OAAApD,EAAOY,KAAKwC,MAC9B,MAEJ,IAAK,eACDH,EAAQrC,KAAK,EAAKyC,wBAAwBnC,IAC1C,MAEJ,IAAK,MACD,IAAIoC,EAAQ9C,EAAIsB,WAAWZ,EAAG,SAC1BqC,EAAgB/C,EAAIgD,kBAAkBtC,EAAG,gBAAiB,OAC9D8B,EAAQO,GAAiBD,MAKrCtD,EAAOmD,SAAQ,SAAAC,GAAK,OAAAA,EAAEjE,GAAK6D,EAAQI,EAAEjE,OAE9Ba,GAGX,YAAAqD,wBAAA,SAAwB3C,GACpB,IAAI+C,EAAO,UAAgBlD,QAAQG,EAAM,QACrCgD,EAAQD,GAAQ,UAAgBlD,QAAQkD,EAAM,SAC9CE,EAAYD,GAAS,UAAgBnD,QAAQmD,EAAO,aAExD,OAAOC,EAAY,CACfxE,GAAIqB,EAAIoD,QAAQlD,EAAM,kBACtBmD,IAAKrD,EAAIsB,WAAW6B,EAAW,MAC/BG,MAAOtD,EAAIsB,WAAW4B,EAAO,UAC7B,MAGR,YAAAR,uBAAA,SAAuB7B,EAAe4B,GAAtC,WACQjD,EAAS,GACTb,EAAKqB,EAAIsB,WAAWT,EAAM,iBAU9B,OARAb,EAAIC,QAAQY,GAAM,SAAAH,GAEL,QADDA,EAAEP,WAEFX,EAAOY,KAAK,EAAKmD,oBAAoB5E,EAAI+B,EAAG+B,OAKjDjD,GAGX,YAAA+D,oBAAA,SAAoB5E,EAAYkC,EAAe4B,GAA/C,WACQjD,EAAwB,CACxBb,GAAIA,EACJ6E,MAAOxD,EAAIoD,QAAQvC,EAAM,QACzByC,MAAO,IAwBX,OArBAtD,EAAIC,QAAQY,GAAM,SAAAH,GACd,OAAQA,EAAEP,WACN,IAAK,MACD,EAAKiB,uBAAuBV,EAAGlB,EAAO8D,OACtC,MAEJ,IAAK,iBACD,IAAI3E,EAAKqB,EAAIoD,QAAQ1C,EAAG,OACxBlB,EAAOiE,OAAShB,EAAQiB,QAAO,SAAAd,GAAK,OAAAA,EAAEjE,IAAMA,KAAI,GAChD,MAEJ,IAAK,UACDa,EAAOmE,UAAY3D,EAAIsB,WAAWZ,EAAG,OACrC,MAEJ,IAAK,SACDlB,EAAOoE,OAAS5D,EAAIsB,WAAWZ,EAAG,WAKvClB,GAIX,YAAAa,eAAA,SAAeQ,GAAf,WACQrB,EAA2B,CAAEzC,KAAM,EAAA0C,QAAQoE,UAAWlE,SAAU,IA0BpE,OAxBAK,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,IACDX,EAAOG,SAASS,KAAK,EAAK0D,SAAS7C,EAAGzB,IACtC,MAEJ,IAAK,YACDA,EAAOG,SAASS,KAAK,EAAK2D,eAAe9C,EAAGzB,IAC5C,MAEJ,IAAK,gBACDA,EAAOG,SAASS,MAAK,IAAA4D,oBAAmB/C,EAAG,YAC3C,MAEA,IAAK,cACLzB,EAAOG,SAASS,MAAK,IAAA6D,kBAAiBhD,EAAG,YACzC,MAEJ,IAAK,MACD,EAAKc,yBAAyBd,EAAGzB,OAKtCA,GAGX,YAAAuC,yBAAA,SAAyB7B,EAAegE,GAAxC,WACInI,KAAKqF,uBAAuBlB,EAAMgE,EAAUtE,SAAW,GAAI,MAAM,SAAAqB,GAC7D,IAAG,IAAAkD,wBAAuBlD,EAAGiD,EAAW,WACpC,OAAO,EAEX,OAAQjD,EAAEd,WACN,IAAK,SACDiE,EAAMC,gBAAgBH,EAAWlE,EAAI0B,UAAUT,EAAG,QAClD,MAEJ,IAAK,WACDmD,EAAMC,gBAAgBH,EAAW/C,EAAOmD,oBAAoBrD,IAC5D,MAEJ,IAAK,UACD,EAAKsD,WAAWtD,EAAGiD,GACnB,MAEJ,IAAK,MAED,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAK,WAAA,SAAW1D,EAAeqD,GAGP,QAFDlE,EAAIsB,WAAWT,EAAM,aAG/BqD,EAAUtE,SAAgB,MAAI,SAGtC,YAAAmE,eAAA,SAAelD,EAAe2D,GAA9B,WACQhF,EAAuC,CAAEzC,KAAM,EAAA0C,QAAQgF,UAAWD,OAAQA,EAAQ7E,SAAU,IAC5F+E,EAAS1E,EAAIsB,WAAWT,EAAM,UAalC,OAXI6D,IACAlF,EAAOmF,KAAO,IAAMD,GAExB1E,EAAIC,QAAQY,GAAM,SAAAI,GAEL,MADDA,EAAEd,WAEFX,EAAOG,SAASS,KAAK,EAAK0D,SAAS7C,EAAGzB,OAK3CA,GAGX,YAAAsE,SAAA,SAASjD,EAAe2D,GAAxB,WACQhF,EAAiC,CAAEzC,KAAM,EAAA0C,QAAQmF,IAAKJ,OAAQA,EAAQ7E,SAAU,IA0DpF,OAxDAK,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,IACDX,EAAOG,SAASS,KAAkB,CAC9BrD,KAAM,EAAA0C,QAAQoF,KACd7G,KAAMiD,EAAE6D,cAEZ,MAEJ,IAAK,UACDtF,EAAOuF,YAAc/E,EAAIsB,WAAWL,EAAG,eACvC,MAEJ,IAAK,KACDzB,EAAOG,SAASS,KAAmB,CAC/BrD,KAAM,EAAA0C,QAAQuF,MACdC,MAAOjF,EAAIsB,WAAWL,EAAG,SAAW,iBAExC,MAEJ,IAAK,wBACDzB,EAAOG,SAASS,KAAmB,CAC/BrD,KAAM,EAAA0C,QAAQuF,MACdC,MAAO,SAEX,MAEJ,IAAK,MACDzF,EAAOG,SAASS,KAAoB,CAChCrD,KAAM,EAAA0C,QAAQyF,OACdC,KAAMnF,EAAIsB,WAAWL,EAAG,QACxBmE,KAAMpF,EAAIsB,WAAWL,EAAG,UAE5B,MAEJ,IAAK,MACDzB,EAAOG,SAASS,KAAK,CAAErD,KAAM,EAAA0C,QAAQ4F,MACrC,MAEJ,IAAK,YACD7F,EAAO8F,UAAYrE,EAAE6D,YACrB,MAEJ,IAAK,UACD,IAAIS,EAAI,EAAKC,aAAavE,GAEtBsE,IACA/F,EAAOG,SAAW,CAAC4F,IACvB,MAEJ,IAAK,MACD,EAAKE,mBAAmBxE,EAAGzB,OAKhCA,GAGX,YAAAiG,mBAAA,SAAmBvF,EAAewF,GAC9B3J,KAAKqF,uBAAuBlB,EAAMwF,EAAI9F,SAAW,GAAI,MAAM,SAAAqB,GACvD,OAAQA,EAAEd,WACN,IAAK,SACDuF,EAAIhE,UAAY1B,EAAI0B,UAAUT,EAAG,OACjC,MAEJ,IAAK,YACD,OAAQjB,EAAIsB,WAAWL,EAAG,QACtB,IAAK,YAAayE,EAAIC,QAAU,MAAO,MACvC,IAAK,cAAeD,EAAIC,QAAU,MAEtC,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAH,aAAA,SAAa3E,GACT,IAAc,oBAAgBrC,SAASqC,GAAzB,eAAgC,CAAzC,IAAIH,EAAC,KACN,OAAQA,EAAEP,WACN,IAAK,SACL,IAAK,SACD,OAAOpE,KAAK6J,oBAAoBlF,MAKhD,YAAAkF,oBAAA,SAAoB/E,GAgBhB,IAfA,IAAIrB,EAAyB,CAAEzC,KAAM,EAAA0C,QAAQoG,QAASlG,SAAU,GAAIC,SAAU,IAC1EkG,EAA6B,UAAlBjF,EAAKV,UAQhB4F,EAAmD,KACnDC,EAAYhG,EAAIwB,SAASX,EAAM,aAE/BoF,EAAO,CAAEC,SAAU,OAAQC,MAAO,OAAQC,OAAQ,KAClDC,EAAO,CAAEH,SAAU,OAAQC,MAAO,MAAOC,OAAQ,KAEvC,gBAAgB5H,SAASqC,GAAzB,eAAgC,CAAzC,IAAIH,EAAC,KACN,OAAQA,EAAEP,WACN,IAAK,YACG6F,IACAC,EAAKG,OAASpG,EAAIsG,SAAS5F,EAAG,IAAKvB,EAASoH,KAC5CF,EAAKD,OAASpG,EAAIsG,SAAS5F,EAAG,IAAKvB,EAASoH,MAEhD,MAEJ,IAAK,SACD/G,EAAOI,SAAgB,MAAII,EAAIsG,SAAS5F,EAAG,KAAMvB,EAASoH,KAC1D/G,EAAOI,SAAiB,OAAII,EAAIsG,SAAS5F,EAAG,KAAMvB,EAASoH,KAC3D,MAEJ,IAAK,YACL,IAAK,YACD,IAAKP,EAAW,CACZ,IAAIQ,EAAqB,aAAf9F,EAAEP,UAA2B8F,EAAOI,EAC1CI,EAAY,UAAgB1G,QAAQW,EAAG,SACvCgG,EAAa,UAAgB3G,QAAQW,EAAG,aAExC+F,IACAD,EAAIL,MAAQM,EAAU3B,aAEtB4B,IACAF,EAAIJ,OAASpG,EAAI2G,UAAUD,EAAYvH,EAASoH,MAExD,MAEJ,IAAK,mBACDR,EAAW,mBACX,MAEJ,IAAK,WACDA,EAAW,WACX,MAEJ,IAAK,UACD,IAAIa,EAAI7K,KAAK8K,aAAanG,GAEtBkG,GACApH,EAAOG,SAASS,KAAKwG,IA4BrC,MAvBgB,oBAAZb,GACAvG,EAAOI,SAAkB,QAAI,QAEzBqG,EAAKE,QACL3G,EAAOI,SAAS,cAAgBqG,EAAKE,MACrC3G,EAAOI,SAAgB,MAAI,SAGf,YAAZmG,GACJvG,EAAOI,SAAkB,QAAI,QAC7BJ,EAAOI,SAAmB,SAAI,WAC9BJ,EAAOI,SAAgB,MAAI,MAC3BJ,EAAOI,SAAiB,OAAI,MAEzBqG,EAAKG,SACJ5G,EAAOI,SAAe,KAAIqG,EAAKG,QAChCC,EAAKD,SACJ5G,EAAOI,SAAc,IAAIyG,EAAKD,UAE7BN,GAA2B,QAAdG,EAAKE,OAAiC,SAAdF,EAAKE,QAC/C3G,EAAOI,SAAgB,MAAIqG,EAAKE,OAG7B3G,GAGX,YAAAqH,aAAA,SAAa3G,GAGT,IAFA,IAAI4G,EAAc,UAAgB/G,QAAQG,EAAM,eAElC,gBAAgB1B,SAASsI,GAAzB,eAAuC,CAAhD,IAAIpG,EAAC,KACN,GACS,QADDA,EAAEP,UAEF,OAAOpE,KAAKgL,aAAarG,GAIrC,OAAO,MAGX,YAAAqG,aAAA,SAAa7G,GACT,IAAIV,EAAoB,CAAEzC,KAAM,EAAA0C,QAAQuH,MAAO3D,IAAK,GAAIzD,SAAU,IAC9DqH,EAAW,UAAgBlH,QAAQG,EAAM,YACzCgH,EAAO,UAAgBnH,QAAQkH,EAAU,QAE7CzH,EAAO6D,IAAMrD,EAAIsB,WAAW4F,EAAM,SAElC,IAAIC,EAAO,UAAgBpH,QAAQG,EAAM,QACrCkH,EAAO,UAAgBrH,QAAQoH,EAAM,QAEzC3H,EAAOI,SAAmB,SAAI,WAE9B,IAAc,oBAAgBpB,SAAS4I,GAAzB,eAAgC,CAAzC,IAAI1G,EAAC,KACN,OAAQA,EAAEP,WACN,IAAK,MACDX,EAAOI,SAAgB,MAAII,EAAIsG,SAAS5F,EAAG,KAAMvB,EAASoH,KAC1D/G,EAAOI,SAAiB,OAAII,EAAIsG,SAAS5F,EAAG,KAAMvB,EAASoH,KAC3D,MAEJ,IAAK,MACD/G,EAAOI,SAAe,KAAII,EAAIsG,SAAS5F,EAAG,IAAKvB,EAASoH,KACxD/G,EAAOI,SAAc,IAAII,EAAIsG,SAAS5F,EAAG,IAAKvB,EAASoH,MAKnE,OAAO/G,GAGX,YAAAc,WAAA,SAAWO,GAAX,WACQrB,EAAoB,CAAEzC,KAAM,EAAA0C,QAAQ4H,MAAO1H,SAAU,IAkBzD,OAhBAK,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,KACDX,EAAOG,SAASS,KAAK,EAAKkH,cAAcrG,IACxC,MAEJ,IAAK,UACDzB,EAAO+H,QAAU,EAAKC,kBAAkBvG,GACxC,MAEJ,IAAK,QACD,EAAKwG,qBAAqBxG,EAAGzB,OAKlCA,GAGX,YAAAgI,kBAAA,SAAkB3G,GACd,IAAIrB,EAAS,GAUb,OARAQ,EAAIC,QAAQY,GAAM,SAAAH,GAEL,YADDA,EAAEP,WAEFX,EAAOY,KAAK,CAAEsH,MAAO1H,EAAIsG,SAAS5F,EAAG,UAK1ClB,GAGX,YAAAiI,qBAAA,SAAqBvH,EAAeyH,GAApC,WAyBI,OAxBAA,EAAM/H,SAAW,GACjB+H,EAAMC,UAAY,GAElB7L,KAAKqF,uBAAuBlB,EAAMyH,EAAM/H,SAAU+H,EAAMC,WAAW,SAAA3G,GAC/D,OAAQA,EAAEd,WACN,IAAK,WACDwH,EAAMjG,UAAY1B,EAAI0B,UAAUT,EAAG,OACnC,MAEJ,IAAK,UACDmD,EAAMC,gBAAgBsD,EAAOxG,EAAO0G,mBAAmB5G,IACvD,MAEJ,IAAK,SACD,EAAK6G,mBAAmB7G,EAAG0G,GAC3B,MAEJ,QACI,OAAO,EAGf,OAAO,KAGHA,EAAM/H,SAAS,eACnB,IAAK,gBACM+H,EAAM/H,SAAS,cACtB+H,EAAM/H,SAAS,eAAiB,OAChC+H,EAAM/H,SAAS,gBAAkB,OACjC,MAEJ,IAAK,eACM+H,EAAM/H,SAAS,cACtB+H,EAAM/H,SAAS,eAAiB,SAK5C,YAAAkI,mBAAA,SAAmBjH,EAAe8G,GAC9B,IAAII,EAAc/H,EAAIsG,SAASzF,EAAM,eACjCmH,EAAiBhI,EAAIsG,SAASzF,EAAM,kBACpCoH,EAAgBjI,EAAIsG,SAASzF,EAAM,iBACnCqH,EAAelI,EAAIsG,SAASzF,EAAM,gBAEtC8G,EAAM/H,SAAgB,MAAI,OAC1B+H,EAAM/H,SAAS,iBAAmBuB,EAAOgH,QAAQR,EAAM/H,SAAS,iBAAkBoI,GAClFL,EAAM/H,SAAS,eAAiBuB,EAAOgH,QAAQR,EAAM/H,SAAS,eAAgBsI,GAC9EP,EAAM/H,SAAS,gBAAkBuB,EAAOgH,QAAQR,EAAM/H,SAAS,gBAAiBqI,GAChFN,EAAM/H,SAAS,cAAgBuB,EAAOgH,QAAQR,EAAM/H,SAAS,cAAemI,IAGhF,YAAAT,cAAA,SAAczG,GAAd,WACQrB,EAAuB,CAAEzC,KAAM,EAAA0C,QAAQ2I,IAAKzI,SAAU,IAc1D,OAZAK,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,KACDX,EAAOG,SAASS,KAAK,EAAKiI,eAAepH,IACzC,MAEJ,IAAK,OACD,EAAKqH,wBAAwBrH,EAAGzB,OAKrCA,GAGX,YAAA8I,wBAAA,SAAwBpI,EAAeqI,GACnCA,EAAI3I,SAAW7D,KAAKqF,uBAAuBlB,EAAM,GAAI,MAAM,SAAAe,GACvD,MACS,aADDA,EAAEd,YAEFoI,EAAI7G,UAAYP,EAAOmD,oBAAoBrD,IAO5C,OAIf,YAAAoH,eAAA,SAAexH,GAAf,WACQrB,EAAwB,CAAEzC,KAAM,EAAA0C,QAAQ+I,KAAM7I,SAAU,IAkB5D,OAhBAK,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,MACDX,EAAOG,SAASS,KAAK,EAAKE,WAAWW,IACrC,MAEJ,IAAK,IACDzB,EAAOG,SAASS,KAAK,EAAKC,eAAeY,IACzC,MAEJ,IAAK,OACD,EAAKwH,yBAAyBxH,EAAGzB,OAKtCA,GAGX,YAAAiJ,yBAAA,SAAyBvI,EAAewI,GACpCA,EAAK9I,SAAW7D,KAAKqF,uBAAuBlB,EAAM,GAAI,MAAM,SAAAe,GACxD,OAAQA,EAAEd,WACN,IAAK,WACDuI,EAAKC,KAAO3I,EAAIoD,QAAQnC,EAAG,MAAO,MAClC,MAEJ,IAAK,SACD,MAEJ,IAAK,WACDyH,EAAKhH,UAAYP,EAAOmD,oBAAoBrD,GAC5C,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAG,uBAAA,SAAuBlB,EAAeoD,EAAsCsF,EAA2CC,GAAvH,WA4HI,YA5HkC,IAAAvF,IAAAA,EAAA,WAAsC,IAAAsF,IAAAA,EAAA,WAA2C,IAAAC,IAAAA,EAAA,MACnHvF,EAAQA,GAAS,GAGjBtD,EAAIC,QAAQC,GAAM,SAAAe,GACd,OAAQA,EAAEd,WACN,IAAK,KACDmD,EAAM,cAAgBnC,EAAO2H,UAAU7H,GACvC,MAEJ,IAAK,gBACDqC,EAAM,kBAAoBnC,EAAO4H,qBAAqB9H,GACtD,MAEJ,IAAK,QACDqC,EAAa,MAAItD,EAAIgJ,UAAU/H,EAAG,MAAO,KAAM,EAAAlC,MAAME,OACrD,MAEJ,IAAK,KACDqE,EAAM,aAAeA,EAAM,cAAgBtD,EAAIsG,SAASrF,EAAG,MAAO9B,EAAS8J,UAC3E,MAEJ,IAAK,MACD3F,EAAM,oBAAsBtD,EAAIgJ,UAAU/H,EAAG,OAAQ,KAAM,EAAAlC,MAAMC,KACjE,MAEJ,IAAK,YACDsE,EAAM,oBAAsBtD,EAAIgJ,UAAU/H,EAAG,MAAO,KAAM,EAAAlC,MAAMG,WAChE,MAEJ,IAAK,MACD,GAAI,EAAKG,YACL,MAER,IAAK,OACDiE,EAAa,MAAInC,EAAO+H,YAAYjI,EAAG,KACvC,MAEJ,IAAK,WACD,EAAKkI,cAAclI,EAAGqC,GACtB,MAEJ,IAAK,SACDA,EAAM,mBAAqBnC,EAAOiI,cAAcnI,GAChD,MAEJ,IAAK,IACDqC,EAAM,eAAiBnC,EAAOkI,YAAYpI,GAC1C,MAEJ,IAAK,IACDqC,EAAM,cAAgB,SACtB,MAEJ,IAAK,IACD,EAAKgG,eAAerI,EAAGqC,GACvB,MAEJ,IAAK,MACL,IAAK,SACD,EAAKiG,iBAAiBtI,EAAGqC,GACzB,MAEJ,IAAK,SACD,EAAKkG,UAAUvI,EAAGqC,GAClB,MAEJ,IAAK,aACD,EAAKmG,sBAAsBxI,EAAG2H,GAActF,GAC5C,MAEJ,IAAK,iBACDA,EAAM,kBAAoBnC,EAAOuI,cAAczI,GAC/CqC,EAAM,mBAAqB,WAC3B,MAEJ,IAAK,OACD,EAAKmG,sBAAsBxI,EAAGqC,GAC9B,MAEJ,IAAK,MACDA,EAAc,OAAInC,EAAOwI,cAAc1I,GACvC,MAEJ,IAAK,YACD,EAAKwI,sBAAsBxI,EAAGqC,GAC9B,MAEJ,IAAK,SAGD,MAEJ,IAAK,aACL,IAAK,QACD,EAAKsG,sBAAsB3I,EAAG2H,GAActF,GAC5C,MAEJ,IAAK,YACDA,EAAM,gBAAkBnC,EAAO0I,iBAAiB5I,GAChD,MAEJ,IAAK,SACDqC,EAAM,kBAAoBtD,EAAIsB,WAAWL,EAAG,OAC5C,MAEJ,IAAK,UACqB,OAAlBf,EAAKC,WACL,EAAK2J,aAAa7I,EAAGqC,GACzB,MAEJ,IAAK,OACL,IAAK,UACL,IAAK,YAED,MAEJ,QACmB,MAAXuF,GAAoBA,EAAQ5H,IAC5B,EAAK3B,OAAS6C,QAAQC,KAAK,mCAAmCnB,EAAEd,eAKzEmD,GAGX,YAAAgG,eAAA,SAAezI,EAAeyC,GAC1B,IAAIyG,EAAM/J,EAAIsB,WAAWT,EAAM,OAE/B,GAAW,MAAPkJ,GAAsB,QAAPA,EAAnB,CAGA,OAAQA,GACJ,IAAK,OACL,IAAK,kBACL,IAAK,eACL,IAAK,cACL,IAAK,WACL,IAAK,gBACL,IAAK,UACL,IAAK,aACDzG,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,cACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,QAUL,IAAK,QACDA,EAAM,mBAAqB,YAC3B,MARJ,IAAK,OACL,IAAK,aACL,IAAK,YACDA,EAAM,yBAA2B,OAQzC,IAAI0G,EAAMhK,EAAIgJ,UAAUnI,EAAM,SAE1BmJ,IACA1G,EAAM,yBAA2B0G,KAGzC,YAAAR,UAAA,SAAU3I,EAAeyC,GACrB,IAAI2G,EAAQjK,EAAIsB,WAAWT,EAAM,SAE7BoJ,IACA3G,EAAM,eAAiB2G,IAG/B,YAAAV,iBAAA,SAAiB1I,EAAeyC,GAC5B,IAAI4G,EAAYlK,EAAIsG,SAASzF,EAAM,aAC/BsJ,EAAOnK,EAAIsG,SAASzF,EAAM,QAC1BuJ,EAAQpK,EAAIsG,SAASzF,EAAM,SAC3BwJ,EAAQrK,EAAIsG,SAASzF,EAAM,SAC3ByJ,EAAMtK,EAAIsG,SAASzF,EAAM,OAEzBqJ,IAAW5G,EAAM,eAAiB4G,IAClCC,GAAQC,KAAO9G,EAAM,eAAiB6G,GAAQC,IAC9CC,GAASC,KAAKhH,EAAM,gBAAkB+G,GAASC,IAGvD,YAAAR,aAAA,SAAajJ,EAAeyC,GACxB,IAAIiH,EAASvK,EAAIsG,SAASzF,EAAM,UAC5B2J,EAAQxK,EAAIsG,SAASzF,EAAM,SAC3B4J,EAAOzK,EAAIoD,QAAQvC,EAAM,OAAQ,MACjC6J,EAAW1K,EAAIsB,WAAWT,EAAM,YAKpC,GAHI0J,IAAQjH,EAAM,cAAgBiH,GAC9BC,IAAOlH,EAAM,iBAAmBkH,GAEvB,OAATC,EACA,OAAOC,GACH,IAAK,OACDpH,EAAM,eAAiB,IAAImH,EAAO,KAAKE,QAAQ,GAC/C,MAEJ,IAAK,UACDrH,EAAM,eAAiB,eAAemH,EAAO,GAAE,MAC/C,MAEJ,QACInH,EAAM,eAAiBA,EAAM,cAAmBmH,EAAO,GAAE,OAMzE,YAAAb,sBAAA,SAAsB/I,EAAe+J,GACjC5K,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,OACDyK,EAAO,gBAAkBzJ,EAAOuI,cAAczI,GAC9C,MAEJ,IAAK,QACD2J,EAAO,iBAAmBzJ,EAAOuI,cAAczI,GAC/C,MAEJ,IAAK,MACD2J,EAAO,eAAiBzJ,EAAOuI,cAAczI,GAC7C,MAEJ,IAAK,SACD2J,EAAO,kBAAoBzJ,EAAOuI,cAAczI,QAMhE,YAAAkI,cAAA,SAActI,EAAe+J,GACjB5K,EAAIsB,WAAWT,EAAM,SAOrB+J,EAAe,OAAI5K,EAAIsG,SAASzF,EAAM,QAOlD,YAAA4I,sBAAA,SAAsB5I,EAAe+J,GACjC5K,EAAIC,QAAQY,GAAM,SAAAI,GACd,OAAQA,EAAEd,WACN,IAAK,QACL,IAAK,OACDyK,EAAO,eAAiBzJ,EAAOwI,cAAc1I,GAC7C,MAEJ,IAAK,MACL,IAAK,QACD2J,EAAO,gBAAkBzJ,EAAOwI,cAAc1I,GAC9C,MAEJ,IAAK,MACD2J,EAAO,cAAgBzJ,EAAOwI,cAAc1I,GAC5C,MAEJ,IAAK,SACD2J,EAAO,iBAAmBzJ,EAAOwI,cAAc1I,QAKnE,EA3iCA,GAAa,EAAA4J,eAAAA,EA6iCb,SAAK1L,GACD,2BACA,iBACA,iBACA,uBACA,yBALJ,CAAKA,IAAAA,EAAQ,KAQb,+BAwEA,OAvEW,EAAAc,QAAP,SAAeY,EAAeiK,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIlK,EAAKmK,WAAWC,OAAQF,IAAK,CAC7C,IAAIrK,EAAIG,EAAKmK,WAAWD,GAEN,GAAdrK,EAAEwK,UACFJ,EAAYpK,KAIjB,EAAAsC,kBAAP,SAAyB9C,EAAeiL,EAAUC,GAC9C,IAAI1K,EAAI,UAAgBX,QAAQG,EAAMiL,GACtC,OAAOzK,EAAIV,EAAIsB,WAAWZ,EAAG0K,GAAY,MAGtC,EAAA9J,WAAP,SAAkBT,EAAeuK,GAC7B,OAAO,UAAgBxM,KAAKiC,EAAMuK,IAG/B,EAAApC,UAAP,SAAiBnI,EAAeuK,EAAkBC,EAAyBC,QAAzB,IAAAD,IAAAA,EAAA,WAAyB,IAAAC,IAAAA,EAAA,SACvE,IAAIC,EAAIvL,EAAIsB,WAAWT,EAAMuK,GAE7B,OAAQG,GACJ,IAAK,SACD,OAAOA,EAEX,IAAK,OACD,OAAOD,EAGf,OAAOC,EAAI,IAAIA,EAAMF,GAGlB,EAAA7J,SAAP,SAAgBX,EAAeuK,EAAkBC,GAC7C,YAD6C,IAAAA,IAAAA,GAAA,GACtC,UAAgB7J,SAASX,EAAMuK,EAAUC,IAG7C,EAAAjI,QAAP,SAAevC,EAAeuK,EAAkBC,GAE5C,YAF4C,IAAAA,IAAAA,EAAA,GAClCrL,EAAIsB,WAAWT,EAAMuK,GAClBI,SAASxL,EAAIsB,WAAWT,EAAMuK,IAAaC,GAGrD,EAAA/E,SAAP,SAAgBzF,EAAeuK,EAAkBrO,GAC7C,YAD6C,IAAAA,IAAAA,EAAiBoC,EAASsM,KAChEzL,EAAI0L,YAAY1L,EAAIsB,WAAWT,EAAMuK,GAAWrO,IAGpD,EAAA4J,UAAP,SAAiB9F,EAAe9D,GAC5B,YAD4B,IAAAA,IAAAA,EAAiBoC,EAASsM,KAC/CzL,EAAI0L,YAAY7K,EAAKiE,YAAa/H,IAGtC,EAAA2O,YAAP,SAAmB3B,EAAahN,GAC5B,QAD4B,IAAAA,IAAAA,EAAiBoC,EAASsM,KAC3C,MAAP1B,GAAeA,EAAI4B,QAAQ,OAAS,EACpC,OAAO5B,EAEX,IAAI6B,EAASJ,SAASzB,GAEtB,OAAQhN,GACJ,KAAKoC,EAASsM,IAAK,OAAQ,IAAOG,GAAQjB,QAAQ,GAAK,KACvD,KAAKxL,EAASoH,IAAK,OAAQqF,EAAS,OAAOjB,QAAQ,GAAK,KACxD,KAAKxL,EAAS8J,SAAU,OAAQ,GAAM2C,GAAQjB,QAAQ,GAAK,KAC3D,KAAKxL,EAAS0M,OAAQ,OAAQ,KAAQD,GAAQjB,QAAQ,GAAK,KAC3D,KAAKxL,EAAS2M,QAAS,OAAQ,IAAOF,GAAQjB,QAAQ,GAAK,IAG/D,OAAOZ,GAGJ,EAAArI,UAAP,SAAiBb,EAAeuK,GAC5B,IAAIrB,EAAM/J,EAAIsB,WAAWT,EAAMuK,GAE/B,OAAOrB,GAAOA,EAAIgC,QAAQ,SAAU,KAAKA,QAAQ,QAAS,QAElE,EAxEA,GA0EA,2BAkHA,OAjHW,EAAA1C,YAAP,SAAmBpI,GACf,OAAOjB,EAAIwB,SAASP,EAAG,OAAO,GAAQ,OAAS,UAG5C,EAAAiI,YAAP,SAAmBjI,EAAYrC,GAC3B,IAAI7B,EAAiBoC,EAASsM,IAE9B,OAAQzL,EAAIsB,WAAWL,EAAG,SACtB,IAAK,MAAO,MACZ,IAAK,MAAOlE,EAAOoC,EAAS2M,QAGhC,OAAO9L,EAAIsG,SAASrF,EAAGrC,EAAM7B,IAG1B,EAAAqM,cAAP,SAAqBnI,GACjB,OAAOjB,EAAIwB,SAASP,EAAG,OAAO,GAAQ,eAAiB,QAGpD,EAAAyI,cAAP,SAAqBzI,GACjB,OAAOjB,EAAIsG,SAASrF,EAAG,MAGpB,EAAA0I,cAAP,SAAqB1I,GAGjB,GAAY,OAFDjB,EAAIsB,WAAWL,EAAG,OAGzB,MAAO,OAEX,IAAIhC,EAAQe,EAAIgJ,UAAU/H,EAAG,SAG7B,OAFWjB,EAAIsG,SAASrF,EAAG,KAAM9B,EAAS0M,QAE5B,WAAmB,QAAT5M,EAAkB,QAAUA,IAGjD,EAAA4K,iBAAP,SAAwB5I,GAEpB,MAAe,SADJjB,EAAIsB,WAAWL,EAAG,OACJ,QAAU,QAGhC,EAAAqD,oBAAP,SAA2BrD,GACvB,IAAIS,EAAY,GACZqI,EAAM/J,EAAIsB,WAAWL,EAAG,OAgB5B,MAbc,KAAV8I,EAAI,KAAWrI,GAAa,cAClB,KAAVqI,EAAI,KAAWrI,GAAa,aAClB,KAAVqI,EAAI,KAAWrI,GAAa,cAClB,KAAVqI,EAAI,KAAWrI,GAAa,aAClB,KAAVqI,EAAI,KAAWrI,GAAa,YAClB,KAAVqI,EAAI,KAAWrI,GAAa,aAClB,KAAVqI,EAAI,KAAWrI,GAAa,YAClB,KAAVqI,EAAI,KAAWrI,GAAa,aAClB,KAAVqI,EAAI,KAAWrI,GAAa,YAClB,KAAVqI,EAAI,KAAWrI,GAAa,YACjB,KAAXqI,EAAI,MAAYrI,GAAa,YAClB,KAAXqI,EAAI,MAAYrI,GAAa,YAE1BA,EAAUsK,QAGd,EAAAlD,UAAP,SAAiB7H,GACb,IAAIlE,EAAOiD,EAAIsB,WAAWL,EAAG,OAE7B,OAAQlE,GACJ,IAAK,QACL,IAAK,OAAQ,MAAO,OACpB,IAAK,SAAU,MAAO,SACtB,IAAK,MACL,IAAK,QAAS,MAAO,QACrB,IAAK,OAAQ,MAAO,UAGxB,OAAOA,GAGJ,EAAAgM,qBAAP,SAA4B9H,GACxB,IAAIlE,EAAOiD,EAAIsB,WAAWL,EAAG,OAE7B,OAAQlE,GACJ,IAAK,OACL,IAAK,WAAY,MAAO,WACxB,IAAK,MAAO,MAAO,MACnB,IAAK,SAAU,MAAO,SACtB,IAAK,SAAU,MAAO,SAG1B,OAAOA,GAGJ,EAAAoL,QAAP,SAAe8D,EAAWC,GACtB,OAAS,MAALD,EAAkBC,EACb,MAALA,EAAkBD,EAEf,QAAQA,EAAC,MAAMC,EAAC,KAGpB,EAAAC,UAAP,SAAiBC,EAAaC,GAC1B,OAAQD,EAAMC,IAASA,GAGpB,EAAAxE,mBAAP,SAA0B5G,GACtB,IAAIS,EAAY,GAShB,OAPI1B,EAAIwB,SAASP,EAAG,iBAAgBS,GAAa,cAC7C1B,EAAIwB,SAASP,EAAG,cAAaS,GAAa,cAC1C1B,EAAIwB,SAASP,EAAG,gBAAeS,GAAa,YAC5C1B,EAAIwB,SAASP,EAAG,aAAYS,GAAa,aACzC1B,EAAIwB,SAASP,EAAG,aAAYS,GAAa,aACzC1B,EAAIwB,SAASP,EAAG,aAAYS,GAAa,aAEtCA,EAAUsK,QAEzB,EAlHA,I,mUCnpCA,aACA,SACA,SAcA,uBAA4BM,EAAkBC,EAA4BC,EAAoCC,QAApC,IAAAD,IAAAA,EAAA,WAAoC,IAAAC,IAAAA,EAAA,MAC1G,IAAIC,EAAS,IAAI,EAAA7B,eACb8B,EAAW,IAAI,EAAAC,aAAaC,OAAOC,UAEnCpR,EAAU,EAAH,CACPqR,cAAc,EACd1N,aAAa,EACb2N,aAAa,EACbC,YAAY,EACZ3N,OAAO,EACP4N,cAAc,EACdxL,UAAW,OACXyL,WAAW,EACXvP,oBAAoB,GAChB6O,GASR,OANAC,EAAOrN,YAAc3D,EAAQ2D,YAC7BqN,EAAOpN,MAAQ5D,EAAQ4D,OAASoN,EAAOpN,MAEvCqN,EAASjL,UAAYhG,EAAQgG,WAAa,OAC1CiL,EAASQ,UAAYzR,EAAQyR,UAEtB,EAAAC,aAAa7Q,KAAK+P,EAAMI,EAAQ,CACnC9O,mBAAoBlC,EAAQkC,qBAC7BjB,MAAK,SAAA0Q,GAEJ,OADAV,EAASW,OAAOD,EAAKd,EAAeC,EAAgB9Q,GAC7C2R,O,8GC1Cf,aAaA,8BAAmCnN,EAAeF,GAC9C,MAAO,CACHjD,KAAM,EAAA0C,QAAQ8N,cACd5O,GAAIqB,EAAIpB,KAAKsB,EAAM,MACnBY,KAAMd,EAAIpB,KAAKsB,EAAM,QACrBsN,SAAUxN,EAAIoD,QAAQlD,EAAM,YAC5BuN,QAASzN,EAAIoD,QAAQlD,EAAM,aAInC,4BAAiCA,EAAeF,GAC5C,MAAO,CACHjD,KAAM,EAAA0C,QAAQiO,YACd/O,GAAIqB,EAAIpB,KAAKsB,EAAM,S,6HCzBd,EAAAyN,GAAK,CACdC,OAAQ,gEAsBC,EAAAC,YAA+C,CACxDpC,IAAK,CAAEqC,IAAK,IAAMC,KAAM,MACxBxH,IAAK,CAAEuH,IAAK,EAAI,MAAOC,KAAM,MAC7B9E,SAAU,CAAE6E,IAAK,GAAKC,KAAM,MAC5BlC,OAAQ,CAAEiC,IAAK,KAAOC,KAAM,MAC5BC,MAAO,CAAEF,IAAK,EAAGC,KAAM,MACvBjC,QAAS,CAAEgC,IAAK,IAAMC,KAAM,KAC5BE,WAAY,CAAEH,IAAK,EAAI,IAAKC,KAAM,OAGtC,yBAA8BhE,EAAamE,GACvC,YADuC,IAAAA,IAAAA,EAAyB,EAAAL,YAAYpC,KACrE1B,EAAM,CAAEoE,MAAO3C,SAASzB,GAAOmE,EAAMJ,IAAK/Q,KAAMmR,EAAMH,MAAS,MAG1E,+BAAoC7N,EAAeL,EAAyBG,GACxE,GAAGE,EAAKkO,cAAgB,EAAAT,GAAGC,OACvB,OAAO,EAEX,OAAO1N,EAAKC,WACR,IAAK,QACDN,EAAMZ,MAAQe,EAAIpB,KAAKsB,EAAM,OAC7B,MAEJ,IAAK,KACDL,EAAMwO,SAAWrO,EAAIsO,WAAWpO,EAAM,MAAO,EAAA2N,YAAY5E,UACzD,MAEJ,QACI,OAAO,EAGf,OAAO,I,0jBCvDX,IAIA,cAGI,WAAYsF,EAAqBzS,EAAc4Q,GAA/C,MACI,YAAM6B,EAAKzS,IAAK,K,OAChB,EAAK0S,gBAAkB9B,E,EAQ/B,OAbkC,OAU9B,YAAAtO,SAAA,SAASpD,GACLe,KAAK0S,KAAO1S,KAAKyS,gBAAgBjP,kBAAkBvE,IAE3D,EAbA,CAJA,OAIkCsD,MAArB,EAAAoQ,aAAAA,G,YCLb,IAAYjP,E,mEAAAA,EAAA,EAAAA,UAAA,EAAAA,QAAO,KACf,oBACA,wBACA,YACA,gBACA,gBACA,YACA,cACA,wBACA,oBACA,gBACA,cACA,YACA,kBACA,gCACA,6B,uFCLJ,4BAAiCS,EAAeF,GAC5C,MAAO,CACHuK,OAAQvK,EAAIsO,WAAWpO,EAAM,UAC7BsK,MAAOxK,EAAIsO,WAAWpO,EAAM,SAC5BuK,KAAMzK,EAAIoD,QAAQlD,EAAM,QACxBwK,SAAU1K,EAAIpB,KAAKsB,EAAM,e,uJCdjC,aAEA,SACA,SAEA,SA2CA,SAAgBiE,EAAuBjE,EAAeL,EAA4BG,GAC9E,GAAIE,EAAKkO,cAAgB,EAAAT,GAAGC,OACxB,OAAO,EAEX,IAAG,IAAAe,qBAAoBzO,EAAML,EAAOG,GAChC,OAAO,EAEX,OAAQE,EAAKC,WACT,IAAK,OACDN,EAAM+O,KAAOC,EAAU3O,EAAMF,GAC7B,MAEJ,IAAK,SACDH,EAAMiP,cAAe,IAAAvO,wBAAuBL,EAAMF,GAClD,MAEJ,IAAK,QACDH,EAAMkP,UAAYC,EAAe9O,EAAMF,GACvC,MAEJ,IAAK,UAED,OADAH,EAAMoP,aAAc,IAAAC,kBAAiBhP,EAAMF,IACpC,EAGX,IAAK,gBAED,OADAH,EAAMsP,cAAgBnP,EAAIpB,KAAKsB,EAAM,QAC9B,EAGX,IAAK,WACDL,EAAMuP,UAAYpP,EAAIwB,SAAStB,EAAM,OAAO,GAC5C,MAEJ,IAAK,WACDL,EAAMwP,SAAWrP,EAAIwB,SAAStB,EAAM,OAAO,GAC3C,MAEJ,IAAK,kBACDL,EAAMyP,gBAAkBtP,EAAIwB,SAAStB,EAAM,OAAO,GAClD,MAEJ,IAAK,aACDL,EAAM0P,aAAevP,EAAIoD,QAAQlD,EAAM,OACvC,MAEJ,IAAK,SACDL,EAAM2P,UAAYxP,EAAIpB,KAAKsB,EAAM,OACjC,MAEJ,IAAK,MACDL,EAAMmC,UAAW,IAAAyD,oBAAmBvF,EAAMF,GAC1C,MAEJ,QACI,OAAO,EAGf,OAAO,EAGX,SAAgB6O,EAAU3O,EAAeF,GACrC,OAAOA,EAAIxB,SAAS0B,EAAM,OACrBzB,KAAI,SAAAC,GAAK,OACN+Q,SAAUzP,EAAIsO,WAAW5P,EAAG,OAC5BgR,OAAQ1P,EAAIpB,KAAKF,EAAG,UACpB4E,MAAOtD,EAAIpB,KAAKF,EAAG,WAI/B,SAAgBsQ,EAAe9O,EAAeF,GAG1C,IAFA,IAAIR,EAA6B,GAEnB,MAAAQ,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,QACDX,EAAOb,GAAKqB,EAAIpB,KAAKF,EAAG,OACxB,MAEJ,IAAK,OACDc,EAAOgE,MAAQxD,EAAIoD,QAAQ1E,EAAG,QAK1C,OAAOc,EA/FX,oCAAyCU,EAAeF,GAGpD,IAFA,IAAIR,EAA8B,GAEpB,MAAAQ,EAAIxB,SAAS0B,GAAb,eACViE,EADM,KACqB3E,EAAQQ,GAGvC,OAAOR,GAGX,2BA6DA,cASA,oB,8GCtHA,aAyBA,SAAgBmQ,EAAiBzP,EAAeL,EAAsBG,GAClE,SAAI,IAAA2O,qBAAoBzO,EAAML,EAAOG,GAXzC,8BAAmCE,EAAeF,GAG9C,IAFA,IAAIR,EAAwB,GAEd,MAAAQ,EAAIxB,SAAS0B,GAAb,eACVyP,EADM,KACenQ,EAAQQ,GAGjC,OAAOR,GAGX,sB,YC2DA,SAASoQ,EAAa1P,EAAeF,GACjC,MAAO,CACH6P,gBAAiB7P,EAAIoD,QAAQlD,EAAM,OACnC4P,MAAO9P,EAAIsO,WAAWpO,EAAM,SAC5B6P,UAAW/P,EAAIwB,SAAStB,EAAM,OAC9B8P,WAAYhQ,EAAIwB,SAAStB,EAAM,cAAc,GAC7CqH,QAASvH,EAAIxB,SAAS0B,EAAM,OACvBzB,KAAI,SAAAC,GAAK,OACNgJ,MAAO1H,EAAIsO,WAAW5P,EAAG,KACzBoR,MAAO9P,EAAIsO,WAAW5P,EAAG,cA9DzC,IAAYuR,E,gGAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACnB,wBACA,sBACA,0BACA,sBACA,oBAUJ,kCAAuC/P,EAAeF,GAGlD,IAFA,IAAIkQ,EAA6B,GAEnB,MAAAlQ,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,OACD+P,EAAQC,SAAW,CACfzI,MAAO1H,EAAIsO,WAAW5P,EAAG,KACzB0R,OAAQpQ,EAAIsO,WAAW5P,EAAG,KAC1B2R,YAAarQ,EAAIpB,KAAKF,EAAG,WAE7B,MAEJ,IAAK,OACDwR,EAAQnT,KAAOiD,EAAIpB,KAAKF,EAAG,OAC3B,MAEJ,IAAK,QACDwR,EAAQI,YAAc,CAClBnG,KAAMnK,EAAIsO,WAAW5P,EAAG,QACxB2L,MAAOrK,EAAIsO,WAAW5P,EAAG,SACzB6R,IAAKvQ,EAAIsO,WAAW5P,EAAG,OACvB8R,OAAQxQ,EAAIsO,WAAW5P,EAAG,UAC1B+R,OAAQzQ,EAAIsO,WAAW5P,EAAG,UAC1BgS,OAAQ1Q,EAAIsO,WAAW5P,EAAG,UAC1BiS,OAAQ3Q,EAAIsO,WAAW5P,EAAG,WAE9B,MAEJ,IAAK,OACDwR,EAAQ3I,QAAUqI,EAAalR,EAAGsB,IAK9C,OAAOkQ,I,2jBClFX,aACA,SAEA,2B,+CAMA,OANmC,OAG/B,YAAA9R,SAAA,SAASpD,GACLe,KAAK6U,OAAQ,IAAAC,YAAW7V,EAAMe,KAAK8B,SAASlC,YAEpD,EANA,CAAmC,EAAA2C,MAAtB,EAAAwS,cAAAA,G,YCWb,SAAgBtH,EAAUtJ,EAAevE,GAKrC,IAJA,IAAI6D,EAA0B,CAC1BsB,KAAMnF,EAAUiD,KAAKsB,EAAM,SAGhB,MAAAvE,EAAU6C,SAAS0B,GAAnB,eAA0B,CAApC,IAAI6Q,EAAE,KACP,OAAQA,EAAG5Q,WACP,IAAK,SACDX,EAAOwR,OAASrV,EAAUiD,KAAKmS,EAAI,OACnC,MAEJ,IAAK,UACDvR,EAAOyR,QAAUtV,EAAUiD,KAAKmS,EAAI,OACpC,MAEJ,IAAK,eACDvR,EAAO0R,QAAUvV,EAAUiD,KAAKmS,EAAI,WACpCvR,EAAO2R,MAAQxV,EAAUiD,KAAKmS,EAAI,OAK9C,OAAOvR,E,iFA1BX,sBAA2BxE,EAAeW,GACtC,OAAOA,EAAU6C,SAASxD,GAAMyD,KAAI,SAAAsS,GAAM,OAAAvH,EAAUuH,EAAIpV,OAG5D,e,oUCbA,aAQA,SACA,SAOA,aAQI,WAAmByV,GAAA,KAAAA,aAAAA,EANnB,KAAAjE,WAAqB,EACrB,KAAAzL,UAAoB,OA8wBxB,OAtwBI,YAAA4L,OAAA,SAAOR,EAAwBP,EAA4BC,EAAoC9Q,QAApC,IAAA8Q,IAAAA,EAAA,MACvDzQ,KAAK+Q,SAAWA,EAChB/Q,KAAKL,QAAUA,EACfK,KAAKsV,SAAW,KAIhBC,EAFA9E,EAAiBA,GAAkBD,GAGnC+E,EAAkB/E,GAElBgF,EAAc/E,EAAgB,oCAC9BA,EAAegF,YAAYzV,KAAK0V,sBAEL,MAAvB3E,EAAS4E,aACT3V,KAAKsV,SAAWtV,KAAK4V,cAAc7E,EAAS4E,WAAW1Q,QAEvDuQ,EAAc/E,EAAgB,wBAC9BA,EAAegF,YAAYzV,KAAK6V,aAAa9E,EAAS4E,WAAW1Q,UAGjE8L,EAAS+E,gBACTN,EAAc/E,EAAgB,kCAC9BA,EAAegF,YAAYzV,KAAK+V,gBAAgBhF,EAAS+E,cAAcE,cAAevF,MAIrF9Q,EAAQsR,aAAeF,EAASkF,eACjCjW,KAAKkW,gBAAgBnF,EAASkF,cAAexF,GAEjD,IAAI0F,EAAkBnW,KAAKoW,eAAerF,EAASsF,aAAa3D,MAEhE,GAAI1S,KAAKoR,UAAW,CAChB,IAAIxH,EAAU5J,KAAKsW,gBACnBC,EAAe3M,EAASuM,GACxB3F,EAAciF,YAAY7L,QAG1B2M,EAAe/F,EAAe2F,IAItC,YAAAD,gBAAA,SAAgBM,EAA0B/F,GACtC,I,eAASgG,GACL,EAAK1F,SAAS2F,SAASD,EAAErB,MAAOqB,EAAEtB,SAASvU,MAAK,SAAA+V,GAC5C,IAAIC,EAAU,mDACMH,EAAE1R,KAAI,oCACX4R,EAAQ,wBAGvBnB,EAAc/E,EAAgB,QAAQgG,EAAE1R,MACxC0L,EAAegF,YAAYoB,EAAmBD,Q,OARxC,MAAAJ,EAAU3B,MAAMlN,QAAO,SAAAd,GAAK,OAAAA,EAAEuO,SAA9B,e,EAAJ,OAad,YAAA0B,iBAAA,SAAiBnR,GACb,OAAKA,EAGK3F,KAAK2F,UAAS,IAAIA,EAFjB3F,KAAK2F,WAKpB,YAAAiQ,cAAA,SAAc3Q,GAGV,IAFA,IAAI8R,EAAuC,GAEzB,MAAA9R,EAAO0C,QAAO,SAAAd,GAAK,OAAQ,MAARA,EAAEjE,MAArB,eACdmU,GADKxP,EAAK,MACM3E,IAAM2E,EAG1B,IAAkB,UAAAtC,EAAO0C,QAAO,SAAAd,GAAK,OAAAA,EAAE7B,WAArB,eAA+B,CAA5C,IACGgS,EAAYD,GADXxP,EAAK,MACsBvC,SAEhC,GAAIgS,EACA,I,IACQC,E,WADCC,IACDD,EAAaD,EAAU/R,OAAO0C,QAAO,SAAAd,GAAK,OAAAA,EAAE/D,QAAUoU,EAAYpU,YAEpDmU,EAAW/H,OAAS,GAClC,EAAKiI,oBAAoBF,EAAW,GAAG7R,OAAQ8R,EAAY9R,S,OAJ3C,MAAAmC,EAAMtC,OAAN,e,EAAJ,WAOfjF,KAAKL,QAAQ4D,OAClB6C,QAAQC,KAAK,yBAAyBkB,EAAMvC,SAGpD,IAAkB,UAAAC,EAAA,eAAQ,CAArB,IAAIsC,GAAAA,EAAK,MACJ6P,QAAUpX,KAAK8W,iBAAiB9W,KAAKqX,gBAAgB9P,EAAM3E,KAGrE,OAAOmU,GAGX,YAAAO,eAAA,SAAetT,GACX,GAAIA,EAAQJ,SACR,IAAc,UAAAI,EAAQJ,SAAR,eAAkB,CAA3B,IAAIjB,EAAC,KACNA,EAAEgD,UAAY3F,KAAK8W,iBAAiBnU,EAAEgD,WACtChD,EAAE8F,OAASzE,EAEPrB,EAAE3B,MAAQ,EAAA0C,QAAQ4H,MAClBtL,KAAKuX,aAAa5U,GAGlB3C,KAAKsX,eAAe3U,KAMpC,YAAA4U,aAAA,SAAa3L,GACT,IAAc,UAAAA,EAAMhI,SAAN,eACV,IADC,IACa,MADR,KACUA,SAAF,eAAY,CAArB,IAAIsB,EAAC,KACNA,EAAErB,SAAW7D,KAAKmX,oBAAoBvL,EAAMC,UAAW3G,EAAErB,SAAU,CAC/D,cAAe,eAAgB,aAAc,gBAC7C,eAAgB,gBAAiB,cAAe,mBAGpD7D,KAAKsX,eAAepS,KAKhC,YAAAiS,oBAAA,SAAoB1W,EAA+BoO,EAAgC2I,GAC/E,QAD+E,IAAAA,IAAAA,EAAA,OAC1E/W,EACD,OAAOoO,EAEG,MAAVA,IAAgBA,EAAS,IAChB,MAAT2I,IAAeA,EAAQC,OAAOC,oBAAoBjX,IAEtD,IAAgB,UAAA+W,EAAA,eAAO,CAAlB,IAAIG,EAAG,KACJlX,EAAMmX,eAAeD,KAAS9I,EAAO+I,eAAeD,KACpD9I,EAAO8I,GAAOlX,EAAMkX,IAG5B,OAAO9I,GAGX,YAAAgJ,cAAA,SAAclS,EAAmB7B,GAC7B,IAAIK,EAAOnE,KAAKqV,aAAayC,cAAc,WA6B3C,OA3BA3T,EAAKwB,UAAYA,EAEb7B,IACIA,EAAMyQ,cACNpQ,EAAKoD,MAAMwQ,YAAc/X,KAAKgY,aAAalU,EAAMyQ,YAAYnG,MAC7DjK,EAAKoD,MAAM0Q,aAAejY,KAAKgY,aAAalU,EAAMyQ,YAAYjG,OAC9DnK,EAAKoD,MAAM2Q,WAAalY,KAAKgY,aAAalU,EAAMyQ,YAAYC,KAC5DrQ,EAAKoD,MAAM4Q,cAAgBnY,KAAKgY,aAAalU,EAAMyQ,YAAYE,SAG/D3Q,EAAMsQ,WACDpU,KAAKL,QAAQ2D,cACda,EAAKoD,MAAMoE,MAAQ3L,KAAKgY,aAAalU,EAAMsQ,SAASzI,QACnD3L,KAAKL,QAAQqR,eACd7M,EAAKoD,MAAM6Q,UAAYpY,KAAKgY,aAAalU,EAAMsQ,SAASC,UAG5DvQ,EAAM0H,SAAW1H,EAAM0H,QAAQsI,kBAC/B3P,EAAKoD,MAAM8Q,YAAc,GAAGvU,EAAM0H,QAAQsI,gBAC1C3P,EAAKoD,MAAM+Q,UAAYtY,KAAKgY,aAAalU,EAAM0H,QAAQuI,OAEnDjQ,EAAM0H,QAAQwI,YACd7P,EAAKoD,MAAMgR,WAAa,qBAK7BpU,GAGX,YAAAiS,eAAA,SAAerF,GACX,IAAItN,EAAS,GAEbzD,KAAKsX,eAAevG,GAEpB,IAAoB,UAAA/Q,KAAKwY,eAAezH,EAASnN,UAA7B,eAAwC,CAAvD,IAAIuQ,EAAO,KACRsE,EAAiBzY,KAAK6X,cAAc7X,KAAK2F,UAAWwO,EAAQuE,WAAa3H,EAASjN,OACtF9D,KAAK2Y,eAAexE,EAAQ1R,SAAUsO,EAAU0H,GAChDhV,EAAOY,KAAKoU,GAGhB,OAAOhV,GAGX,YAAA+U,eAAA,SAAe/V,GAIX,I,MAHImW,EAAU,CAAEF,UAAW,KAAMjW,SAAU,IACvCgB,EAAS,CAACmV,GAEG,MAAAnW,EAAA,eAAU,CAAtB,IAAI0B,EAAI,KACT,GAAIA,EAAKnD,MAAQ,EAAA0C,QAAQoE,UAAW,CAChC,IAAM2L,EAAatP,EAA0BsP,UACvCtN,EAAInG,KAAKsV,UAAY7B,EAAYzT,KAAKsV,SAAS7B,GAAa,MAE7C,QAAjB,EAAAtN,MAAAA,OAAC,EAADA,EAAGJ,sBAAc,eAAEwN,mBACnBqF,EAAQF,UAAYA,EACpBE,EAAU,CAAEF,UAAW,KAAMjW,SAAU,IACvCgB,EAAOY,KAAKuU,IAMpB,GAFAA,EAAQnW,SAAS4B,KAAKF,GAElBA,EAAKnD,MAAQ,EAAA0C,QAAQoE,UAAW,CAChC,IAAM+Q,EAAI1U,EAENuU,EAAYG,EAAE9F,aACd+F,GAAe,EACfC,GAAe,EAenB,GAbI/Y,KAAKL,QAAQuR,YAAc2H,EAAEjV,WAC7BkV,EAAcD,EAAEjV,SAASoV,WAAU,SAAAC,G,QAE/B,OAAuB,IADvBF,EAA6E,QAA/D,EAAU,QAAV,EAAAE,EAAErV,gBAAQ,eAAEoV,WAAU,SAAAE,GAAK,MAA6B,QAA5BA,EAAmBhQ,gBAAgB,SAAK,QAKtFwP,IAA6B,GAAhBI,KACbF,EAAQF,UAAYA,EACpBE,EAAU,CAAEF,UAAW,KAAMjW,SAAU,IACvCgB,EAAOY,KAAKuU,KAGI,GAAhBE,EAAmB,CACnB,IAAIK,EAAWN,EAAEjV,SAASkV,GACtBM,EAAWL,EAAcI,EAASvV,SAASsL,OAAS,EAExD,GAAI4J,EAAcD,EAAEjV,SAASsL,OAAS,GAAKkK,EAAU,CACjD,IAAIxV,EAAWO,EAAKP,SAChByV,EAAe,EAAH,KAAQlV,GAAI,CAAEP,SAAUA,EAAS0V,MAAMR,KAIvD,GAHA3U,EAAKP,SAAWA,EAAS0V,MAAM,EAAGR,GAClCF,EAAQnW,SAAS4B,KAAKgV,GAElBD,EAAU,CACV,IAAIG,EAAcJ,EAASvV,SACvB4V,EAAS,EAAH,KAAQL,GAAQ,CAAEvV,SAAU2V,EAAYD,MAAM,EAAGP,KAC3D5U,EAAKP,SAASS,KAAKmV,GACnBL,EAASvV,SAAW2V,EAAYD,MAAMP,OAS1D,IAFA,IAAIU,EAAmB,KAEdzK,EAAIvL,EAAOyL,OAAS,EAAGF,GAAK,EAAGA,IACT,MAAvBvL,EAAOuL,GAAG0J,UACVjV,EAAOuL,GAAG0J,UAAYe,EAEtBA,EAAmBhW,EAAOuL,GAAG0J,UAIrC,OAAOjV,GAGX,YAAAuU,aAAA,SAAa0B,GACT,OAAOA,EAAI,GAAGA,EAAEtH,MAAQsH,EAAE1Y,KAAS,MAGvC,YAAAsV,cAAA,WACI,IAAI1M,EAAUmH,SAAS+G,cAAc,OAIrC,OAFAlO,EAAQjE,UAAe3F,KAAK2F,UAAS,WAE9BiE,GAGX,YAAA8L,mBAAA,WACI,IAAIxQ,EAAIlF,KAAK2F,UAWb,OAAOkR,EAVS,MACrB3R,EAAC,gIACDA,EAAC,oBAAoBA,EAAC,2FACtBA,EAAC,+BACMA,EAAC,kCACRA,EAAC,2CACDA,EAAC,eAAeA,EAAC,wCACjBA,EAAC,0BAuEA,YAAA6Q,gBAAA,SAAgB9Q,EAAyBwL,GAIrC,IAJJ,IAKYnK,EACAqT,EANZ,OACQC,EAAY,GACZC,EAAe,G,aAMf,GAHIvT,EAAW,KAAK,EAAKwT,eAAezJ,EAAIzN,GAAIyN,EAAI5I,OAChDkS,EAAgB,OAEhBtJ,EAAIzI,WAA2B,WAAdyI,EAAIxI,OAAqB,CAC1C,IAAIkS,EAAU,EAAKC,iBAAiB3J,EAAIzN,GAAIyN,EAAI5I,OAE5C4I,EAAI5I,MAAQ,EACZmS,GAAa,EAAKK,cAAc,KAAK,EAAKH,eAAezJ,EAAIzN,GAAIyN,EAAI5I,MAAQ,GAAM,CAC/E,gBAAiBsS,IAIrBF,EAAaxV,KAAK0V,GAGtBH,GAAa,EAAKK,cAAiB3T,EAAQ,UAAW,CAClD,QAAW,EAAK4T,mBAAmB7J,EAAIzI,UAAWyI,EAAIzN,IACtD,oBAAqBmX,SAGxB,GAAI1J,EAAI3I,OAAQ,CACjB,IAAI,GAAW,KAAK,EAAK/B,UAAS,IAAI0K,EAAI3I,OAAOJ,KAAM6S,cAEvDP,GAAa,EAAKK,cAAiB3T,EAAQ,UAAW,CAClD,QAAW,MACX,QAAW,eACX,WAAc,OAAO,EAAQ,KAC9B+J,EAAI3I,OAAOH,OAEd,EAAKwJ,SAASqJ,mBAAmB/J,EAAI3I,OAAOJ,KAAK1G,MAAK,SAAA2P,GAClD,IAAItO,EAAO,IAAI,EAAK0D,UAAS,cAAc,EAAQ,SAAS4K,EAAI,MAChEE,EAAegF,YAAYoB,EAAmB5U,YAIlD0X,EAAgB,EAAKU,oBAAoBhK,EAAIxI,QAGjD+R,GAAa,EAAKK,cAAc3T,EAAU,EAAF,CACpC,QAAW,YACX,sBAAuB,SACvB,kBAAmBqT,GAChBtJ,EAAI9I,S,OA3CC,MAAAtC,EAAA,eAAQ,CAAnB,IAAIoL,EAAG,K,IAqDZ,OANIwJ,EAAa3K,OAAS,IACtB0K,GAAa5Z,KAAKia,cAAc,IAAIja,KAAK2F,UAAS,WAAY,CAC1D,gBAAiBkU,EAAaS,KAAK,QAIpCzD,EAAmB+C,IAG9B,YAAA/D,aAAA,SAAa5Q,GAIT,IAHA,IAAI2U,EAAY,GACZ7C,EAAY/W,KAAKsV,SAEH,MAAArQ,EAAA,eAAQ,CAArB,IAAIsC,EAAK,KACNgT,EAAYhT,EAAMtC,OAEtB,GAAIsC,EAAM7B,OAAQ,CACd,IAAI8U,EAAcjT,EAAM7B,QAAUqR,EAAUxP,EAAM7B,QAE9C8U,EACAD,EAAYA,EAAUE,OAAOD,EAAYvV,QACpCjF,KAAKL,QAAQ4D,OAClB6C,QAAQC,KAAK,2BAA2BkB,EAAM7B,QAGtD,IAAqB,UAAA6U,EAAA,eAAW,CAA3B,IAAIG,EAAQ,KACTpU,EAAW,GAEXiB,EAAMzE,QAAU4X,EAAS5X,OACzBwD,GAAeiB,EAAMzE,OAAM,IAAIyE,EAAM6P,QAChC7P,EAAMzE,OACXwD,GAAeiB,EAAMzE,OAAM,IAAIyE,EAAM6P,QAAO,IAAIsD,EAAS5X,OAEzDwD,GAAY,IAAIiB,EAAM6P,QAAO,IAAIsD,EAAS5X,OAE1CyE,EAAM/B,WAAa+B,EAAMzE,SACzBwD,EAAW,IAAItG,KAAK2F,UAAS,IAAI4B,EAAMzE,OAAM,KAAOwD,GAExDsT,GAAa5Z,KAAKia,cAAc3T,EAAUoU,EAAStV,SAI3D,OAAOyR,EAAmB+C,IAG9B,YAAAe,cAAA,SAAcxW,EAAsBsE,GAChC,OAAQtE,EAAKnD,MACT,KAAK,EAAA0C,QAAQoE,UACT,OAAO9H,KAAK4a,gBAAkCzW,GAElD,KAAK,EAAAT,QAAQ8N,cACT,OAAOxR,KAAK6a,oBAA0C1W,GAE1D,KAAK,EAAAT,QAAQiO,YACT,OAAO,KAEX,KAAK,EAAAjO,QAAQmF,IACT,OAAO7I,KAAK8a,UAAsB3W,GAEtC,KAAK,EAAAT,QAAQ4H,MACT,OAAOtL,KAAK+a,YAAY5W,GAE5B,KAAK,EAAAT,QAAQ2I,IACT,OAAOrM,KAAKgb,eAAe7W,GAE/B,KAAK,EAAAT,QAAQ+I,KACT,OAAOzM,KAAKib,gBAAgB9W,GAEhC,KAAK,EAAAT,QAAQgF,UACT,OAAO1I,KAAKkb,gBAAgB/W,GAEhC,KAAK,EAAAT,QAAQoG,QACT,OAAO9J,KAAKmb,cAAyBhX,GAEzC,KAAK,EAAAT,QAAQuH,MACT,OAAOjL,KAAKob,YAAuBjX,GAEvC,KAAK,EAAAT,QAAQoF,KACT,OAAO9I,KAAKqb,WAAwBlX,GAExC,KAAK,EAAAT,QAAQ4F,IACT,OAAOtJ,KAAKsb,UAAUnX,GAE1B,KAAK,EAAAT,QAAQyF,OACT,OAAOnJ,KAAKub,aAA4BpX,GAE5C,KAAK,EAAAT,QAAQuF,MACT,OAAOjJ,KAAKwb,YAA0BrX,GAG9C,OAAO,MAGX,YAAAsX,eAAA,SAAetX,EAAsBuX,GACjC,OAAO1b,KAAK2Y,eAAexU,EAAKP,SAAUO,EAAMuX,IAGpD,YAAA/C,eAAA,SAAegD,EAAyBlT,EAAwBiT,GAAhE,WACI,GAAa,MAATC,EACA,OAAO,KAEX,IAAIlY,EAASkY,EAAMjZ,KAAI,SAAAC,GAAK,SAAKgY,cAAchY,EAAG8F,MAASd,QAAO,SAAAhF,GAAK,OAAK,MAALA,KAEvE,GAAI+Y,EACA,IAAc,UAAAjY,EAAA,eAAM,CAAf,IAAIyB,EAAC,KACNwW,EAAKjG,YAAYvQ,GAEzB,OAAOzB,GAGX,YAAAmX,gBAAA,SAAgBzW,GACZ,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,KAQ7C,GANA9X,KAAK4b,YAAYzX,EAAMV,GACvBzD,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAEtCzD,KAAK8b,uBAAuBrY,EAAO8D,MAAOpD,GAEtCA,EAAK6O,UAAW,CAChB,IAAI8G,EAAiB9Z,KAAK8Z,eAAe3V,EAAK6O,UAAUpQ,GAAIuB,EAAK6O,UAAUvL,OAC3EhE,EAAOkC,WAAY,IAAAoW,aAAYtY,EAAOkC,UAAWmU,GAGrD,GAAI3V,EAAKsP,UAAW,CAChB,IAAIuI,EAAiBhc,KAAK8W,iBAAiB9W,KAAKqX,gBAAgBlT,EAAKsP,YACrEhQ,EAAOkC,WAAY,IAAAoW,aAAYtY,EAAOkC,UAAWqW,GAGrD,OAAOvY,GAGX,YAAAwY,oBAAA,SAAoB1U,EAAYzD,GAC5B9D,KAAK8b,uBAAuBvU,EAAOzD,IAGvC,YAAAgY,uBAAA,SAAuBvU,EAAYzD,GAClB,MAATA,IAGAA,EAAMZ,QACNqE,EAAa,MAAIzD,EAAMZ,OAGvBY,EAAMwO,WACN/K,EAAM,aAAevH,KAAKgY,aAAalU,EAAMwO,aAIrD,YAAA4I,gBAAA,SAAgB/W,GACZ,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,KAQ7C,OANA9X,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAElCU,EAAKyE,OACLnF,EAAOmF,KAAOzE,EAAKyE,MAEhBnF,GAGX,YAAA0X,cAAA,SAAchX,GACV,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,OAS7C,OAPArU,EAAO8D,MAAM2U,QAAU,eACvBzY,EAAO8D,MAAMmM,SAAW,WACxBjQ,EAAO8D,MAAM4U,WAAa,MAE1Bnc,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAE/BA,GAGX,YAAA2X,YAAA,SAAYjX,GACR,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,OAU7C,OARA9X,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAElCzD,KAAK+Q,UACL/Q,KAAK+Q,SAASqL,kBAAkBjY,EAAKmD,KAAK1G,MAAK,SAAAiG,GAC3CpD,EAAO6D,IAAMT,KAIdpD,GAGX,YAAA4X,WAAA,SAAWlX,GACP,OAAOnE,KAAKqV,aAAagH,eAAelY,EAAKlC,OAGjD,YAAAuZ,YAAA,SAAYrX,GACR,MAAkB,gBAAdA,EAAK+E,MACElJ,KAAKqV,aAAayC,cAAc,MAGpC,MAGX,YAAAyD,aAAA,SAAapX,GACT,IAAIyI,EAAO5M,KAAKqV,aAAayC,cAAc,QAG3C,OAFAlL,EAAKrF,MAAM+U,WAAanY,EAAKiF,KAC7BwD,EAAK2P,UAAY,MAAMpY,EAAKkF,KAAI,IACzBuD,GAGX,YAAA0O,UAAA,SAAUnX,GACN,IAAIqY,EAAUxc,KAAKqV,aAAayC,cAAc,QAiB9C,OAfA0E,EAAQD,UAAY,SAEhBvc,KAAKL,QAAQwR,cACbsL,YAAW,WACP,IAAItU,EA0LpB,SAA8ChE,EAAsBnD,GAGhE,IAFA,IAAIyH,EAAStE,EAAKsE,OAED,MAAVA,GAAkBA,EAAOzH,MAAQA,GACpCyH,EAASA,EAAOA,OAEpB,OAAUA,EAhMkBiU,CAA6BvY,EAAM,EAAAT,QAAQoE,WAErC,MAAlBK,EAAU0K,OAGd1K,EAAU0K,KAAK8J,MAAK,SAACzM,EAAGC,GAAM,OAAAD,EAAEwD,SAAStB,MAAQjC,EAAEuD,SAAStB,SAC5DoK,EAAQjV,MAAM2U,QAAU,gBACxB,IAAAU,eAAcJ,EAASrU,EAAU0K,SAClC,GAGA2J,GAGX,YAAA3B,oBAAA,SAAoB1W,GAChB,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,QAE7C,OADArU,EAAOb,GAAKuB,EAAKY,KACVtB,GAGX,YAAAqX,UAAA,SAAU3W,GACN,GAAIA,EAAK6E,aAAe7E,EAAKoF,UACzB,OAAO,KAEX,IAAI9F,EAASzD,KAAKqV,aAAayC,cAAc,QAS7C,GAPI3T,EAAKvB,KACLa,EAAOb,GAAKuB,EAAKvB,IAErB5C,KAAK4b,YAAYzX,EAAMV,GACvBzD,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAElCU,EAAKyE,KAAM,CACX,IAAIiU,EAAO7c,KAAKqV,aAAayC,cAAc,KAK3C,OAHA+E,EAAKjU,KAAOzE,EAAKyE,KACjBiU,EAAKpH,YAAYhS,GAEVoZ,EAEN,GAAI1Y,EAAKyF,QAAS,CACnB,IAAIA,EAAU5J,KAAKqV,aAAayC,cAAc3T,EAAKyF,SAEnD,OADAA,EAAQ6L,YAAYhS,GACbmG,EAGX,OAAOnG,GAGX,YAAAsX,YAAA,SAAY5W,GACR,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,SAS7C,OAPI3T,EAAKqH,SACL/H,EAAOgS,YAAYzV,KAAK8c,mBAAmB3Y,EAAKqH,UAEpDxL,KAAK4b,YAAYzX,EAAMV,GACvBzD,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAE/BA,GAGX,YAAAqZ,mBAAA,SAAmBtR,GAGf,IAFA,IAAI/H,EAASzD,KAAKqV,aAAayC,cAAc,YAE7B,MAAAtM,EAAA,eAAS,CAApB,IAAIyC,EAAG,KACJ8O,EAAU/c,KAAKqV,aAAayC,cAAc,OAE1C7J,EAAItC,QACJoR,EAAQxV,MAAMoE,MAAWsC,EAAItC,MAAK,MAEtClI,EAAOgS,YAAYsH,GAGvB,OAAOtZ,GAGX,YAAAuX,eAAA,SAAe7W,GACX,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,MAM7C,OAJA9X,KAAK4b,YAAYzX,EAAMV,GACvBzD,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAE/BA,GAGX,YAAAwX,gBAAA,SAAgB9W,GACZ,IAAIV,EAASzD,KAAKqV,aAAayC,cAAc,MAQ7C,OANA9X,KAAK4b,YAAYzX,EAAMV,GACvBzD,KAAKyb,eAAetX,EAAMV,GAC1BzD,KAAK6b,kBAAkB1X,EAAKN,SAAUJ,GAElCU,EAAKyI,OAAMnJ,EAAOuZ,QAAU7Y,EAAKyI,MAE9BnJ,GAGX,YAAAoY,kBAAA,SAAkBtU,EAA+B0V,GAC7C,GAAa,MAAT1V,EAGJ,IAAK,IAAIoQ,KAAOpQ,EACRA,EAAMqQ,eAAeD,KACrBsF,EAAM1V,MAAMoQ,GAAOpQ,EAAMoQ,KAKrC,YAAAiE,YAAA,SAAYnb,EAAuBwc,GAC3Bxc,EAAMkF,YACNsX,EAAMtX,UAAYlF,EAAMkF,YAGhC,YAAAmU,eAAA,SAAelX,EAAYsa,GACvB,OAAUld,KAAK2F,UAAS,QAAQ/C,EAAE,IAAIsa,GAG1C,YAAAjD,cAAA,SAAckD,EAAmB/X,EAAgCgY,QAAA,IAAAA,IAAAA,EAAA,MAC7D,IAAI3Z,EAAS0Z,EAAY,SAEzB,IAAK,IAAMxF,KAAOvS,EACd3B,GAAU,KAAKkU,EAAG,KAAKvS,EAAOuS,GAAI,QAMtC,OAHIyF,IACA3Z,GAAU,IAAM2Z,GAEb3Z,EAAS,SAGpB,YAAAuW,iBAAA,SAAiBpX,EAAYsa,GACzB,OAAUld,KAAK2F,UAAS,QAAQ/C,EAAE,IAAIsa,GAG1C,YAAAhD,mBAAA,SAAmBjY,EAAcW,GAAjC,WAMI,MAAO,IALMX,EAAK+N,QAAQ,SAAS,SAAA7J,GAC/B,IAAI+W,EAAMzN,SAAStJ,EAAEkX,UAAU,GAAI,IAAM,EACzC,MAAO,YAAY,EAAKrD,iBAAiBpX,EAAIsa,GAAI,QAG/B,KAG1B,YAAA7C,oBAAA,SAAoBxS,GAWhB,MAVc,CACV,KAAQ,OACR,OAAU,OACV,QAAW,UACX,YAAe,cACf,YAAe,cACf,WAAc,cACd,WAAc,eAGHA,IAAWA,GAG9B,YAAAwP,gBAAA,SAAgB1R,GACZ,OAAOA,MAAAA,OAAS,EAATA,EAAWqK,QAAQ,SAAU,KAAKA,QAAQ,QAAS,QAElE,EAjxBA,GAmxBA,SAASuG,EAAe+G,EAAwB1Z,GAC5C,IAAc,UAAAA,EAAA,eAAQ,CAAjB,IAAIsB,EAAC,KACNoY,EAAU7H,YAAYvQ,IAG9B,SAASqQ,EAAkBpR,GACvB,KAAOA,EAAKoZ,YACRpZ,EAAKqZ,YAAYrZ,EAAKoZ,YAI9B,SAAS1G,EAAmBuG,GACxB,IAAIK,EAAe1M,SAAS+G,cAAc,SAE1C,OADA2F,EAAalB,UAAYa,EAClBK,EAGX,SAASjI,EAAcrR,EAAmBuZ,GACtCvZ,EAAKsR,YAAY1E,SAAS4M,cAAcD,IAryB/B,EAAA7M,aAAAA,G,oFCfb,yBAA8B1M,EAAmB0O,EAAsB+K,QAAA,IAAAA,IAAAA,EAAuB,KAE1F,IAAI/E,EAAI1U,EAAK0Z,QAAQ,KAEjBC,EAAM3Z,EAAK4Z,wBACXC,EAAMnF,EAAEkF,wBAER3P,GAAQ0P,EAAI1P,KAAO4P,EAAI5P,MAAQwP,EAC/BK,EAAMpL,EAAKqL,MAAK,SAAAhF,GAAK,MAAW,SAAXA,EAAE3R,OAAoB2R,EAAExF,SAAStB,MAAQhE,KAElE,GAAU,MAAP6P,EAMH,OAHA9Z,EAAKoD,MAAM2U,QAAU,eACrB/X,EAAKoD,MAAMoE,MAAYsS,EAAIvK,SAAStB,MAAQhE,EAAK,KAEzC6P,EAAItK,QACR,IAAK,MACL,IAAK,YACDxP,EAAKoD,MAAM4W,aAAe,mBAC1B,MAEJ,IAAK,SACL,IAAK,QACL,IAAK,aACDha,EAAKoD,MAAM4W,aAAe,qB,2jBC1BtC,aAGA,SAEA,cAGI,WAAY3L,EAAqBzS,EAAc4Q,GAA/C,MACI,YAAM6B,EAAKzS,IAAK,K,OAChB,EAAK0S,gBAAkB9B,E,EAa/B,OAlBmC,OAc/B,YAAAtO,SAAA,SAASpD,GACLwY,OAAO2G,OAAOpe,MAAM,IAAAqe,oBAAmBpf,EAAMe,KAAK8B,SAASlC,YAC3DI,KAAKgW,cAAgBhW,KAAKyS,gBAAgBlM,mBAAmBtH,IAErE,EAlBA,CAAmC,EAAAsD,MAAtB,EAAA+b,cAAAA,G,wNCLb,aACA,SAwEA,SAAgBrL,EAAe9O,EAAeF,GAM1C,IALA,IAAIR,EAAoB,CACpBb,GAAIqB,EAAIpB,KAAKsB,EAAM,SACnBoa,UAAW,IAGD,MAAAta,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,gBACDX,EAAO+a,WAAava,EAAIpB,KAAKF,EAAG,OAChC,MACJ,IAAK,cACDc,EAAO8a,UAAUla,KAAKoa,EAA6B9b,EAAGsB,KAKlE,OAAOR,EAGX,SAAgBkD,EAAuBxC,EAAeF,GAMlD,IALA,IAAIR,EAA4B,CAC5Bb,GAAIqB,EAAIpB,KAAKsB,EAAM,iBACnBua,OAAQ,IAGE,MAAAza,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,OACDX,EAAOsB,KAAOd,EAAIpB,KAAKF,EAAG,OAC1B,MACJ,IAAK,iBACDc,EAAOkb,eAAiB1a,EAAIpB,KAAKF,EAAG,OACpC,MACJ,IAAK,eACDc,EAAOmb,mBAAqB3a,EAAIpB,KAAKF,EAAG,OACxC,MACJ,IAAK,YACDc,EAAOob,UAAY5a,EAAIpB,KAAKF,EAAG,OAC/B,MACJ,IAAK,MACDc,EAAOib,OAAOra,KAAKmD,EAAoB7E,EAAGsB,KAKtD,OAAOR,EAGX,SAAgB+D,EAAoBrD,EAAeF,GAK/C,IAJA,IAAIR,EAAyB,CACzBgE,MAAOxD,EAAIoD,QAAQlD,EAAM,SAGf,MAAAF,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,QACDX,EAAO4K,MAAQpK,EAAIpB,KAAKF,EAAG,OAC3B,MACJ,IAAK,aACDc,EAAOqb,QAAU7a,EAAIoD,QAAQ1E,EAAG,OAChC,MACJ,IAAK,SACDc,EAAOoE,OAAS5D,EAAIpB,KAAKF,EAAG,OAC5B,MACJ,IAAK,UACDc,EAAOxB,KAAOgC,EAAIpB,KAAKF,EAAG,OAC1B,MACJ,IAAK,QACDc,EAAOsb,cAAgB9a,EAAIpB,KAAKF,EAAG,OACnC,MACJ,IAAK,iBACDc,EAAOub,gBAAkB/a,EAAIpB,KAAKF,EAAG,OACrC,MACJ,IAAK,MACDc,EAAOsC,gBAAiB,IAAAC,0BAAyBrD,EAAGsB,GACpD,MACJ,IAAK,MACDR,EAAOwC,UAAW,IAAAyD,oBAAmB/G,EAAGsB,IAKpD,OAAOR,EAGX,SAAgBgb,EAA6Bta,EAAeF,GAKxD,IAJA,IAAIR,EAAiC,CACjCgE,MAAOxD,EAAIoD,QAAQlD,EAAM,SAGf,MAAAF,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,gBACDX,EAAO4K,MAAQpK,EAAIoD,QAAQ1E,EAAG,OAC9B,MACJ,IAAK,MACDc,EAAOwb,eAAiBzX,EAAoB7E,EAAGsB,IAK3D,OAAOR,EAGX,SAAgByb,EAA4B/a,EAAeF,GAEvD,IAAIiD,EAAOjD,EAAID,QAAQG,EAAM,QACzBgD,EAAQD,GAAQjD,EAAID,QAAQkD,EAAM,SAClCE,EAAYD,GAASlD,EAAID,QAAQmD,EAAO,aAE5C,OAAOC,EAAY,CACfxE,GAAIqB,EAAIpB,KAAKsB,EAAM,kBACnBgb,YAAalb,EAAIpB,KAAKuE,EAAW,MACjCG,MAAOtD,EAAIpB,KAAKsE,EAAO,UACvB,KA3IR,8BAAmChD,EAAeF,GAO9C,IANA,IAAIR,EAAkC,CAClC2b,WAAY,GACZC,mBAAoB,GACpBC,eAAgB,IAGN,MAAArb,EAAIxB,SAAS0B,GAAb,eAAoB,CAA7B,IAAIxB,EAAC,KACN,OAAQA,EAAEyB,WACN,IAAK,MACDX,EAAO2b,WAAW/a,KAAK4O,EAAetQ,EAAGsB,IACzC,MACJ,IAAK,cACDR,EAAO4b,mBAAmBhb,KAAKsC,EAAuBhE,EAAGsB,IACzD,MACJ,IAAK,eACDR,EAAO6b,eAAejb,KAAK6a,EAA4Bvc,EAAGsB,KAKtE,OAAOR,GAGX,mBAoBA,2BA6BA,wBAqCA,iCAmBA,iC,wHCnLA,aAEA,0BAA+B8b,EAAmB1d,QAAA,IAAAA,IAAAA,GAAA,GAC1CA,IACA0d,EAAYA,EAAUvP,QAAQ,aAAc,KAEhD,I,EAAMvM,GAAS,IAAI+b,WAAYC,gBAAgBF,EAAW,mBACpDG,EAS2C,QAA1C,EAT6Bjc,EASzBkc,qBAAqB,eAAe,UAAE,eAAE5W,YAPnD,GAAI2W,EACA,MAAM,IAAIE,MAAMF,GAEpB,OAAOjc,GAOX,8BAAmCU,GAC/B,OAAO,IAAI0b,eAAgBC,kBAAkB3b,IAGjD,+BAkEA,OAjEI,YAAA4b,MAAA,SAAMR,EAAmBlc,GAIrB,YAJqB,IAAAA,IAAAA,GAAA,GACjBA,IACAkc,EAAYA,EAAUvP,QAAQ,aAAc,MAEhC,IAAIwP,WAAYC,gBAAgBF,EAAW,mBAAmBhC,YAGlF,YAAA9a,SAAA,SAAS0B,EAAeC,QAAA,IAAAA,IAAAA,EAAA,MAGpB,IAFA,IAAMX,EAAS,GAENuL,EAAI,EAAG0K,EAAIvV,EAAK8K,WAAWC,OAAQF,EAAI0K,EAAG1K,IAAK,CACpD,IAAI9J,EAAIf,EAAK8K,WAAW+Q,KAAKhR,GAEX,GAAd9J,EAAEiK,UAA+B,MAAb/K,GAAsBc,EAAcd,WAAaA,GACrEX,EAAOY,KAAKa,GAGpB,OAAOzB,GAGX,YAAAO,QAAA,SAAQG,EAAeC,GACnB,IAAK,IAAI4K,EAAI,EAAG0K,EAAIvV,EAAK8K,WAAWC,OAAQF,EAAI0K,EAAG1K,IAAK,CACpD,IAAI9J,EAAIf,EAAK8K,WAAW+Q,KAAKhR,GAE7B,GAAkB,GAAd9J,EAAEiK,UAAkBjK,EAAcd,WAAaA,EAC/C,OAAOc,EAGf,OAAO,MAGX,YAAArC,KAAA,SAAKsB,EAAeC,GAChB,IAAK,IAAI4K,EAAI,EAAG0K,EAAIvV,EAAK8b,WAAW/Q,OAAQF,EAAI0K,EAAG1K,IAAK,CACpD,IAAIkB,EAAI/L,EAAK8b,WAAWD,KAAKhR,GAE7B,GAAIkB,EAAE9L,WAAaA,EACf,OAAO8L,EAAEkC,MAGjB,OAAO,MAGX,YAAA/K,QAAA,SAAQvC,EAAeuK,EAAkB6Q,QAAA,IAAAA,IAAAA,EAAA,MACrC,IAAIlS,EAAMhO,KAAK6C,KAAKiC,EAAMuK,GAC1B,OAAOrB,EAAMyB,SAASzB,GAAOkS,GAGjC,YAAAC,UAAA,SAAUrb,EAAeuK,EAAkB6Q,QAAA,IAAAA,IAAAA,EAAA,MACvC,IAAIlS,EAAMhO,KAAK6C,KAAKiC,EAAMuK,GAC1B,OAAOrB,EAAMoS,WAAWpS,GAAOkS,GAGnC,YAAAza,SAAA,SAASX,EAAeuK,EAAkB6Q,GAGtC,YAHsC,IAAAA,IAAAA,EAAA,MAC9BlgB,KAAK6C,KAAKiC,EAAMuK,IAGpB,IAAK,IAAK,OAAO,EACjB,IAAK,IAAK,OAAO,EACjB,QAAS,OAAO6Q,IAIxB,YAAA3N,WAAA,SAAWzN,EAAeuK,EAAkB8C,GACxC,YADwC,IAAAA,IAAAA,EAAyB,EAAAL,YAAYpC,MACtE,IAAA2Q,eAAcrgB,KAAK6C,KAAKiC,EAAMuK,GAAW8C,IAExD,EAlEA,GAAa,EAAAtS,UAAAA,EAoEb,IAAMygB,EAAkB,IAAIzgB,EAE5B,UAAeygB,G,wjBC5Ff,IAIA,cAKI,WAAY9N,EAAqBzS,EAAc4Q,GAA/C,MACI,YAAM6B,EAAKzS,IAAK,K,OAChB,EAAK0S,gBAAkB9B,E,EAM/B,OAbgC,OAU5B,YAAAtO,SAAA,SAASpD,GACLe,KAAKiF,OAASjF,KAAKyS,gBAAgBhO,gBAAgBxF,IAE3D,EAbA,CAJA,OAIgCsD,MAAnB,EAAAge,WAAAA,G,kPCCb,SAAgBxE,EAAYyE,EAAmB7a,GAC3C,OAAS6a,EAA4BA,EAAS,IAAI7a,EAA5BA,EAkB1B,SAAgB8a,EAAST,GACrB,OAAQA,GAAwB,iBAATA,IAAsBU,MAAMC,QAAQX,G,mIAxB/D,2BAAgChc,EAAyB2B,GACrD,OAAO3B,EAAQ2B,UAAYoW,EAAY/X,EAAQ2B,UAAWA,IAG9D,gBAIA,qBAA0B5F,GACtB,IAAI6gB,EAAK7gB,EAAK8gB,YAAY,KAAO,EAIjC,MAAO,CAHY,GAAND,EAAU,GAAK7gB,EAAKsd,UAAU,EAAGuD,GACzB,GAANA,EAAU7gB,EAAOA,EAAKsd,UAAUuD,KAKnD,iBAA+BE,EAAYC,GACvC,OAAOD,EAAME,QAAO,SAAC9Q,EAAGrJ,GAEpB,OADAqJ,EAAE6Q,EAAGla,IAAMA,EACJqJ,IACR,KAGP,aAIA,qBAAgB+Q,EAAUne,G,UAAQ,oDAC9B,IAAKoe,EAAQhS,OACT,OAAOpM,EAEX,IAAMqe,EAASD,EAAQE,QAEvB,GAAIX,EAAS3d,IAAW2d,EAASU,GAC7B,IAAK,IAAMxJ,KAAOwJ,EACd,GAAIV,EAASU,EAAOxJ,IAAO,CACvB,IAAM3J,EAAiB,QAAX,EAAAlL,EAAO6U,UAAI,QAAK7U,EAAO6U,GAAO,GAC1CsJ,EAAUjT,EAAKmT,EAAOxJ,SAEtB7U,EAAO6U,GAAOwJ,EAAOxJ,GAKjC,OAAOsJ,EAAS,gBAACne,GAAWoe,GAAO,M,mGC3CvC,aAEA,SACA,SACA,SACA,SACA,SACA,SACMG,EAAe,CACjB,CAAErgB,KAAM,EAAAwB,kBAAkB8e,eAAgBxe,OAAQ,qBAClD,CAAE9B,KAAM,EAAAwB,kBAAkB+e,mBAAoBze,OAAQ,oBACtD,CAAE9B,KAAM,EAAAwB,kBAAkBgf,eAAgB1e,OAAQ,sBAGtD,0BAKI,KAAA2e,MAAgB,GAChB,KAAAC,SAAiC,GAwGrC,OAjGW,EAAAlhB,KAAP,SAAYmhB,EAAMhR,EAAwBhR,GACtC,IAAI6J,EAAI,IAAI6H,EAIZ,OAFA7H,EAAEoY,QAAUjR,EAEL,EAAA7P,eAAeN,KAAKmhB,EAAMhiB,GAC5BiB,MAAK,SAAA4R,GAGF,OAFAhJ,EAAE1H,SAAW0Q,EAENhJ,EAAE1H,SAAST,uBACnBT,MAAK,SAAAoB,GACJwH,EAAExH,KAAOA,EAET,IAAM6f,EAAQR,EAAa3e,KAAI,SAAAof,G,MACrB7I,EAAuC,QAAnC,EAAAjX,EAAKkc,MAAK,SAAArX,GAAK,OAAAA,EAAE7F,OAAS8gB,EAAI9gB,eAAK,QAAI8gB,EACjD,OAAOtY,EAAEuY,qBAAqB9I,EAAEnW,OAAQmW,EAAEjY,SAG9C,OAAOG,QAAQY,IAAI8f,MACpBjhB,MAAK,WAAM,OAAA4I,MAGtB,YAAAzI,KAAA,SAAKC,GACD,YADC,IAAAA,IAAAA,EAAA,QACMhB,KAAK8B,SAASf,KAAKC,IAGtB,YAAA+gB,qBAAR,SAA6BhiB,EAAciB,GAA3C,WACI,GAAIhB,KAAK0hB,SAAS3hB,GACd,OAAOoB,QAAQC,QAAQpB,KAAK0hB,SAAS3hB,IAEzC,IAAKC,KAAK8B,SAAShC,IAAIC,GACnB,OAAOoB,QAAQC,QAAQ,MAE3B,IAAI4gB,EAAa,KAEjB,OAAOhhB,GACH,KAAK,EAAAwB,kBAAkB8e,eACnBthB,KAAKqW,aAAe2L,EAAO,IAAI,EAAArP,aAAa3S,KAAK8B,SAAU/B,EAAMC,KAAK4hB,SACtE,MAEJ,KAAK,EAAApf,kBAAkByf,UACnBjiB,KAAKiW,cAAgB+L,EAAO,IAAI,EAAAjN,cAAc/U,KAAK8B,SAAU/B,GAC7D,MAEJ,KAAK,EAAAyC,kBAAkB0f,UACnBliB,KAAK8V,cAAgBkM,EAAO,IAAI,EAAA1D,cAActe,KAAK8B,SAAU/B,EAAMC,KAAK4hB,SACxE,MAEJ,KAAK,EAAApf,kBAAkB2f,OACnBniB,KAAK2V,WAAaqM,EAAO,IAAI,EAAAzB,WAAWvgB,KAAK8B,SAAU/B,EAAMC,KAAK4hB,SAK1E,OAAY,MAARI,EACO7gB,QAAQC,QAAQ,OAE3BpB,KAAK0hB,SAAS3hB,GAAQiiB,EACtBhiB,KAAKyhB,MAAMpd,KAAK2d,GAETA,EAAKxhB,OAAOI,MAAK,WACpB,GAAiB,MAAbohB,EAAKhgB,MAAoC,GAApBggB,EAAKhgB,KAAKkN,OAC/B,OAAO8S,EAEN,IAAAI,GAAU,IAAA7gB,WAAUygB,EAAKjiB,MAAK,GAC/BiC,EAAOggB,EAAKhgB,KAAKU,KAAI,SAAAof,GACrB,OAAO,EAAKC,qBAAqB,GAAGK,EAASN,EAAIhf,OAAUgf,EAAI9gB,SAGnE,OAAOG,QAAQY,IAAIC,GAAMpB,MAAK,WAAM,OAAAohB,UAI5C,YAAA5F,kBAAA,SAAkBxZ,GACd,OAAO5C,KAAKqiB,aAAariB,KAAKqW,aAAczT,EAAI,QAC3ChC,MAAK,SAAAiG,GAAK,OAAAA,EAAIyb,IAAIC,gBAAgB1b,GAAK,SAGhD,YAAAuT,mBAAA,SAAmBxX,GACf,OAAO5C,KAAKqiB,aAAariB,KAAK8V,cAAelT,EAAI,QAC5ChC,MAAK,SAAAiG,GAAK,OAAAA,EAAIyb,IAAIC,gBAAgB1b,GAAK,SAGhD,YAAA6P,SAAA,SAAS9T,EAAY+U,GACjB,OAAO3X,KAAKqiB,aAAariB,KAAKiW,cAAerT,EAAI,cAC5ChC,MAAK,SAAAiG,GAAK,OAAAA,EAAIyb,IAAIC,gBAAgB,IAAIC,KAAK,CAACC,EAAY5b,EAAG8Q,MAAU9Q,MAG9E,YAAA6b,YAAA,SAAYV,EAAYpf,GACpB,IAAMkf,EAAME,EAAKhgB,KAAKkc,MAAK,SAAArX,GAAK,OAAAA,EAAEjE,IAAMA,KACxC,OAAOkf,GAAM,IAAAvgB,WAAUygB,EAAKjiB,MAAM,GAAK+hB,EAAIhf,OAAS,MAGhD,YAAAuf,aAAR,SAAqBL,EAAYpf,EAAY+f,GACzC,IAAM5iB,EAAOC,KAAK0iB,YAAYV,EAAMpf,GACpC,OAAO7C,EAAOC,KAAK8B,SAAStB,KAAKT,EAAM4iB,GAAcxhB,QAAQC,QAAQ,OAE7E,EA9GA,GAgHA,SAAgBqhB,EAAYlS,EAAkBqS,GAK1C,IAJA,IACMC,EAAUD,EAAQ5S,QAAQ,SAAU,IACpC8S,EAAU,IAAIpC,MAFR,IAIJ1R,EAAI,EAAGA,EAJH,GAIYA,IACpB8T,EALQ,GAKM9T,EAAI,GAAKS,SAASoT,EAAQ1iB,OAAW,EAAJ6O,EAAO,GAAI,IAE9D,IAASA,EAAI,EAAGA,EAAI,GAAIA,IACpBuB,EAAKvB,GAAKuB,EAAKvB,GAAK8T,EAAQ9T,EARpB,IAUZ,OAAOuB,EA3HE,EAAAc,aAAAA,EAgHb,iB,QCjIAjS,EAAOD,QAAUM,ICCbsjB,EAA2B,G,OAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa/jB,QAGrB,IAAIC,EAAS2jB,EAAyBE,GAAY,CAGjD9jB,QAAS,IAOV,OAHAikB,EAAoBH,GAAUI,KAAKjkB,EAAOD,QAASC,EAAQA,EAAOD,QAAS6jB,GAGpE5jB,EAAOD,QClBW6jB,CAAoB,M","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text); \r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n        })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlDoc: Element) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            cssStyle: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        trimXmlDeclaration: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser, { \r\n        trimXmlDeclaration: options.trimXmlDeclaration\r\n    }).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunProperties } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n\r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.htmlDocument.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nconst topLevelRels = [\r\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                const tasks = topLevelRels.map(rel => {\r\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n                    return d.loadRelationshipPart(r.target, r.type);\r\n                });\r\n\r\n                return Promise.all(tasks);\r\n            }).then(() => d);\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        return rel ? splitPath(part.path)[0] + rel.target : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","parseDocumentFile","result","DomType","Document","children","cssStyle","props","xbody","element","xml","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","instrText","d","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","checkMask","num","mask","data","bodyContainer","styleContainer","userOptions","parser","renderer","HtmlRenderer","window","document","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","WordDocument","doc","render","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","value","namespaceURI","fontSize","lengthAttr","pkg","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","fonts","parseFonts","FontTablePart","el","family","altName","fontKey","refId","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","p","pBreakIndex","rBreakIndex","findIndex","r","t","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","loadNumberingImage","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","borderBottom","assign","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","parse","item","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","classList","isObject","Array","isArray","si","lastIndexOf","array","by","reduce","mergeDeep","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","folder","loadResource","URL","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}