{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/document-parser.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/parser/common.ts","webpack://docx/./src/html-renderer.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomType","DomRelationshipType","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","breakPages","debug","className","inWrapper","Document","load","then","doc","render","PartType","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","Numbering","Promise","all","filter","x","loadDocumentImage","id","this","loadResource","loadNumberingImage","loadFont","relations","rel","length","resolve","target","async","part","f","xml","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","elements","map","stringAttr","type","values","valueOfRelType","result","domType","children","style","props","xbody","byTagName","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","parseCommonProperties","namespaceURI","namespaces","wordml","getAttributeColorValue","fontSize","getAttributeLengthValue","LengthUsage","FontSize","isDefault","boolAttr","linked","aliases","split","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","levelText","format","section","forEachElementNS","e","pageSize","width","height","orientation","getAttributeNS","pageMargins","left","right","top","bottom","header","footer","gutter","columns","parseColumns","numberOfColumns","getAttributeIntValue","space","separator","getAttributeBoolValue","equalWidth","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","utils","addElementClass","classNameOfCnfStyle","sectionProps","parseNumbering","parseFrame","parseTabs","numberingId","numberingLevel","Run","parent","Hyperlink","anchor","href","text","textContent","break","tab","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","start","end","before","after","line","lineRule","toFixed","tabs","position","leader","output","valueOfBorder","replace","DOMParser","parseFromString","firstChild","tagName","childNodes","nodeType","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","Settings","Theme","StylesWithEffects","Styles","FontTable","WebSettings","Unknown","trim","a","b","checkMask","num","mask","appendClass","classList","element","parseLength","usage","callback","defaultValue","htmlDocument","digitTest","test","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","sectionElements","renderSections","renderWrapper","appentElements","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","breakIndex","findIndex","newParagraph","slice","createStyleElement","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","display","textIndent","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","removeChild","styleElement","innerHTML","comment","createComment"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum DomType {\r\n    Document,\r\n    Paragraph,\r\n    Run,\r\n    Break,\r\n    Table,\r\n    Row,\r\n    Cell,\r\n    Hyperlink,\r\n    Drawing,\r\n    Image\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    domType: DomType;\r\n    children?: OpenXmlElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface DocxTab {\r\n    style: string;\r\n    leader: string;\r\n    position: string;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface IDomRun extends OpenXmlElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    text?: string;\r\n    href?: string;\r\n    tab?: boolean;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    aliases?: string[];\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n    linked?: string;\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return Document.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomNumbering } from './dom/dom';\r\nimport { Font } from './dom/common';\r\nimport { DocumentElement } from './dom/document';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: Font[] = null;\r\n    numbering: IDomNumbering[] = null;\r\n    document: DocumentElement = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadFont(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id)\r\n            .then(x => x ? (\"data:application/vnd.ms-package.obfuscated-opentype;charset=utf-8;base64,\" + x) : null);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string) {\r\n        let rel = relations.filter(x => x.id == id);\r\n\r\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(\"base64\");\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"text\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import {\r\n    IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { SectionProperties, DocumentElement } from './dom/document';\r\nimport { namespaces, Columns, CommonProperties } from './dom/common';\r\nimport { forEachElementNS, getAttributeLengthValue, getAttributeIntValue, getAttributeBoolValue, getAttributeColorValue, LengthUsage } from './parser/common';\r\nimport { ParagraphElement, ParagraphProperties } from './dom/paragraph';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString: string) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            domType: DomType.Document,\r\n            children: [],\r\n            style: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = this.parseSectionProperties(elem);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseCommonProperties(elem: Element, props: CommonProperties) {\r\n        if(elem.namespaceURI != namespaces.wordml)\r\n            return;\r\n\r\n        switch(elem.localName) {\r\n            case \"color\": \r\n                props.color = getAttributeColorValue(elem, elem.namespaceURI, \"val\");\r\n                break;\r\n\r\n            case \"sz\":\r\n                props.fontSize = getAttributeLengthValue(elem, elem.namespaceURI, \"val\", LengthUsage.FontSize);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseSectionProperties(elem: Element): SectionProperties {\r\n        var section = <SectionProperties>{};\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            switch(e.localName) {\r\n                case \"pgSz\":\r\n                    section.pageSize = {\r\n                        width: getAttributeLengthValue(e, namespaces.wordml, \"w\"),\r\n                        height: getAttributeLengthValue(e, namespaces.wordml, \"h\"),\r\n                        orientation: e.getAttributeNS(namespaces.wordml, \"orient\")\r\n                    }\r\n                    break;\r\n\r\n                case \"pgMar\":\r\n                    section.pageMargins = {\r\n                        left: getAttributeLengthValue(e, namespaces.wordml, \"left\"),\r\n                        right: getAttributeLengthValue(e, namespaces.wordml, \"right\"),\r\n                        top: getAttributeLengthValue(e, namespaces.wordml, \"top\"),\r\n                        bottom: getAttributeLengthValue(e, namespaces.wordml, \"bottom\"),\r\n                        header: getAttributeLengthValue(e, namespaces.wordml, \"header\"),\r\n                        footer: getAttributeLengthValue(e, namespaces.wordml, \"footer\"),\r\n                        gutter: getAttributeLengthValue(e, namespaces.wordml, \"gutter\"),\r\n                    };\r\n                    break;\r\n\r\n                case \"cols\":\r\n                    section.columns = this.parseColumns(e);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return section;\r\n    }\r\n\r\n    parseColumns(elem: Element): Columns {\r\n        var result = {\r\n            numberOfColumns: getAttributeIntValue(elem, namespaces.wordml, \"num\"),\r\n            space: getAttributeLengthValue(elem, namespaces.wordml, \"space\"),\r\n            separator: getAttributeBoolValue(elem, namespaces.wordml, \"sep\"),\r\n            equalWidth: getAttributeBoolValue(elem, namespaces.wordml, \"equalWidth\", true),\r\n            columns: []\r\n        };\r\n\r\n        forEachElementNS(elem, namespaces.wordml, e => {\r\n            if(e.localName != \"col\")\r\n                return;\r\n\r\n            result.columns.push({\r\n                width: getAttributeLengthValue(elem, namespaces.wordml, \"w\"),\r\n                space: getAttributeLengthValue(elem, namespaces.wordml, \"space\")\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ domType: DomType.Paragraph, children: [], props: {} };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    this.parseCommonProperties(c, result.props);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n                \r\n                case \"sectPr\":\r\n                    paragraph.props.sectionProps = this.parseSectionProperties(c);\r\n                    break;\r\n\r\n                case \"numPr\":\r\n                    this.parseNumbering(c, paragraph);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"tabs\":\r\n                    this.parseTabs(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseNumbering(node: Element, paragraph: ParagraphElement) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"numId\":\r\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"ilvl\":\r\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): OpenXmlElement {\r\n        var result: IDomRun = { domType: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): IDomRun {\r\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.tab = true;\r\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ domType: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.style['display'] = 'block';\r\n            result.style['position'] = 'relative';\r\n            result.style[\"width\"] = \"0px\";\r\n            result.style[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.style[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.style[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { domType: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\r\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\r\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\r\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\r\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\r\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseTabs(node: Element, paragraph: ParagraphElement) {\r\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\r\n            position: xml.sizeAttr(n, \"pos\"),\r\n            leader: xml.stringAttr(n, \"leader\"),\r\n            style: xml.stringAttr(n, \"val\"),\r\n        });\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}\r\n","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}","export const namespaces = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: \"px\" | \"pt\" | \"%\"\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}","import { Length } from \"../dom/common\";\r\n\r\nexport function forEachElementNS(elem: Element, namespaceURI: string, callback: (elem: Element) => any) {\r\n    for(let i = 0; i < elem.childNodes.length; i ++) {\r\n        let n = elem.childNodes[i];\r\n\r\n        if(n.nodeType == 1 && n.namespaceURI == namespaceURI)\r\n            callback(<Element>n);\r\n    }\r\n}\r\n\r\nexport function getAttributeIntValue(elem: Element, namespaceURI: string, name: string): number {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? parseInt(val) : null;\r\n}\r\n\r\nexport function getAttributeColorValue(elem: Element, namespaceURI: string, name: string): string {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n    return val ? `#${val}` : null;\r\n}\r\n\r\nexport function getAttributeBoolValue(elem: Element, namespaceURI: string, name: string, defaultValue: boolean = false): boolean {\r\n    var val = elem.getAttributeNS(namespaceURI, name);\r\n\r\n    if(val == null)\r\n        return defaultValue;\r\n\r\n    return val === \"true\" || val === \"1\";\r\n}\r\n\r\nexport function getAttributeLengthValue(elem: Element, namespaceURI: string, name: string, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    return parseLength(elem.getAttributeNS(namespaceURI, name), usage);\r\n}\r\n\r\nexport enum LengthUsage {\r\n    Dxa,\r\n    Emu,\r\n    FontSize,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nexport function parseLength(val: string | null, usage: LengthUsage = LengthUsage.Dxa): Length {\r\n    if (!val)\r\n        return null;\r\n\r\n    var num = parseInt(val);\r\n\r\n    switch (usage) {\r\n        case LengthUsage.Dxa: return { value: 0.05 * num, type: \"pt\" };\r\n        case LengthUsage.Emu: return { value: num / 12700, type: \"pt\" };\r\n        case LengthUsage.FontSize: return { value: 0.5 * num, type: \"pt\" };\r\n        case LengthUsage.Border: return { value: 0.125 * num, type: \"pt\" };\r\n        case LengthUsage.Percent: return { value: 0.02 * num, type: \"%\" };\r\n    }\r\n\r\n    return null;\r\n}","import { Document } from './document';\r\nimport { IDomStyle, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement, SectionProperties } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n    options: Options;\r\n\r\n    private digitTest = /^[0-9]/.test;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        appendComment(styleContainer, \"docx document styles\");\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        var sectionElements = this.renderSections(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n\r\n                if (e.domType == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            current.elements.push(elem);\r\n\r\n            if(elem.domType == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n                var sectProps = p.props.sectionProps;\r\n                var breakIndex = this.options.breakPages ? (p.children && p.children.findIndex(x => (<any>x).break == \"page\")) : -1;\r\n    \r\n                if(sectProps || breakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(breakIndex != -1 && breakIndex < p.children.length - 1) {\r\n                    var children = elem.children;\r\n                    var newParagraph = { ...elem, children: children.slice(breakIndex) };\r\n                    elem.children = children.slice(0, breakIndex);\r\n                    current.elements.push(newParagraph);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return !l ? null : `${l.value}${l.type}`;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): HTMLElement {\r\n        switch (elem.domType) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): HTMLElement[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        this.renderCommonProeprties(result, elem.props);\r\n\r\n        if (elem.numberingId && elem.numberingLevel != null) {\r\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderCommonProeprties(elem: HTMLElement, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            elem.style.color = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            elem.style.fontSize = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.text)\r\n            result.textContent = elem.text;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.id) {\r\n            result.id = elem.id;\r\n        }\r\n\r\n        if (elem.tab) {\r\n            //TODO\r\n            // result.style.display = \"inline-block\";\r\n\r\n            // var paragraph = <IDomParagraph>elem.parent;\r\n\r\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\r\n            //     paragraph = <IDomParagraph>paragraph.parent;\r\n\r\n            // if (paragraph && paragraph.tabs) {\r\n            //     var tab = paragraph.tabs[0];\r\n\r\n            //     result.style.width = tab.position;\r\n\r\n            //     switch (tab.leader) {\r\n            //         case \"dot\":\r\n            //         case \"middleDot\":\r\n            //             result.style.borderBottom = \"1px black dotted\";\r\n            //             break;\r\n\r\n            //         case \"hyphen\":\r\n            //         case \"heavy\":\r\n            //         case \"underscore\":\r\n            //             result.style.borderBottom = \"1px black solid\";\r\n            //             break;\r\n            //     }\r\n            // }\r\n        }\r\n        else if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.type = \"text/css\";\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}"],"sourceRoot":""}