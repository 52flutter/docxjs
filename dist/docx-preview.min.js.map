{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmark.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './document/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './document/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlHeader } from './header/header';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): WmlFooter {\r\n        var result = new WmlFooter();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): WmlHeader {\r\n        var result = new WmlHeader();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var background = globalXmlParser.element(xmlDoc, \"background\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xml.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    suff?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFooter } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: WmlFooter;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlHeader } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: WmlHeader;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { ParagraphElement } from './document/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './document/section';\r\nimport { RunElement, RunProperties } from './document/run';\r\nimport { BookmarkStartElement } from './document/bookmark';\r\nimport { IDomStyle } from './document/style';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n\r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.htmlDocument.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",            \r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"true\": return true;\r\n            case \"false\": return false;\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"file://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\n\r\nconst topLevelRels = [\r\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n    corePropsPart: CorePropsPart;\r\n    extendedPropsPart: ExtendedPropsPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                const tasks = topLevelRels.map(rel => {\r\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n                    return d.loadRelationshipPart(r.target, r.type);\r\n                });\r\n\r\n                return Promise.all(tasks);\r\n            }).then(() => d);\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Theme:\r\n                part = new ThemePart(this._package, path);\r\n                break;\r\n    \r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.CoreProperties:\r\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.ExtendedProperties:\r\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            const [folder] = splitPath(part.path); \r\n            const rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        const [folder] = splitPath(part.path); \r\n        return rel ? resolvePath(rel.target, folder) : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","f","fn","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseFooter","result","WmlFooter","children","parseBodyElements","parseHeader","WmlHeader","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","push","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyle","rStyle","suff","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","instrText","d","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","test","intVal","Border","Percent","replace","valueOfBold","size","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","el","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","namespaceURI","fontSize","lengthAttr","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","headerRefs","footerRefs","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","fonts","parseFonts","FontTablePart","family","altName","fontKey","refId","footerElement","FooterPart","Footer","headerElement","HeaderPart","Header","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appentElements","fontsPart","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderStyleValues","renderElements","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","numberings","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","styleToString","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderChildren","into","elems","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","t","borderBottom","assign","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","parse","skipDeclaration","item","elementAttr","attrLocalName","undefined","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","theme","parseTheme","ThemePart","parseColorScheme","colors","srgbClr","sysClr","parseFontScheme","majorFont","parseFontInfo","minorFont","latinTypeface","eaTypeface","csTypeface","DmlTheme","themeElements","colorScheme","fontScheme","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","mergeDeep","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}