{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/common/part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/common/package.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__11__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","load","pkg","loadRelationships","this","then","rels","Part","appendClass","classList","className","element","si","lastIndexOf","substring","array","by","reduce","a","x","parseParagraphProperty","elem","props","xml","namespaceURI","wordml","parseCommonProperty","localName","tabs","parseTabs","sectionProps","parseSectionProperties","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","attr","keepLines","boolAttr","keepNext","pageBreakBefore","outlineLevel","intAttr","styleName","runProps","parseRunProperties","elements","map","e","position","lengthAttr","leader","style","result","id","level","LengthUsage","Dxa","mul","unit","Emu","FontSize","Border","Point","Percent","LineHeight","val","usage","parseInt","type","color","fontSize","parseRunProperty","DomType","RelationshipTypes","xmlParser","target","targetMode","parse","xmlString","skipDeclaration","replace","DOMParser","parseFromString","firstChild","childNodes","length","item","nodeType","push","attributes","node","attrName","defaultValue","floatAttr","parseFloat","convertLength","XmlParser","globalXmlParser","parseColumns","numberOfColumns","space","separator","equalWidth","columns","width","SectionType","section","pageSize","height","orientation","pageMargins","left","right","top","bottom","header","footer","gutter","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","WordDocument","doc","render","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","Package","find","OfficeDocument","loadRelationshipPart","Promise","resolve","exists","part","documentPart","DocumentPart","FontTable","fontTablePart","FontTablePart","Numbering","numberingPart","NumberingPart","Styles","stylesPart","StylesPart","folder","splitPath","rel","all","loadDocumentImage","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","el","fonts","parseFonts","parseFont","family","altName","fontKey","refId","_zip","files","file","async","relsPath","parseRelationships","_documentParser","body","parseDocumentFile","assign","parseNumberingPart","domNumberings","parseNumberingFile","overrides","abstractId","parseNumberingLevelOverrride","parseAbstractNumbering","levels","multiLevelType","numberingStyleLink","styleLink","parseNumberingLevel","start","restart","format","text","justification","bulletPictureId","paragraphProps","parseParagraphProperties","numberingLevel","parseNumberingBulletPicture","pict","shape","imagedata","referenceId","numberings","abstractNumberings","bulletPictures","before","after","line","lineRule","parseStylesPart","domStyles","parseStylesFile","styles","defaults","parseDocumentDefaults","parseStyle","pPrElem","rPrElem","customStyle","default","basedOn","aliases","split","link","next","autoRedefine","hidden","semiHidden","locked","uiPriority","autos","shd","highlight","SizeType","xmlDoc","Document","children","cssStyle","xbody","foreach","parseParagraph","parseTable","xstyles","parseDefaultStyles","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","linked","parseTableStyle","console","warn","selector","xnums","mapping","bullets","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","src","bullet","filter","levelText","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","font","char","Tab","instrText","parseDrawing","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","end","toFixed","output","cb","nodeName","defValue","autoColor","v","convertSize","indexOf","intVal","trim","b","checkMask","num","mask","BookmarkStart","colFirst","colLast","BookmarkEnd","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","processStyles","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontsPart","f","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","pBreakIndex","rBreakIndex","findIndex","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","styleClassName","renderRunProperties","display","textIndent","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,UACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,SAAUJ,GACQ,iBAAZC,QACdA,QAAc,KAAID,EAAQG,QAAQ,UAElCJ,EAAW,KAAIC,EAAQD,EAAY,OARrC,CASGO,QAAQ,SAASC,GACpB,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUT,QAGnC,IAAIC,EAASM,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHX,QAAS,IAUV,OANAY,EAAQH,GAAUI,KAAKZ,EAAOD,QAASC,EAAQA,EAAOD,QAASQ,GAG/DP,EAAOU,GAAI,EAGJV,EAAOD,QA0Df,OArDAQ,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAAShB,EAASiB,EAAMC,GAC3CV,EAAoBW,EAAEnB,EAASiB,IAClCG,OAAOC,eAAerB,EAASiB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASxB,GACX,oBAAXyB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAerB,EAASyB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASlC,GAChC,IAAIiB,EAASjB,GAAUA,EAAO6B,WAC7B,WAAwB,OAAO7B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAO,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,8FC/ErD,iBAGI,WAAmBC,GAAA,KAAAA,OAQvB,OALI,YAAAC,KAAA,SAAKC,GAAL,WACI,OAAOA,EAAIC,kBAAkBC,KAAKJ,MAAMK,MAAK,SAAAC,GACzC,EAAKA,KAAOA,MAGxB,EAXA,GAAa,EAAAC,Q,6BCGb,SAAgBC,EAAYC,EAAmBC,GAC3C,OAASD,EAA4BA,EAAS,IAAIC,EAA5BA,E,4GAL1B,2BAAgCC,EAAyBD,GACrD,OAAOC,EAAQD,UAAYF,EAAYG,EAAQD,UAAWA,IAG9D,gBAIA,qBAA0BV,GACtB,IAAIY,EAAKZ,EAAKa,YAAY,KAAO,EAIjC,MAAO,CAHY,GAAND,EAAU,GAAKZ,EAAKc,UAAU,EAAGF,GACzB,GAANA,EAAUZ,EAAOA,EAAKc,UAAUF,KAKnD,iBAA+BG,EAAYC,GACvC,OAAOD,EAAME,QAAO,SAACC,EAAGC,GAEpB,OADAD,EAAEF,EAAGG,IAAMA,EACJD,IACR,M,sKCrBP,WAEA,OACA,QAEA,OA2CA,SAAgBE,EAAuBC,EAAeC,EAA4BC,GAC9E,GAAIF,EAAKG,cAAgB,EAAAnC,GAAGoC,OACxB,OAAO,EAEX,GAAG,EAAAC,oBAAoBL,EAAMC,EAAOC,GAChC,OAAO,EAEX,OAAQF,EAAKM,WACT,IAAK,OACDL,EAAMM,KAAOC,EAAUR,EAAME,GAC7B,MAEJ,IAAK,SACDD,EAAMQ,aAAe,EAAAC,uBAAuBV,EAAME,GAClD,MAEJ,IAAK,QACDD,EAAMU,UAAYC,EAAeZ,EAAME,GACvC,MAEJ,IAAK,UAED,OADAD,EAAMY,YAAc,EAAAC,iBAAiBd,EAAME,IACpC,EAGX,IAAK,gBAED,OADAD,EAAMc,cAAgBb,EAAIc,KAAKhB,EAAM,QAC9B,EAGX,IAAK,WACDC,EAAMgB,UAAYf,EAAIgB,SAASlB,EAAM,OAAO,GAC5C,MAEJ,IAAK,WACDC,EAAMkB,SAAWjB,EAAIgB,SAASlB,EAAM,OAAO,GAC3C,MAEJ,IAAK,kBACDC,EAAMmB,gBAAkBlB,EAAIgB,SAASlB,EAAM,OAAO,GAClD,MAEJ,IAAK,aACDC,EAAMoB,aAAenB,EAAIoB,QAAQtB,EAAM,OACvC,MAEJ,IAAK,SACDC,EAAMsB,UAAYrB,EAAIc,KAAKhB,EAAM,OACjC,MAEJ,IAAK,MACDC,EAAMuB,SAAW,EAAAC,mBAAmBzB,EAAME,GAC1C,MAEJ,QACI,OAAO,EAGf,OAAO,EAGX,SAAgBM,EAAUR,EAAeE,GACrC,OAAOA,EAAIwB,SAAS1B,EAAM,OACrB2B,KAAI,SAAAC,GAAK,OACNC,SAAU3B,EAAI4B,WAAWF,EAAG,OAC5BG,OAAQ7B,EAAIc,KAAKY,EAAG,UACpBI,MAAO9B,EAAIc,KAAKY,EAAG,WAI/B,SAAgBhB,EAAeZ,EAAeE,GAG1C,IAFA,IAAI+B,EAA6B,GAEnB,MAAA/B,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,QACD2B,EAAOC,GAAKhC,EAAIc,KAAKY,EAAG,OACxB,MAEJ,IAAK,OACDK,EAAOE,MAAQjC,EAAIoB,QAAQM,EAAG,QAK1C,OAAOK,EA/FX,oCAAyCjC,EAAeE,GAGpD,IAFA,IAAI+B,EAA8B,GAEpB,MAAA/B,EAAIwB,SAAS1B,GAAb,eAAoB,CAC9BD,EADM,KACqBkC,EAAQ/B,GAGvC,OAAO+B,GAGX,2BA6DA,cASA,oB,8ICrHa,EAAAjE,GAAK,CACdoC,OAAQ,gEAsBC,EAAAgC,YAA+C,CACxDC,IAAK,CAAEC,IAAK,IAAMC,KAAM,MACxBC,IAAK,CAAEF,IAAK,EAAI,MAAOC,KAAM,MAC7BE,SAAU,CAAEH,IAAK,GAAKC,KAAM,MAC5BG,OAAQ,CAAEJ,IAAK,KAAOC,KAAM,MAC5BI,MAAO,CAAEL,IAAK,EAAGC,KAAM,MACvBK,QAAS,CAAEN,IAAK,IAAMC,KAAM,KAC5BM,WAAY,CAAEP,IAAK,EAAI,IAAKC,KAAM,OAGtC,yBAA8BO,EAAaC,GACvC,YADuC,IAAAA,MAAyB,EAAAX,YAAYC,KACrES,EAAM,CAAElF,MAAOoF,SAASF,GAAOC,EAAMT,IAAKW,KAAMF,EAAMR,MAAS,MAG1E,+BAAoCvC,EAAeC,EAAyBC,GACxE,GAAGF,EAAKG,cAAgB,EAAAnC,GAAGoC,OACvB,OAAO,EAEX,OAAOJ,EAAKM,WACR,IAAK,QACDL,EAAMiD,MAAQhD,EAAIc,KAAKhB,EAAM,OAC7B,MAEJ,IAAK,KACDC,EAAMkD,SAAWjD,EAAI4B,WAAW9B,EAAM,MAAO,EAAAoC,YAAYK,UACzD,MAEJ,QACI,OAAO,EAGf,OAAO,I,6HCvDX,WA0BA,SAAgBW,EAAiBpD,EAAeC,EAAsBC,GAClE,QAAI,EAAAG,oBAAoBL,EAAMC,EAAOC,GAXzC,8BAAmCF,EAAeE,GAG9C,IAFA,IAAI+B,EAAwB,GAEd,MAAA/B,EAAIwB,SAAS1B,GAAb,eAAoB,CAC9BoD,EADM,KACenB,EAAQ/B,GAGjC,OAAO+B,GAGX,sB,+FC3BA,SAAYoB,GACR,sBACA,wBACA,YACA,gBACA,gBACA,YACA,cACA,wBACA,oBACA,gBACA,cACA,YACA,kBACA,gCACA,4BAfJ,CAAY,EAAAA,UAAA,EAAAA,QAAO,M,8HCSnB,SAAYC,GACR,sGACA,4FACA,oFACA,4FACA,sFACA,+FACA,oFACA,0FACA,gGACA,4FAVJ,CAAY,EAAAA,oBAAA,EAAAA,kBAAiB,KAa7B,8BAAmCvH,EAAewH,GAC9C,OAAOA,EAAU7B,SAAS3F,GAAM4F,KAAI,SAAAC,GAAK,OACrCM,GAAIqB,EAAUvC,KAAKY,EAAG,MACtBqB,KAAMM,EAAUvC,KAAKY,EAAG,QACxB4B,OAAQD,EAAUvC,KAAKY,EAAG,UAC1B6B,WAAYF,EAAUvC,KAAKY,EAAG,oB,iGC3BtC,WAEA,2BAkEA,OAjEI,YAAA8B,MAAA,SAAMC,EAAmBC,GAIrB,YAJqB,IAAAA,OAAA,GACjBA,IACAD,EAAYA,EAAUE,QAAQ,aAAc,MAEhC,IAAIC,WAAYC,gBAAgBJ,EAAW,mBAAmBK,YAGlF,YAAAtC,SAAA,SAAS1B,EAAeM,QAAA,IAAAA,MAAA,MAGpB,IAFA,IAAM2B,EAAS,GAENtF,EAAI,EAAGC,EAAIoD,EAAKiE,WAAWC,OAAQvH,EAAIC,EAAGD,IAAK,CACpD,IAAIK,EAAIgD,EAAKiE,WAAWE,KAAKxH,GAEX,GAAdK,EAAEoH,UAA+B,MAAb9D,GAAsBtD,EAAcsD,WAAaA,GACrE2B,EAAOoC,KAAKrH,GAGpB,OAAOiF,GAGX,YAAA3C,QAAA,SAAQU,EAAeM,GACnB,IAAK,IAAI3D,EAAI,EAAGC,EAAIoD,EAAKiE,WAAWC,OAAQvH,EAAIC,EAAGD,IAAK,CACpD,IAAIK,EAAIgD,EAAKiE,WAAWE,KAAKxH,GAE7B,GAAkB,GAAdK,EAAEoH,UAAkBpH,EAAcsD,WAAaA,EAC/C,OAAOtD,EAGf,OAAO,MAGX,YAAAgE,KAAA,SAAKhB,EAAeM,GAChB,IAAK,IAAI3D,EAAI,EAAGC,EAAIoD,EAAKsE,WAAWJ,OAAQvH,EAAIC,EAAGD,IAAK,CACpD,IAAIkD,EAAIG,EAAKsE,WAAWH,KAAKxH,GAE7B,GAAIkD,EAAES,WAAaA,EACf,OAAOT,EAAEjC,MAGjB,OAAO,MAGX,YAAA0D,QAAA,SAAQiD,EAAeC,EAAkBC,QAAA,IAAAA,MAAA,MACrC,IAAI3B,EAAM/D,KAAKiC,KAAKuD,EAAMC,GAC1B,OAAO1B,EAAME,SAASF,GAAO2B,GAGjC,YAAAC,UAAA,SAAUH,EAAeC,EAAkBC,QAAA,IAAAA,MAAA,MACvC,IAAI3B,EAAM/D,KAAKiC,KAAKuD,EAAMC,GAC1B,OAAO1B,EAAM6B,WAAW7B,GAAO2B,GAGnC,YAAAvD,SAAA,SAASqD,EAAeC,EAAkBC,GAGtC,YAHsC,IAAAA,MAAA,MAC9B1F,KAAKiC,KAAKuD,EAAMC,IAGpB,IAAK,IAAK,OAAO,EACjB,IAAK,IAAK,OAAO,EACjB,QAAS,OAAOC,IAIxB,YAAA3C,WAAA,SAAWyC,EAAeC,EAAkBzB,GACxC,YADwC,IAAAA,MAAyB,EAAAX,YAAYC,KACtE,EAAAuC,cAAc7F,KAAKiC,KAAKuD,EAAMC,GAAWzB,IAExD,EAlEA,GAAa,EAAA8B,YAoEb,IAAMC,EAAkB,IAAID,EAE5B,UAAeC,G,6BCaf,SAASC,EAAa/E,EAAeE,GACjC,MAAO,CACH8E,gBAAiB9E,EAAIoB,QAAQtB,EAAM,OACnCiF,MAAO/E,EAAI4B,WAAW9B,EAAM,SAC5BkF,UAAWhF,EAAIgB,SAASlB,EAAM,OAC9BmF,WAAYjF,EAAIgB,SAASlB,EAAM,cAAc,GAC7CoF,QAASlF,EAAIwB,SAAS1B,EAAM,OACvB2B,KAAI,SAAAC,GAAK,OACNyD,MAAOnF,EAAI4B,WAAWF,EAAG,KACzBqD,MAAO/E,EAAI4B,WAAWF,EAAG,c,+FA9DzC,SAAY0D,GACR,0BACA,sBACA,0BACA,sBACA,oBALJ,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,kCAAuCtF,EAAeE,GAGlD,IAFA,IAAIqF,EAA6B,GAEnB,MAAArF,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,OACDiF,EAAQC,SAAW,CACfH,MAAOnF,EAAI4B,WAAWF,EAAG,KACzB6D,OAAQvF,EAAI4B,WAAWF,EAAG,KAC1B8D,YAAaxF,EAAIc,KAAKY,EAAG,WAE7B,MAEJ,IAAK,OACD2D,EAAQtC,KAAO/C,EAAIc,KAAKY,EAAG,OAC3B,MAEJ,IAAK,QACD2D,EAAQI,YAAc,CAClBC,KAAM1F,EAAI4B,WAAWF,EAAG,QACxBiE,MAAO3F,EAAI4B,WAAWF,EAAG,SACzBkE,IAAK5F,EAAI4B,WAAWF,EAAG,OACvBmE,OAAQ7F,EAAI4B,WAAWF,EAAG,UAC1BoE,OAAQ9F,EAAI4B,WAAWF,EAAG,UAC1BqE,OAAQ/F,EAAI4B,WAAWF,EAAG,UAC1BsE,OAAQhG,EAAI4B,WAAWF,EAAG,WAE9B,MAEJ,IAAK,OACD2D,EAAQH,QAAUL,EAAanD,EAAG1B,IAK9C,OAAOqF,I,2UClFX,YACA,QACA,QAaA,uBAA4BY,EAAkBC,EAA4BC,EAAoCC,QAApC,IAAAD,MAAA,WAAoC,IAAAC,MAAA,MAC1G,IAAIC,EAAS,IAAI,EAAAC,eACbC,EAAW,IAAI,EAAAC,aAAapK,OAAOqK,UAEnCC,EAAU,EAAH,CACPC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbC,YAAY,EACZC,OAAO,EACPC,cAAc,EACd7H,UAAW,OACX8H,WAAW,GACPb,GASR,OANAC,EAAOO,YAAcF,EAAQE,YAC7BP,EAAOU,MAAQL,EAAQK,OAASV,EAAOU,MAEvCR,EAASpH,UAAYuH,EAAQvH,WAAa,OAC1CoH,EAASU,UAAYP,EAAQO,UAEtB,EAAAC,aAAaxI,KAAKuH,EAAMI,GAAQvH,MAAK,SAAAqI,GAExC,OADAZ,EAASa,OAAOD,EAAKjB,EAAeC,EAAgBO,GAC7CS,O,kHCvCf,YAGA,OAEA,QACA,QACA,QACA,OACA,QACA,QAEA,0BAKI,KAAAE,MAAgB,GAChB,KAAAC,SAAiC,GAoGrC,OA7FW,EAAA5I,KAAP,SAAY6I,EAAMlB,GACd,IAAItJ,EAAI,IAAImK,EAIZ,OAFAnK,EAAEyK,QAAUnB,EAELoB,EAAMC,UAAUH,GAClBzI,MAAK,SAAA6I,GAGF,OAFA5K,EAAE6K,SAAW,IAAI,EAAAC,QAAQF,GAElB5K,EAAE6K,SAAShJ,uBACnBE,MAAK,SAAAC,G,MACJhC,EAAEgC,KAAOA,EAEL,MAA6E,QAA7E,EAAmBA,EAAK+I,MAAK,SAAAlI,GAAK,OAAAA,EAAEmD,MAAQ,EAAAK,kBAAkB2E,yBAAe,QAAI,CACjFzE,OAAQ,oBACRP,KAAM,EAAAK,kBAAkB2E,gBAFtBzE,EAAM,SAAEP,EAAI,OAKlB,OAAOhG,EAAEiL,qBAAqB1E,EAAQP,GAAMjE,MAAK,WAAM,OAAA/B,SAI3D,YAAAiL,qBAAR,SAA6BvJ,EAAcsE,GAA3C,WACI,GAAIlE,KAAKyI,SAAS7I,GACd,OAAOwJ,QAAQC,QAAQrJ,KAAKyI,SAAS7I,IAEzC,IAAKI,KAAK+I,SAASO,OAAO1J,GACtB,OAAOwJ,QAAQC,QAAQ,MAE3B,IAAIE,EAAa,KAEjB,OAAOrF,GACH,KAAK,EAAAK,kBAAkB2E,eACnBlJ,KAAKwJ,aAAeD,EAAO,IAAI,EAAAE,aAAa7J,EAAMI,KAAK2I,SACvD,MAEJ,KAAK,EAAApE,kBAAkBmF,UACnB1J,KAAK2J,cAAgBJ,EAAO,IAAI,EAAAK,cAAchK,GAC9C,MAEJ,KAAK,EAAA2E,kBAAkBsF,UACnB7J,KAAK8J,cAAgBP,EAAO,IAAI,EAAAQ,cAAcnK,EAAMI,KAAK2I,SACzD,MAEJ,KAAK,EAAApE,kBAAkByF,OACnBhK,KAAKiK,WAAaV,EAAO,IAAI,EAAAW,WAAWtK,EAAMI,KAAK2I,SAI3D,OAAY,MAARY,EACOH,QAAQC,QAAQ,OAE3BrJ,KAAKyI,SAAS7I,GAAQ2J,EACtBvJ,KAAKwI,MAAMlD,KAAKiE,GAETA,EAAK1J,KAAKG,KAAK+I,UAAU9I,MAAK,WACjC,GAAiB,MAAbsJ,EAAKrJ,MAAoC,GAApBqJ,EAAKrJ,KAAKiF,OAC/B,OAAOoE,EAEN,IAAAY,EAAU,EAAAC,UAAUb,EAAK3J,MAAK,GAC/BM,EAAOqJ,EAAKrJ,KAAK0C,KAAI,SAAAyH,GACrB,OAAO,EAAKlB,qBAAqB,GAAGgB,EAASE,EAAI5F,OAAU4F,EAAInG,SAGnE,OAAOkF,QAAQkB,IAAIpK,GAAMD,MAAK,WAAM,OAAAsJ,UAI5C,YAAAgB,kBAAA,SAAkBpH,GACd,OAAOnD,KAAKwK,aAAaxK,KAAKwJ,aAAcrG,EAAI,QAC3ClD,MAAK,SAAAc,GAAK,OAAAA,EAAI0J,IAAIC,gBAAgB3J,GAAK,SAGhD,YAAA4J,mBAAA,SAAmBxH,GACf,OAAOnD,KAAKwK,aAAaxK,KAAK8J,cAAe3G,EAAI,QAC5ClD,MAAK,SAAAc,GAAK,OAAAA,EAAI0J,IAAIC,gBAAgB3J,GAAK,SAGhD,YAAA6J,SAAA,SAASzH,EAAYhE,GACjB,OAAOa,KAAKwK,aAAaxK,KAAK2J,cAAexG,EAAI,cAC5ClD,MAAK,SAAAc,GAAK,OAAAA,EAAI0J,IAAIC,gBAAgB,IAAIG,KAAK,CAACC,EAAY/J,EAAG5B,MAAU4B,MAGtE,YAAAyJ,aAAR,SAAqBjB,EAAYpG,EAAY4H,GACzC,IAAIV,EAAMd,EAAKrJ,KAAK+I,MAAK,SAAAlI,GAAK,OAAAA,EAAEoC,IAAMA,KAEtC,GAAW,MAAPkH,EACA,OAAOjB,QAAQC,QAAQ,MAEtB,IAAA2B,EAAU,EAAAZ,UAAUb,EAAK3J,MAAK,GAEnC,OAAOI,KAAK+I,SAASlJ,KAAKmL,EAASX,EAAI5F,OAAQsG,IAEvD,EA1GA,GA4GA,SAAgBD,EAAY1D,EAAkB6D,GAK1C,IAJA,IACMC,EAAUD,EAAQnG,QAAQ,SAAU,IACpCqG,EAAU,IAAIC,MAFR,IAIJxN,EAAI,EAAGA,EAJH,GAIYA,IACpBuN,EALQ,GAKMvN,EAAI,GAAKqG,SAASiH,EAAQG,OAAW,EAAJzN,EAAO,GAAI,IAE9D,IAASA,EAAI,EAAGA,EAAI,GAAIA,IACpBwJ,EAAKxJ,GAAKwJ,EAAKxJ,GAAKuN,EAAQvN,EARpB,IAUZ,OAAOwJ,EAvHE,EAAAiB,eA4Gb,iB,cCxHAlL,EAAOD,QAAUM,G,2cCCjB,WACA,QAEA,2B,+CAUA,OAVmC,OAG/B,YAAAqC,KAAA,SAAKC,GAAL,WACI,OAAO,YAAMD,KAAI,UAACC,GACbG,MAAK,WAAM,OAAAH,EAAID,KAAK,EAAKD,KAAM,UAC/BK,MAAK,SAAAqL,GACF,EAAKC,MAAQ,EAAAC,WAAWF,EAAIxL,EAAI0E,eAGhD,EAVA,CAAmC,EAAArE,MAAtB,EAAAyJ,iB,6BCUb,SAAgB6B,EAAUxK,EAAeuD,GAKrC,IAJA,IAAItB,EAA0B,CAC1B/E,KAAMqG,EAAUvC,KAAKhB,EAAM,SAGhB,MAAAuD,EAAU7B,SAAS1B,GAAnB,eAA0B,CAApC,IAAIqK,EAAE,KACP,OAAQA,EAAG/J,WACP,IAAK,SACD2B,EAAOwI,OAASlH,EAAUvC,KAAKqJ,EAAI,OACnC,MAEJ,IAAK,UACDpI,EAAOyI,QAAUnH,EAAUvC,KAAKqJ,EAAI,OACpC,MAEJ,IAAK,eACDpI,EAAO0I,QAAUpH,EAAUvC,KAAKqJ,EAAI,WACpCpI,EAAO2I,MAAQrH,EAAUvC,KAAKqJ,EAAI,OAK9C,OAAOpI,E,iFA1BX,sBAA2BlG,EAAewH,GACtC,OAAOA,EAAU7B,SAAS3F,GAAM4F,KAAI,SAAA0I,GAAM,OAAAG,EAAUH,EAAI9G,OAG5D,e,+FCbA,WACA,OACA,OAEA,aAGI,WAAoBsH,GAAA,KAAAA,OAFpB,KAAAtH,UAAuB,IAAI,EAAAsB,UAiC/B,OA5BI,YAAAwD,OAAA,SAAO1J,GACH,OAAgC,MAAzBI,KAAK8L,KAAKC,MAAMnM,IAG3B,YAAAC,KAAA,SAAKD,EAAcsE,GAAnB,WACQ8H,EAAOhM,KAAK8L,KAAKC,MAAMnM,GAE3B,OAAY,MAARoM,EACO5C,QAAQC,QAAQ,MAEf,OAARnF,EACO8H,EAAKC,MAAM,UAAUhM,MAAK,SAAAnB,GAAK,SAAK0F,UAAUG,MAAM7F,MAExDkN,EAAKC,MAAM/H,IAGtB,YAAAnE,kBAAA,SAAkBH,GAAlB,gBAAkB,IAAAA,MAAA,MACd,IAAIsM,EAAW,cAEf,GAAY,MAARtM,EAAc,CACV,MAAU,EAAAwK,UAAUxK,GACxBsM,EADM,KACS,SADL,KACgB,QAG9B,OAAOlM,KAAKH,KAAKqM,EAAU,OAAOjM,MAAK,SAAAkB,GACnC,OAAc,MAAPA,EAAc,KAAO,EAAAgL,mBAAmBhL,EAAK,EAAKqD,eAGrE,EAlCA,GAAa,EAAAwE,W,0cCJb,IAIA,cAGI,WAAYpJ,EAAc4H,GAA1B,MACI,YAAM5H,IAAK,K,OACX,EAAKwM,gBAAkB5E,E,EAY/B,OAjBkC,OAU9B,YAAA3H,KAAA,SAAKC,GAAL,WACI,OAAO,YAAMD,KAAI,UAACC,GACbG,MAAK,WAAM,OAAAH,EAAID,KAAK,EAAKD,KAAM,UAC/BK,MAAK,SAAAkB,GACF,EAAKkL,KAAO,EAAKD,gBAAgBE,kBAAkBnL,OAGnE,EAjBA,CAJA,KAIkChB,MAArB,EAAAsJ,gB,2cCJb,WAGA,QAEA,cAGI,WAAY7J,EAAc4H,GAA1B,MACI,YAAM5H,IAAK,K,OACX,EAAKwM,gBAAkB5E,E,EAiB/B,OAtBmC,OAc/B,YAAA3H,KAAA,SAAKC,GAAL,WACI,OAAO,YAAMD,KAAI,UAACC,GACbG,MAAK,WAAM,OAAAH,EAAID,KAAK,EAAKD,KAAM,UAC/BK,MAAK,SAAAkB,GACF7C,OAAOiO,OAAO,EAAM,EAAAC,mBAAmBrL,EAAKrB,EAAI0E,YAChD,EAAKiI,cAAgB,EAAKL,gBAAgBM,mBAAmBvL,OAG7E,EAtBA,CAAmC,EAAAhB,MAAtB,EAAA4J,iB,uOCLb,WACA,OAwEA,SAAgBlI,EAAeZ,EAAeE,GAM1C,IALA,IAAI+B,EAAoB,CACpBC,GAAIhC,EAAIc,KAAKhB,EAAM,SACnB0L,UAAW,IAGD,MAAAxL,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,gBACD2B,EAAO0J,WAAazL,EAAIc,KAAKY,EAAG,OAChC,MACJ,IAAK,cACDK,EAAOyJ,UAAUrH,KAAKuH,EAA6BhK,EAAG1B,KAKlE,OAAO+B,EAGX,SAAgB4J,EAAuB7L,EAAeE,GAMlD,IALA,IAAI+B,EAA4B,CAC5BC,GAAIhC,EAAIc,KAAKhB,EAAM,iBACnB8L,OAAQ,IAGE,MAAA5L,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,OACD2B,EAAO/E,KAAOgD,EAAIc,KAAKY,EAAG,OAC1B,MACJ,IAAK,iBACDK,EAAO8J,eAAiB7L,EAAIc,KAAKY,EAAG,OACpC,MACJ,IAAK,eACDK,EAAO+J,mBAAqB9L,EAAIc,KAAKY,EAAG,OACxC,MACJ,IAAK,YACDK,EAAOgK,UAAY/L,EAAIc,KAAKY,EAAG,OAC/B,MACJ,IAAK,MACDK,EAAO6J,OAAOzH,KAAK6H,EAAoBtK,EAAG1B,KAKtD,OAAO+B,EAGX,SAAgBiK,EAAoBlM,EAAeE,GAK/C,IAJA,IAAI+B,EAAyB,CACzBE,MAAOjC,EAAIoB,QAAQtB,EAAM,SAGf,MAAAE,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,QACD2B,EAAOkK,MAAQjM,EAAIc,KAAKY,EAAG,OAC3B,MACJ,IAAK,aACDK,EAAOmK,QAAUlM,EAAIoB,QAAQM,EAAG,OAChC,MACJ,IAAK,SACDK,EAAOoK,OAASnM,EAAIc,KAAKY,EAAG,OAC5B,MACJ,IAAK,UACDK,EAAOqK,KAAOpM,EAAIc,KAAKY,EAAG,OAC1B,MACJ,IAAK,QACDK,EAAOsK,cAAgBrM,EAAIc,KAAKY,EAAG,OACnC,MACJ,IAAK,iBACDK,EAAOuK,gBAAkBtM,EAAIc,KAAKY,EAAG,OACrC,MACJ,IAAK,MACDK,EAAOwK,eAAiB,EAAAC,yBAAyB9K,EAAG1B,GACpD,MACJ,IAAK,MACD+B,EAAOT,SAAW,EAAAC,mBAAmBG,EAAG1B,IAKpD,OAAO+B,EAGX,SAAgB2J,EAA6B5L,EAAeE,GAKxD,IAJA,IAAI+B,EAAiC,CACjCE,MAAOjC,EAAIoB,QAAQtB,EAAM,SAGf,MAAAE,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,gBACD2B,EAAOkK,MAAQjM,EAAIoB,QAAQM,EAAG,OAC9B,MACJ,IAAK,MACDK,EAAO0K,eAAiBT,EAAoBtK,EAAG1B,IAK3D,OAAO+B,EAGX,SAAgB2K,EAA4B5M,EAAeE,GAEvD,IAAI2M,EAAO3M,EAAIZ,QAAQU,EAAM,QACzB8M,EAAQD,GAAQ3M,EAAIZ,QAAQuN,EAAM,SAClCE,EAAYD,GAAS5M,EAAIZ,QAAQwN,EAAO,aAE5C,OAAOC,EAAY,CACf7K,GAAIhC,EAAIc,KAAKhB,EAAM,kBACnBgN,YAAa9M,EAAIc,KAAK+L,EAAW,MACjC/K,MAAO9B,EAAIc,KAAK8L,EAAO,UACvB,KA3IR,8BAAmC9M,EAAeE,GAO9C,IANA,IAAI+B,EAAkC,CAClCgL,WAAY,GACZC,mBAAoB,GACpBC,eAAgB,IAGN,MAAAjN,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,MACD2B,EAAOgL,WAAW5I,KAAKzD,EAAegB,EAAG1B,IACzC,MACJ,IAAK,cACD+B,EAAOiL,mBAAmB7I,KAAKwH,EAAuBjK,EAAG1B,IACzD,MACJ,IAAK,eACD+B,EAAOkL,eAAe9I,KAAKuI,EAA4BhL,EAAG1B,KAKtE,OAAO+B,GAGX,mBAoBA,2BA6BA,wBAqCA,iCAmBA,iC,wGCzKA,4BAAiCjC,EAAeE,GAC5C,MAAO,CACHkN,OAAQlN,EAAI4B,WAAW9B,EAAM,UAC7BqN,MAAOnN,EAAI4B,WAAW9B,EAAM,SAC5BsN,KAAMpN,EAAIoB,QAAQtB,EAAM,QACxBuN,SAAUrN,EAAIc,KAAKhB,EAAM,e,0dCdjC,WAIA,QACA,QAEA,cAOI,WAAYrB,EAAc4H,GAA1B,MACI,YAAM5H,IAAK,K,OACX,EAAKwM,gBAAkB5E,E,EAW/B,OApBgC,OAY5B,YAAA3H,KAAA,SAAKC,GAAL,WACI,OAAO,YAAMD,KAAI,UAACC,GACbG,MAAK,WAAM,OAAAH,EAAID,KAAK,EAAKD,KAAM,UAC/BK,MAAK,SAAAkB,GACF7C,OAAOiO,OAAO,EAAMkC,EAAgBtN,EAAKrB,EAAI0E,YAC7C,EAAKkK,UAAY,EAAKtC,gBAAgBuC,gBAAgBxN,OAGtE,EApBA,CAAgC,EAAAhB,MA2BhC,SAAgBsO,EAAgBxN,EAAeE,GAK3C,IAJA,IAAI+B,EAAS,CACT0L,OAAQ,IAGE,MAAAzN,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,cACD2B,EAAO2L,SAAW,EAAAC,sBAAsBjM,EAAG1B,GAC3C,MAEJ,IAAK,QACD+B,EAAO0L,OAAOtJ,KAAK,EAAAyJ,WAAWlM,EAAG1B,KAK7C,OAAO+B,EA5CE,EAAAgH,aA2Bb,qB,6GCnCA,WAYA,iCAAsCjJ,EAAeE,GAGjD,IAFA,IAAI+B,EAA2B,GAEjB,MAAA/B,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAOA,EAAEtB,WACL,IAAK,aACD,IAAIyN,EAAU7N,EAAIZ,QAAQsC,EAAG,OAEzBmM,IACA9L,EAAOwK,eAAiB,EAAAC,yBAAyBqB,EAAS7N,IAC9D,MAEJ,IAAK,aACD,IAAI8N,EAAU9N,EAAIZ,QAAQsC,EAAG,OAEzBoM,IACA/L,EAAOT,SAAW,EAAAkL,yBAAyBsB,EAAS9N,KAKpE,OAAO+B,I,kGCjCX,WACA,OA2BA,sBAA2BjC,EAAeE,GAQtC,IAPA,IAAI+B,EAAS,CACTC,GAAIhC,EAAIc,KAAKhB,EAAM,WACnBiD,KAAM/C,EAAIc,KAAKhB,EAAM,QACrBiO,YAAa/N,EAAIgB,SAASlB,EAAM,eAAe,GAC/CkO,QAAShO,EAAIgB,SAASlB,EAAM,WAAW,IAG7B,MAAAE,EAAIwB,SAAS1B,GAAb,eAAoB,CAA7B,IAAI4B,EAAC,KACN,OAAQA,EAAEtB,WACN,IAAK,MACD2B,EAAOwK,eAAiB,EAAAC,yBAAyB9K,EAAG1B,GACpD,MAEJ,IAAK,MACD+B,EAAOT,SAAW,EAAAC,mBAAmBG,EAAG1B,GACxC,MAEJ,IAAK,OAIL,IAAK,OACD+B,EAAO/E,KAAOgD,EAAIc,KAAKY,EAAG,OAC1B,MAEJ,IAAK,UACDK,EAAOkM,QAAUjO,EAAIc,KAAKY,EAAG,OAC7B,MAEJ,IAAK,UACDK,EAAOmM,QAAUlO,EAAIc,KAAKY,EAAG,OAAOyM,MAAM,KAC1C,MAEJ,IAAK,OACDpM,EAAOqM,KAAOpO,EAAIc,KAAKY,EAAG,OAC1B,MAEJ,IAAK,OACDK,EAAOsM,KAAOrO,EAAIc,KAAKY,EAAG,OAC1B,MAEJ,IAAK,eACDK,EAAOuM,cAAe,EACtB,MAEJ,IAAK,SACDvM,EAAOwM,QAAS,EAChB,MAEJ,IAAK,aACDxM,EAAOyM,YAAa,EACpB,MAEJ,IAAK,SACDzM,EAAO0M,QAAS,EAChB,MAEJ,IAAK,aACD1M,EAAO2M,WAAa1O,EAAIoB,QAAQM,EAAG,QAK/C,OAAOK,I,8GC5FX,WAKA,OAEA,OACA,OACA,OAEA,QAGW,EAAA4M,MAAQ,CACfC,IAAK,QACL5L,MAAO,QACP6L,UAAW,eAGf,IA6iCKC,EA7iCL,0BAEI,KAAApL,iBAA2B,EAG3B,KAAAkD,aAAuB,EACvB,KAAAG,OAAiB,EAqiCrB,OAniCI,YAAAoE,kBAAA,SAAkB4D,GAAlB,WACQhN,EAA0B,CAC1BgB,KAAM,EAAAI,QAAQ6L,SACdC,SAAU,GACVC,SAAU,GACVnP,MAAO,MAGPoP,EAAQ,UAAgB/P,QAAQ2P,EAAQ,QAkB5C,OAhBA/O,EAAIoP,QAAQD,GAAO,SAAArP,GACf,OAAQA,EAAKM,WACT,IAAK,IACD2B,EAAOkN,SAAS9K,KAAK,EAAKkL,eAAevP,IACzC,MAEJ,IAAK,MACDiC,EAAOkN,SAAS9K,KAAK,EAAKmL,WAAWxP,IACrC,MAEJ,IAAK,SACDiC,EAAOhC,MAAQ,EAAAS,uBAAuBV,EAAM,eAKjDiC,GAGX,YAAAyL,gBAAA,SAAgB+B,GAAhB,WACQxN,EAAS,GAcb,OAZA/B,EAAIoP,QAAQG,GAAS,SAAArR,GACjB,OAAQA,EAAEkC,WACN,IAAK,QACD2B,EAAOoC,KAAK,EAAKyJ,WAAW1P,IAC5B,MAEJ,IAAK,cACD6D,EAAOoC,KAAK,EAAKqL,mBAAmBtR,QAKzC6D,GAGX,YAAAyN,mBAAA,SAAmBnL,GAAnB,WACQtC,EAAoB,CACpBC,GAAI,KACJhF,KAAM,KACNsG,OAAQ,KACR2K,QAAS,KACTR,OAAQ,IA2BZ,OAxBAzN,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,aACD,IAAIqP,EAAM,UAAgBrQ,QAAQtC,EAAG,OAEjC2S,GACA1N,EAAO0L,OAAOtJ,KAAK,CACfb,OAAQ,OACRoM,OAAQ,EAAKC,uBAAuBF,EAAK,MAEjD,MAEJ,IAAK,aACD,IAAIG,EAAM,UAAgBxQ,QAAQtC,EAAG,OAEjC8S,GACA7N,EAAO0L,OAAOtJ,KAAK,CACfb,OAAQ,IACRoM,OAAQ,EAAKC,uBAAuBC,EAAK,UAMtD7N,GAGX,YAAA6L,WAAA,SAAWvJ,GAAX,WACQtC,EAAoB,CACpBC,GAAIhC,EAAI6P,WAAWxL,EAAM,WACzByL,UAAW9P,EAAIgB,SAASqD,EAAM,WAC9BrH,KAAM,KACNsG,OAAQ,KACR2K,QAAS,KACTR,OAAQ,GACRsC,OAAQ,MAGZ,OAAQ/P,EAAI6P,WAAWxL,EAAM,SACzB,IAAK,YAAatC,EAAOuB,OAAS,IAAK,MACvC,IAAK,QAASvB,EAAOuB,OAAS,QAAS,MACvC,IAAK,YAAavB,EAAOuB,OAAS,OAqEtC,OAlEAtD,EAAIoP,QAAQ/K,GAAM,SAAAnG,GACd,OAAQA,EAAEkC,WACN,IAAK,UACD2B,EAAOkM,QAAUjO,EAAIb,UAAUjB,EAAG,OAClC,MAEJ,IAAK,OACD6D,EAAO/E,KAAOgD,EAAI6P,WAAW3R,EAAG,OAChC,MAEJ,IAAK,OACD6D,EAAOgO,OAAS/P,EAAIb,UAAUjB,EAAG,OACjC,MAEJ,IAAK,OACD6D,EAAOsM,KAAOrO,EAAIb,UAAUjB,EAAG,OAC/B,MAEJ,IAAK,UACD6D,EAAOmM,QAAUlO,EAAI6P,WAAW3R,EAAG,OAAOiQ,MAAM,KAChD,MAEJ,IAAK,MACDpM,EAAO0L,OAAOtJ,KAAK,CACfb,OAAQ,IACRoM,OAAQ,EAAKC,uBAAuBzR,EAAG,MAE3C6D,EAAOwK,eAAiB,EAAAC,yBAAyBtO,EAAG,WACpD,MAEJ,IAAK,MACD6D,EAAO0L,OAAOtJ,KAAK,CACfb,OAAQ,OACRoM,OAAQ,EAAKC,uBAAuBzR,EAAG,MAE3C6D,EAAOT,SAAW,EAAAkL,yBAAyBtO,EAAG,WAC9C,MAEJ,IAAK,QACL,IAAK,OACD6D,EAAO0L,OAAOtJ,KAAK,CACfb,OAAQ,KACRoM,OAAQ,EAAKC,uBAAuBzR,EAAG,MAE3C,MAEJ,IAAK,aACD,IAAc,YAAK8R,gBAAgB9R,GAArB,eAAuB,CAAhC,IAAIM,EAAC,KACNuD,EAAO0L,OAAOtJ,KAAK3F,GACvB,MAEJ,IAAK,OACL,IAAK,UACL,IAAK,SACL,IAAK,aACL,IAAK,iBACL,IAAK,eACL,IAAK,aAED,MAEJ,QACI,EAAKuI,OAASkJ,QAAQC,KAAK,gCAAgChS,EAAEkC,eAIlE2B,GAGX,YAAAiO,gBAAA,SAAgB3L,GAAhB,WACQtC,EAAS,GAETgB,EAAO/C,EAAI6P,WAAWxL,EAAM,QAC5B8L,EAAW,GAEf,OAAQpN,GACJ,IAAK,WAAYoN,EAAW,kBAAmB,MAC/C,IAAK,UAAWA,EAAW,iBAAkB,MAC7C,IAAK,WAAYA,EAAW,eAAgB,MAC5C,IAAK,UAAWA,EAAW,cAAe,MAC1C,IAAK,YAAaA,EAAW,aAAc,MAC3C,IAAK,YAAaA,EAAW,cAAe,MAC5C,IAAK,YAAaA,EAAW,aAAc,MAC3C,IAAK,YAAaA,EAAW,cAAe,MAC5C,QAAS,MAAO,GA6BpB,OA1BAnQ,EAAIoP,QAAQ/K,GAAM,SAAAnG,GACd,OAAQA,EAAEkC,WACN,IAAK,MACD2B,EAAOoC,KAAK,CACRb,OAAQ6M,EAAW,KACnBT,OAAQ,EAAKC,uBAAuBzR,EAAG,MAE3C,MAEJ,IAAK,MACD6D,EAAOoC,KAAK,CACRb,OAAQ6M,EAAW,QACnBT,OAAQ,EAAKC,uBAAuBzR,EAAG,MAE3C,MAEJ,IAAK,QACL,IAAK,OACD6D,EAAOoC,KAAK,CACRb,OAAQ6M,EACRT,OAAQ,EAAKC,uBAAuBzR,EAAG,UAMhD6D,GAGX,YAAAwJ,mBAAA,SAAmB6E,GAAnB,WACQrO,EAAS,GACTsO,EAAU,GACVC,EAAU,GAuBd,OArBAtQ,EAAIoP,QAAQgB,GAAO,SAAAlS,GACf,OAAQA,EAAEkC,WACN,IAAK,cACD,EAAKuL,uBAAuBzN,EAAGoS,GAC1BC,SAAQ,SAAA3Q,GAAK,OAAAmC,EAAOoC,KAAKvE,MAC9B,MAEJ,IAAK,eACD0Q,EAAQnM,KAAK,EAAKqM,wBAAwBtS,IAC1C,MAEJ,IAAK,MACD,IAAIuS,EAAQzQ,EAAI6P,WAAW3R,EAAG,SAC1BwS,EAAgB1Q,EAAI2Q,kBAAkBzS,EAAG,gBAAiB,OAC9DmS,EAAQK,GAAiBD,MAKrC1O,EAAOwO,SAAQ,SAAA3Q,GAAK,OAAAA,EAAEoC,GAAKqO,EAAQzQ,EAAEoC,OAE9BD,GAGX,YAAAyO,wBAAA,SAAwB1Q,GACpB,IAAI6M,EAAO,UAAgBvN,QAAQU,EAAM,QACrC8M,EAAQD,GAAQ,UAAgBvN,QAAQuN,EAAM,SAC9CE,EAAYD,GAAS,UAAgBxN,QAAQwN,EAAO,aAExD,OAAOC,EAAY,CACf7K,GAAIhC,EAAIoB,QAAQtB,EAAM,kBACtB8Q,IAAK5Q,EAAI6P,WAAWhD,EAAW,MAC/B/K,MAAO9B,EAAI6P,WAAWjD,EAAO,UAC7B,MAGR,YAAAjB,uBAAA,SAAuBtH,EAAeiM,GAAtC,WACQvO,EAAS,GACTC,EAAKhC,EAAI6P,WAAWxL,EAAM,iBAU9B,OARArE,EAAIoP,QAAQ/K,GAAM,SAAAnG,GACd,OAAQA,EAAEkC,WACN,IAAK,MACD2B,EAAOoC,KAAK,EAAK6H,oBAAoBhK,EAAI9D,EAAGoS,QAKjDvO,GAGX,YAAAiK,oBAAA,SAAoBhK,EAAYqC,EAAeiM,GAA/C,WACQvO,EAAwB,CACxBC,GAAIA,EACJC,MAAOjC,EAAIoB,QAAQiD,EAAM,QACzBvC,MAAO,IAwBX,OArBA9B,EAAIoP,QAAQ/K,GAAM,SAAAnG,GACd,OAAQA,EAAEkC,WACN,IAAK,MACD,EAAKuP,uBAAuBzR,EAAG6D,EAAOD,OACtC,MAEJ,IAAK,iBACD,IAAIE,EAAKhC,EAAIoB,QAAQlD,EAAG,OACxB6D,EAAO8O,OAASP,EAAQQ,QAAO,SAAAlR,GAAK,OAAAA,EAAEoC,IAAMA,KAAI,GAChD,MAEJ,IAAK,UACDD,EAAOgP,UAAY/Q,EAAI6P,WAAW3R,EAAG,OACrC,MAEJ,IAAK,SACD6D,EAAOoK,OAASnM,EAAI6P,WAAW3R,EAAG,WAKvC6D,GAIX,YAAAsN,eAAA,SAAehL,GAAf,WACQtC,EAA2B,CAAEgB,KAAM,EAAAI,QAAQ6N,UAAW/B,SAAU,IA0BpE,OAxBAjP,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,IACD2B,EAAOkN,SAAS9K,KAAK,EAAK8M,SAASnU,EAAGiF,IACtC,MAEJ,IAAK,YACDA,EAAOkN,SAAS9K,KAAK,EAAK+M,eAAepU,EAAGiF,IAC5C,MAEJ,IAAK,gBACDA,EAAOkN,SAAS9K,KAAK,EAAAgN,mBAAmBrU,EAAG,YAC3C,MAEA,IAAK,cACLiF,EAAOkN,SAAS9K,KAAK,EAAAiN,iBAAiBtU,EAAG,YACzC,MAEJ,IAAK,MACD,EAAK0P,yBAAyB1P,EAAGiF,OAKtCA,GAGX,YAAAyK,yBAAA,SAAyB1M,EAAeuR,GAAxC,WACIxS,KAAK8Q,uBAAuB7P,EAAMuR,EAAUnC,SAAW,GAAI,MAAM,SAAApS,GAC7D,GAAG,EAAA+C,uBAAuB/C,EAAGuU,EAAW,WACpC,OAAO,EAEX,OAAQvU,EAAEsD,WACN,IAAK,SACDkR,EAAMC,gBAAgBF,EAAWrR,EAAIb,UAAUrC,EAAG,QAClD,MAEJ,IAAK,WACDwU,EAAMC,gBAAgBF,EAAW3B,EAAO8B,oBAAoB1U,IAC5D,MAEJ,IAAK,UACD,EAAK2U,WAAW3U,EAAGuU,GACnB,MAEJ,IAAK,MAED,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAI,WAAA,SAAWpN,EAAegN,GAGP,QAFDrR,EAAI6P,WAAWxL,EAAM,aAG/BgN,EAAUnC,SAAgB,MAAI,SAGtC,YAAAgC,eAAA,SAAe7M,EAAeqN,GAA9B,WACQ3P,EAAuC,CAAEgB,KAAM,EAAAI,QAAQwO,UAAWD,OAAQA,EAAQzC,SAAU,IAC5F2C,EAAS5R,EAAI6P,WAAWxL,EAAM,UAalC,OAXIuN,IACA7P,EAAO8P,KAAO,IAAMD,GAExB5R,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,IACD2B,EAAOkN,SAAS9K,KAAK,EAAK8M,SAASnU,EAAGiF,QAK3CA,GAGX,YAAAkP,SAAA,SAAS5M,EAAeqN,GAAxB,WACQ3P,EAAiC,CAAEgB,KAAM,EAAAI,QAAQ2O,IAAKJ,OAAQA,EAAQzC,SAAU,IA0DpF,OAxDAjP,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,IACD2B,EAAOkN,SAAS9K,KAAkB,CAC9BpB,KAAM,EAAAI,QAAQ4O,KACd3F,KAAMtP,EAAEkV,cAEZ,MAEJ,IAAK,UACDjQ,EAAOkQ,YAAcjS,EAAI6P,WAAW/S,EAAG,eACvC,MAEJ,IAAK,KACDiF,EAAOkN,SAAS9K,KAAmB,CAC/BpB,KAAM,EAAAI,QAAQ+O,MACdC,MAAOnS,EAAI6P,WAAW/S,EAAG,SAAW,iBAExC,MAEJ,IAAK,wBACDiF,EAAOkN,SAAS9K,KAAmB,CAC/BpB,KAAM,EAAAI,QAAQ+O,MACdC,MAAO,SAEX,MAEJ,IAAK,MACDpQ,EAAOkN,SAAS9K,KAAoB,CAChCpB,KAAM,EAAAI,QAAQ3F,OACd4U,KAAMpS,EAAI6P,WAAW/S,EAAG,QACxBuV,KAAMrS,EAAI6P,WAAW/S,EAAG,UAE5B,MAEJ,IAAK,MACDiF,EAAOkN,SAAS9K,KAAK,CAAEpB,KAAM,EAAAI,QAAQmP,MACrC,MAEJ,IAAK,YACDvQ,EAAOwQ,UAAYzV,EAAEkV,YACrB,MAEJ,IAAK,UACD,IAAIjV,EAAI,EAAKyV,aAAa1V,GAEtBC,IACAgF,EAAOkN,SAAW,CAAClS,IACvB,MAEJ,IAAK,MACD,EAAKwE,mBAAmBzE,EAAGiF,OAKhCA,GAGX,YAAAR,mBAAA,SAAmBzB,EAAe2S,GAC9B5T,KAAK8Q,uBAAuB7P,EAAM2S,EAAIvD,SAAW,GAAI,MAAM,SAAApS,GACvD,OAAQA,EAAEsD,WACN,IAAK,SACDqS,EAAItT,UAAYa,EAAIb,UAAUrC,EAAG,OACjC,MAEJ,IAAK,YACD,OAAQkD,EAAI6P,WAAW/S,EAAG,QACtB,IAAK,YAAa2V,EAAIC,QAAU,MAAO,MACvC,IAAK,cAAeD,EAAIC,QAAU,MAEtC,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAF,aAAA,SAAanO,GACT,IAAc,oBAAgB7C,SAAS6C,GAAzB,eAAgC,CAAzC,IAAInG,EAAC,KACN,OAAQA,EAAEkC,WACN,IAAK,SACL,IAAK,SACD,OAAOvB,KAAK8T,oBAAoBzU,MAKhD,YAAAyU,oBAAA,SAAoBtO,GAgBhB,IAfA,IAAItC,EAAyB,CAAEgB,KAAM,EAAAI,QAAQyP,QAAS3D,SAAU,GAAIC,SAAU,IAC1E2D,EAA6B,UAAlBxO,EAAKjE,UAQhB0S,EAAmD,KACnDC,EAAY/S,EAAIgB,SAASqD,EAAM,aAE/B2O,EAAO,CAAEC,SAAU,OAAQC,MAAO,OAAQC,OAAQ,KAClDC,EAAO,CAAEH,SAAU,OAAQC,MAAO,MAAOC,OAAQ,KAEvC,gBAAgB3R,SAAS6C,GAAzB,eAAgC,CAAzC,IAAInG,EAAC,KACN,OAAQA,EAAEkC,WACN,IAAK,YACG2S,IACAC,EAAKG,OAASnT,EAAIqT,SAASnV,EAAG,IAAK4Q,EAASxM,KAC5C8Q,EAAKD,OAASnT,EAAIqT,SAASnV,EAAG,IAAK4Q,EAASxM,MAEhD,MAEJ,IAAK,SACDP,EAAOmN,SAAgB,MAAIlP,EAAIqT,SAASnV,EAAG,KAAM4Q,EAASxM,KAC1DP,EAAOmN,SAAiB,OAAIlP,EAAIqT,SAASnV,EAAG,KAAM4Q,EAASxM,KAC3D,MAEJ,IAAK,YACL,IAAK,YACD,IAAKyQ,EAAW,CACZ,IAAIO,EAAqB,aAAfpV,EAAEkC,UAA2B4S,EAAOI,EAC1CG,EAAY,UAAgBnU,QAAQlB,EAAG,SACvCsV,EAAa,UAAgBpU,QAAQlB,EAAG,aAExCqV,IACAD,EAAIJ,MAAQK,EAAUvB,aAEtBwB,IACAF,EAAIH,OAASnT,EAAIyT,UAAUD,EAAY1E,EAASxM,MAExD,MAEJ,IAAK,mBACDwQ,EAAW,mBACX,MAEJ,IAAK,WACDA,EAAW,WACX,MAEJ,IAAK,UACD,IAAIY,EAAI7U,KAAK8U,aAAazV,GAEtBwV,GACA3R,EAAOkN,SAAS9K,KAAKuP,IA4BrC,MAvBgB,oBAAZZ,GACA/Q,EAAOmN,SAAkB,QAAI,QAEzB8D,EAAKE,QACLnR,EAAOmN,SAAS,cAAgB8D,EAAKE,MACrCnR,EAAOmN,SAAgB,MAAI,SAGf,YAAZ4D,GACJ/Q,EAAOmN,SAAkB,QAAI,QAC7BnN,EAAOmN,SAAmB,SAAI,WAC9BnN,EAAOmN,SAAgB,MAAI,MAC3BnN,EAAOmN,SAAiB,OAAI,MAEzB8D,EAAKG,SACJpR,EAAOmN,SAAe,KAAI8D,EAAKG,QAChCC,EAAKD,SACJpR,EAAOmN,SAAc,IAAIkE,EAAKD,UAE7BN,GAA2B,QAAdG,EAAKE,OAAiC,SAAdF,EAAKE,QAC/CnR,EAAOmN,SAAgB,MAAI8D,EAAKE,OAG7BnR,GAGX,YAAA4R,aAAA,SAAa7T,GAGT,IAFA,IAAI8T,EAAc,UAAgBxU,QAAQU,EAAM,eAElC,gBAAgB0B,SAASoS,GAAzB,eAAuC,CAAhD,IAAI1V,EAAC,KACN,OAAQA,EAAEkC,WACN,IAAK,MACD,OAAOvB,KAAKgV,aAAa3V,IAIrC,OAAO,MAGX,YAAA2V,aAAA,SAAa/T,GACT,IAAIiC,EAAoB,CAAEgB,KAAM,EAAAI,QAAQ2Q,MAAOlD,IAAK,GAAI1B,SAAU,IAC9D6E,EAAW,UAAgB3U,QAAQU,EAAM,YACzCkU,EAAO,UAAgB5U,QAAQ2U,EAAU,QAE7ChS,EAAO6O,IAAM5Q,EAAI6P,WAAWmE,EAAM,SAElC,IAAIC,EAAO,UAAgB7U,QAAQU,EAAM,QACrCoU,EAAO,UAAgB9U,QAAQ6U,EAAM,QAEzClS,EAAOmN,SAAmB,SAAI,WAE9B,IAAc,oBAAgB1N,SAAS0S,GAAzB,eAAgC,CAAzC,IAAIhW,EAAC,KACN,OAAQA,EAAEkC,WACN,IAAK,MACD2B,EAAOmN,SAAgB,MAAIlP,EAAIqT,SAASnV,EAAG,KAAM4Q,EAASxM,KAC1DP,EAAOmN,SAAiB,OAAIlP,EAAIqT,SAASnV,EAAG,KAAM4Q,EAASxM,KAC3D,MAEJ,IAAK,MACDP,EAAOmN,SAAe,KAAIlP,EAAIqT,SAASnV,EAAG,IAAK4Q,EAASxM,KACxDP,EAAOmN,SAAc,IAAIlP,EAAIqT,SAASnV,EAAG,IAAK4Q,EAASxM,MAKnE,OAAOP,GAGX,YAAAuN,WAAA,SAAWjL,GAAX,WACQtC,EAAoB,CAAEgB,KAAM,EAAAI,QAAQgR,MAAOlF,SAAU,IAkBzD,OAhBAjP,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,KACD2B,EAAOkN,SAAS9K,KAAK,EAAKiQ,cAActX,IACxC,MAEJ,IAAK,UACDiF,EAAOmD,QAAU,EAAKmP,kBAAkBvX,GACxC,MAEJ,IAAK,QACD,EAAKwX,qBAAqBxX,EAAGiF,OAKlCA,GAGX,YAAAsS,kBAAA,SAAkBhQ,GACd,IAAItC,EAAS,GAUb,OARA/B,EAAIoP,QAAQ/K,GAAM,SAAAnG,GACd,OAAQA,EAAEkC,WACN,IAAK,UACD2B,EAAOoC,KAAK,CAAEgB,MAAOnF,EAAIqT,SAASnV,EAAG,WAK1C6D,GAGX,YAAAuS,qBAAA,SAAqBxU,EAAeyU,GAApC,WAyBI,OAxBAA,EAAMrF,SAAW,GACjBqF,EAAMC,UAAY,GAElB3V,KAAK8Q,uBAAuB7P,EAAMyU,EAAMrF,SAAUqF,EAAMC,WAAW,SAAA1X,GAC/D,OAAQA,EAAEsD,WACN,IAAK,WACDmU,EAAMpV,UAAYa,EAAIb,UAAUrC,EAAG,OACnC,MAEJ,IAAK,UACDwU,EAAMC,gBAAgBgD,EAAO7E,EAAO+E,mBAAmB3X,IACvD,MAEJ,IAAK,SACD,EAAK4X,mBAAmB5X,EAAGyX,GAC3B,MAEJ,QACI,OAAO,EAGf,OAAO,KAGHA,EAAMrF,SAAS,eACnB,IAAK,gBACMqF,EAAMrF,SAAS,cACtBqF,EAAMrF,SAAS,eAAiB,OAChCqF,EAAMrF,SAAS,gBAAkB,OACjC,MAEJ,IAAK,eACMqF,EAAMrF,SAAS,cACtBqF,EAAMrF,SAAS,eAAiB,SAK5C,YAAAwF,mBAAA,SAAmBrQ,EAAekQ,GAC9B,IAAII,EAAc3U,EAAIqT,SAAShP,EAAM,eACjCuQ,EAAiB5U,EAAIqT,SAAShP,EAAM,kBACpCwQ,EAAgB7U,EAAIqT,SAAShP,EAAM,iBACnCyQ,EAAe9U,EAAIqT,SAAShP,EAAM,gBAEtCkQ,EAAMrF,SAAgB,MAAI,OAC1BqF,EAAMrF,SAAS,iBAAmBQ,EAAOqF,QAAQR,EAAMrF,SAAS,iBAAkB0F,GAClFL,EAAMrF,SAAS,eAAiBQ,EAAOqF,QAAQR,EAAMrF,SAAS,eAAgB4F,GAC9EP,EAAMrF,SAAS,gBAAkBQ,EAAOqF,QAAQR,EAAMrF,SAAS,gBAAiB2F,GAChFN,EAAMrF,SAAS,cAAgBQ,EAAOqF,QAAQR,EAAMrF,SAAS,cAAeyF,IAGhF,YAAAP,cAAA,SAAc/P,GAAd,WACQtC,EAAuB,CAAEgB,KAAM,EAAAI,QAAQ6R,IAAK/F,SAAU,IAc1D,OAZAjP,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,KACD2B,EAAOkN,SAAS9K,KAAK,EAAK8Q,eAAenY,IACzC,MAEJ,IAAK,OACD,EAAKoY,wBAAwBpY,EAAGiF,OAKrCA,GAGX,YAAAmT,wBAAA,SAAwBpV,EAAeqV,GACnCA,EAAIjG,SAAWrQ,KAAK8Q,uBAAuB7P,EAAM,GAAI,MAAM,SAAAhD,GACvD,OAAQA,EAAEsD,WACN,IAAK,WACD+U,EAAIhW,UAAYuQ,EAAO8B,oBAAoB1U,GAC3C,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAAmY,eAAA,SAAe5Q,GAAf,WACQtC,EAAwB,CAAEgB,KAAM,EAAAI,QAAQiS,KAAMnG,SAAU,IAkB5D,OAhBAjP,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,MACD2B,EAAOkN,SAAS9K,KAAK,EAAKmL,WAAWxS,IACrC,MAEJ,IAAK,IACDiF,EAAOkN,SAAS9K,KAAK,EAAKkL,eAAevS,IACzC,MAEJ,IAAK,OACD,EAAKuY,yBAAyBvY,EAAGiF,OAKtCA,GAGX,YAAAsT,yBAAA,SAAyBvV,EAAewV,GACpCA,EAAKpG,SAAWrQ,KAAK8Q,uBAAuB7P,EAAM,GAAI,MAAM,SAAAhD,GACxD,OAAQA,EAAEsD,WACN,IAAK,WACDkV,EAAKC,KAAOvV,EAAIoB,QAAQtE,EAAG,MAAO,MAClC,MAEJ,IAAK,SACD,MAEJ,IAAK,WACDwY,EAAKnW,UAAYuQ,EAAO8B,oBAAoB1U,GAC5C,MAEJ,QACI,OAAO,EAGf,OAAO,MAIf,YAAA6S,uBAAA,SAAuB7P,EAAegC,EAAsC0T,EAA2CC,GAAvH,WA4HI,YA5HkC,IAAA3T,MAAA,WAAsC,IAAA0T,MAAA,WAA2C,IAAAC,MAAA,MACnH3T,EAAQA,GAAS,GAGjB9B,EAAIoP,QAAQtP,GAAM,SAAAhD,GACd,OAAQA,EAAEsD,WACN,IAAK,KACD0B,EAAM,cAAgB4N,EAAOgG,UAAU5Y,GACvC,MAEJ,IAAK,gBACDgF,EAAM,kBAAoB4N,EAAOiG,qBAAqB7Y,GACtD,MAEJ,IAAK,QACDgF,EAAa,MAAI9B,EAAI4V,UAAU9Y,EAAG,MAAO,KAAM,EAAA6R,MAAM3L,OACrD,MAEJ,IAAK,KACDlB,EAAM,aAAeA,EAAM,cAAgB9B,EAAIqT,SAASvW,EAAG,MAAOgS,EAASvM,UAC3E,MAEJ,IAAK,MACDT,EAAM,oBAAsB9B,EAAI4V,UAAU9Y,EAAG,OAAQ,KAAM,EAAA6R,MAAMC,KACjE,MAEJ,IAAK,YACD9M,EAAM,oBAAsB9B,EAAI4V,UAAU9Y,EAAG,MAAO,KAAM,EAAA6R,MAAME,WAChE,MAEJ,IAAK,MACD,GAAI,EAAKjI,YACL,MAER,IAAK,OACD9E,EAAa,MAAI4N,EAAOmG,YAAY/Y,EAAG,KACvC,MAEJ,IAAK,WACD,EAAKgZ,cAAchZ,EAAGgF,GACtB,MAEJ,IAAK,SACDA,EAAM,mBAAqB4N,EAAOqG,cAAcjZ,GAChD,MAEJ,IAAK,IACDgF,EAAM,eAAiB4N,EAAOsG,YAAYlZ,GAC1C,MAEJ,IAAK,IACDgF,EAAM,cAAgB,SACtB,MAEJ,IAAK,IACD,EAAKmU,eAAenZ,EAAGgF,GACvB,MAEJ,IAAK,MACL,IAAK,SACD,EAAKoU,iBAAiBpZ,EAAGgF,GACzB,MAEJ,IAAK,SACD,EAAKwI,UAAUxN,EAAGgF,GAClB,MAEJ,IAAK,aACD,EAAKqU,sBAAsBrZ,EAAG0Y,GAAc1T,GAC5C,MAEJ,IAAK,iBACDA,EAAM,kBAAoB4N,EAAO0G,cAActZ,GAC/CgF,EAAM,mBAAqB,WAC3B,MAEJ,IAAK,OACD,EAAKqU,sBAAsBrZ,EAAGgF,GAC9B,MAEJ,IAAK,MACDA,EAAc,OAAI4N,EAAO2G,cAAcvZ,GACvC,MAEJ,IAAK,YACD,EAAKqZ,sBAAsBrZ,EAAGgF,GAC9B,MAEJ,IAAK,SAGD,MAEJ,IAAK,aACL,IAAK,QACD,EAAKwU,sBAAsBxZ,EAAG0Y,GAAc1T,GAC5C,MAEJ,IAAK,YACDA,EAAM,gBAAkB4N,EAAO6G,iBAAiBzZ,GAChD,MAEJ,IAAK,SACDgF,EAAM,kBAAoB9B,EAAI6P,WAAW/S,EAAG,OAC5C,MAEJ,IAAK,UACqB,OAAlBgD,EAAKM,WACL,EAAKoW,aAAa1Z,EAAGgF,GACzB,MAEJ,IAAK,OACL,IAAK,UACL,IAAK,YAED,MAEJ,QACmB,MAAX2T,GAAoBA,EAAQ3Y,IAC5B,EAAKiK,OAASkJ,QAAQC,KAAK,mCAAmCpT,EAAEsD,eAKzE0B,GAGX,YAAAmU,eAAA,SAAe5R,EAAevC,GAC1B,IAAIc,EAAM5C,EAAI6P,WAAWxL,EAAM,OAE/B,GAAW,MAAPzB,GAAsB,QAAPA,EAAnB,CAGA,OAAQA,GACJ,IAAK,OACL,IAAK,kBACL,IAAK,eACL,IAAK,cACL,IAAK,WACL,IAAK,gBACL,IAAK,UACL,IAAK,aACDd,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,cACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACDA,EAAM,yBAA2B,SACjC,MAEJ,IAAK,SACL,IAAK,QACDA,EAAM,mBAAqB,YAC3B,MAEJ,IAAK,OACL,IAAK,aACL,IAAK,YACDA,EAAM,yBAA2B,OACjC,MAEJ,IAAK,QACDA,EAAM,mBAAqB,YAInC,IAAI2U,EAAMzW,EAAI4V,UAAUvR,EAAM,SAE1BoS,IACA3U,EAAM,yBAA2B2U,KAGzC,YAAAnM,UAAA,SAAUjG,EAAevC,GACrB,IAAI4U,EAAQ1W,EAAI6P,WAAWxL,EAAM,SAE7BqS,IACA5U,EAAM,eAAiB4U,IAG/B,YAAAR,iBAAA,SAAiB7R,EAAevC,GAC5B,IAAI6U,EAAY3W,EAAIqT,SAAShP,EAAM,aAC/BqB,EAAO1F,EAAIqT,SAAShP,EAAM,QAC1B4H,EAAQjM,EAAIqT,SAAShP,EAAM,SAC3BsB,EAAQ3F,EAAIqT,SAAShP,EAAM,SAC3BuS,EAAM5W,EAAIqT,SAAShP,EAAM,OAEzBsS,IAAW7U,EAAM,eAAiB6U,IAClCjR,GAAQuG,KAAOnK,EAAM,eAAiB4D,GAAQuG,IAC9CtG,GAASiR,KAAK9U,EAAM,gBAAkB6D,GAASiR,IAGvD,YAAAJ,aAAA,SAAanS,EAAevC,GACxB,IAAIoL,EAASlN,EAAIqT,SAAShP,EAAM,UAC5B8I,EAAQnN,EAAIqT,SAAShP,EAAM,SAC3B+I,EAAOpN,EAAIoB,QAAQiD,EAAM,OAAQ,MACjCgJ,EAAWrN,EAAI6P,WAAWxL,EAAM,YAKpC,GAHI6I,IAAQpL,EAAM,cAAgBoL,GAC9BC,IAAOrL,EAAM,iBAAmBqL,GAEvB,OAATC,EACA,OAAOC,GACH,IAAK,OACDvL,EAAM,eAAiB,IAAIsL,EAAO,KAAKyJ,QAAQ,GAC/C,MAEJ,IAAK,UACD/U,EAAM,eAAiB,eAAesL,EAAO,GAAE,MAC/C,MAEJ,QACItL,EAAM,eAAiBA,EAAM,cAAmBsL,EAAO,GAAE,OAMzE,YAAAkJ,sBAAA,SAAsBjS,EAAeyS,GACjC9W,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,OACD0W,EAAO,gBAAkBpH,EAAO0G,cAActZ,GAC9C,MAEJ,IAAK,QACDga,EAAO,iBAAmBpH,EAAO0G,cAActZ,GAC/C,MAEJ,IAAK,MACDga,EAAO,eAAiBpH,EAAO0G,cAActZ,GAC7C,MAEJ,IAAK,SACDga,EAAO,kBAAoBpH,EAAO0G,cAActZ,QAMhE,YAAAgZ,cAAA,SAAczR,EAAeyS,GACzB,OAAQ9W,EAAI6P,WAAWxL,EAAM,UACzB,IAAK,QACDyS,EAAe,OAAI9W,EAAIqT,SAAShP,EAAM,OACtC,MAEJ,IAAK,UACL,QACIyS,EAAe,OAAI9W,EAAIqT,SAAShP,EAAM,SAOlD,YAAA8R,sBAAA,SAAsB9R,EAAeyS,GACjC9W,EAAIoP,QAAQ/K,GAAM,SAAAvH,GACd,OAAQA,EAAEsD,WACN,IAAK,QACL,IAAK,OACD0W,EAAO,eAAiBpH,EAAO2G,cAAcvZ,GAC7C,MAEJ,IAAK,MACL,IAAK,QACDga,EAAO,gBAAkBpH,EAAO2G,cAAcvZ,GAC9C,MAEJ,IAAK,MACDga,EAAO,cAAgBpH,EAAO2G,cAAcvZ,GAC5C,MAEJ,IAAK,SACDga,EAAO,iBAAmBpH,EAAO2G,cAAcvZ,QAKnE,EA3iCA,GAAa,EAAAwJ,iBA6iCb,SAAKwI,GACD,2BACA,iBACA,iBACA,uBACA,yBALJ,CAAKA,MAAQ,KAQb,+BAwEA,OAvEW,EAAAM,QAAP,SAAe/K,EAAe0S,GAC1B,IAAK,IAAIta,EAAI,EAAGA,EAAI4H,EAAKN,WAAWC,OAAQvH,IAAK,CAC7C,IAAIyB,EAAImG,EAAKN,WAAWtH,GAEN,GAAdyB,EAAEgG,UACF6S,EAAY7Y,KAIjB,EAAAyS,kBAAP,SAAyB7Q,EAAekX,EAAU1S,GAC9C,IAAIpG,EAAI,UAAgBkB,QAAQU,EAAMkX,GACtC,OAAO9Y,EAAI8B,EAAI6P,WAAW3R,EAAGoG,GAAY,MAGtC,EAAAuL,WAAP,SAAkBxL,EAAeC,GAC7B,OAAO,UAAgBxD,KAAKuD,EAAMC,IAG/B,EAAAsR,UAAP,SAAiBvR,EAAeC,EAAkB2S,EAAyBC,QAAzB,IAAAD,MAAA,WAAyB,IAAAC,MAAA,SACvE,IAAIC,EAAInX,EAAI6P,WAAWxL,EAAMC,GAE7B,OAAQ6S,GACJ,IAAK,SACD,OAAOA,EAEX,IAAK,OACD,OAAOD,EAGf,OAAOC,EAAI,IAAIA,EAAMF,GAGlB,EAAAjW,SAAP,SAAgBqD,EAAeC,EAAkB2S,GAC7C,YAD6C,IAAAA,OAAA,GACtC,UAAgBjW,SAASqD,EAAMC,EAAU2S,IAG7C,EAAA7V,QAAP,SAAeiD,EAAeC,EAAkB2S,GAE5C,YAF4C,IAAAA,MAAA,GAClCjX,EAAI6P,WAAWxL,EAAMC,GAClBxB,SAAS9C,EAAI6P,WAAWxL,EAAMC,IAAa2S,GAGrD,EAAA5D,SAAP,SAAgBhP,EAAeC,EAAkBvB,GAC7C,YAD6C,IAAAA,MAAiB+L,EAAS3M,KAChEnC,EAAIoX,YAAYpX,EAAI6P,WAAWxL,EAAMC,GAAWvB,IAGpD,EAAA0Q,UAAP,SAAiBpP,EAAetB,GAC5B,YAD4B,IAAAA,MAAiB+L,EAAS3M,KAC/CnC,EAAIoX,YAAY/S,EAAK2N,YAAajP,IAGtC,EAAAqU,YAAP,SAAmBxU,EAAaG,GAC5B,QAD4B,IAAAA,MAAiB+L,EAAS3M,KAC3C,MAAPS,GAAeA,EAAIyU,QAAQ,OAAS,EACpC,OAAOzU,EAEX,IAAI0U,EAASxU,SAASF,GAEtB,OAAQG,GACJ,KAAK+L,EAAS3M,IAAK,OAAQ,IAAOmV,GAAQT,QAAQ,GAAK,KACvD,KAAK/H,EAASxM,IAAK,OAAQgV,EAAS,OAAOT,QAAQ,GAAK,KACxD,KAAK/H,EAASvM,SAAU,OAAQ,GAAM+U,GAAQT,QAAQ,GAAK,KAC3D,KAAK/H,EAAStM,OAAQ,OAAQ,KAAQ8U,GAAQT,QAAQ,GAAK,KAC3D,KAAK/H,EAASpM,QAAS,OAAQ,IAAO4U,GAAQT,QAAQ,GAAK,IAG/D,OAAOjU,GAGJ,EAAAzD,UAAP,SAAiBkF,EAAeC,GAC5B,IAAI1B,EAAM5C,EAAI6P,WAAWxL,EAAMC,GAE/B,OAAO1B,GAAOA,EAAIe,QAAQ,SAAU,KAAKA,QAAQ,QAAS,QAElE,EAxEA,GA0EA,2BAkHA,OAjHW,EAAAqS,YAAP,SAAmBlZ,GACf,OAAOkD,EAAIgB,SAASlE,EAAG,OAAO,GAAQ,OAAS,UAG5C,EAAA+Y,YAAP,SAAmB/Y,EAAYgE,GAC3B,IAAIiC,EAAiB+L,EAAS3M,IAE9B,OAAQnC,EAAI6P,WAAW/S,EAAG,SACtB,IAAK,MAAO,MACZ,IAAK,MAAOiG,EAAO+L,EAASpM,QAGhC,OAAO1C,EAAIqT,SAASvW,EAAGgE,EAAMiC,IAG1B,EAAAgT,cAAP,SAAqBjZ,GACjB,OAAOkD,EAAIgB,SAASlE,EAAG,OAAO,GAAQ,eAAiB,QAGpD,EAAAsZ,cAAP,SAAqBtZ,GACjB,OAAOkD,EAAIqT,SAASvW,EAAG,MAGpB,EAAAuZ,cAAP,SAAqBvZ,GAGjB,GAAY,OAFDkD,EAAI6P,WAAW/S,EAAG,OAGzB,MAAO,OAEX,IAAIkG,EAAQhD,EAAI4V,UAAU9Y,EAAG,SAG7B,OAFWkD,EAAIqT,SAASvW,EAAG,KAAMgS,EAAStM,QAE5B,WAAmB,QAATQ,EAAkB,QAAUA,IAGjD,EAAAuT,iBAAP,SAAwBzZ,GAEpB,MAAe,SADJkD,EAAI6P,WAAW/S,EAAG,OACJ,QAAU,QAGhC,EAAA0U,oBAAP,SAA2B1U,GACvB,IAAIqC,EAAY,GACZyD,EAAM5C,EAAI6P,WAAW/S,EAAG,OAgB5B,MAbc,KAAV8F,EAAI,KAAWzD,GAAa,cAClB,KAAVyD,EAAI,KAAWzD,GAAa,aAClB,KAAVyD,EAAI,KAAWzD,GAAa,cAClB,KAAVyD,EAAI,KAAWzD,GAAa,aAClB,KAAVyD,EAAI,KAAWzD,GAAa,YAClB,KAAVyD,EAAI,KAAWzD,GAAa,aAClB,KAAVyD,EAAI,KAAWzD,GAAa,YAClB,KAAVyD,EAAI,KAAWzD,GAAa,aAClB,KAAVyD,EAAI,KAAWzD,GAAa,YAClB,KAAVyD,EAAI,KAAWzD,GAAa,YACjB,KAAXyD,EAAI,MAAYzD,GAAa,YAClB,KAAXyD,EAAI,MAAYzD,GAAa,YAE1BA,EAAUoY,QAGd,EAAA7B,UAAP,SAAiB5Y,GACb,IAAIiG,EAAO/C,EAAI6P,WAAW/S,EAAG,OAE7B,OAAQiG,GACJ,IAAK,QACL,IAAK,OAAQ,MAAO,OACpB,IAAK,SAAU,MAAO,SACtB,IAAK,MACL,IAAK,QAAS,MAAO,QACrB,IAAK,OAAQ,MAAO,UAGxB,OAAOA,GAGJ,EAAA4S,qBAAP,SAA4B7Y,GACxB,IAAIiG,EAAO/C,EAAI6P,WAAW/S,EAAG,OAE7B,OAAQiG,GACJ,IAAK,OACL,IAAK,WAAY,MAAO,WACxB,IAAK,MAAO,MAAO,MACnB,IAAK,SAAU,MAAO,SACtB,IAAK,SAAU,MAAO,SAG1B,OAAOA,GAGJ,EAAAgS,QAAP,SAAepV,EAAW6X,GACtB,OAAS,MAAL7X,EAAkB6X,EACb,MAALA,EAAkB7X,EAEf,QAAQA,EAAC,MAAM6X,EAAC,KAGpB,EAAAC,UAAP,SAAiBC,EAAaC,GAC1B,OAAQD,EAAMC,IAASA,GAGpB,EAAAlD,mBAAP,SAA0B3X,GACtB,IAAIqC,EAAY,GAShB,OAPIa,EAAIgB,SAASlE,EAAG,iBAAgBqC,GAAa,cAC7Ca,EAAIgB,SAASlE,EAAG,cAAaqC,GAAa,cAC1Ca,EAAIgB,SAASlE,EAAG,gBAAeqC,GAAa,YAC5Ca,EAAIgB,SAASlE,EAAG,aAAYqC,GAAa,aACzCa,EAAIgB,SAASlE,EAAG,aAAYqC,GAAa,aACzCa,EAAIgB,SAASlE,EAAG,aAAYqC,GAAa,aAEtCA,EAAUoY,QAEzB,EAlHA,I,6HClpCA,WAaA,8BAAmCzX,EAAeE,GAC9C,MAAO,CACH+C,KAAM,EAAAI,QAAQyU,cACd5V,GAAIhC,EAAIc,KAAKhB,EAAM,MACnB9C,KAAMgD,EAAIc,KAAKhB,EAAM,QACrB+X,SAAU7X,EAAIoB,QAAQtB,EAAM,YAC5BgY,QAAS9X,EAAIoB,QAAQtB,EAAM,aAInC,4BAAiCA,EAAeE,GAC5C,MAAO,CACH+C,KAAM,EAAAI,QAAQ4U,YACd/V,GAAIhC,EAAIc,KAAKhB,EAAM,S,4UC1B3B,WAMA,OACA,QAQA,aASI,WAAmBkY,GAAA,KAAAA,eAPnB,KAAA/Q,WAAqB,EACrB,KAAA9H,UAAoB,OAqwBxB,OA5vBI,YAAAiI,OAAA,SAAOX,EAAwBP,EAA4BC,EAAoCO,QAApC,IAAAP,MAAA,MACvDtH,KAAK4H,SAAWA,EAChB5H,KAAK6H,QAAUA,EACf7H,KAAKoZ,SAAW,KAIhBC,EAFA/R,EAAiBA,GAAkBD,GAGnCgS,EAAkBhS,GAElBiS,EAAchS,EAAgB,oCAC9BA,EAAeiS,YAAYvZ,KAAKwZ,sBAEL,MAAvB5R,EAASqC,aACTjK,KAAKoZ,SAAWpZ,KAAKyZ,cAAc7R,EAASqC,WAAWyE,WAEvD4K,EAAchS,EAAgB,wBAC9BA,EAAeiS,YAAYvZ,KAAK0Z,aAAa9R,EAASqC,WAAWyE,aAGjE9G,EAASkC,gBACTwP,EAAchS,EAAgB,kCAC9BA,EAAeiS,YAAYvZ,KAAK2Z,gBAAgB/R,EAASkC,cAAc2C,cAAenF,MAItFO,EAAQG,aAAeJ,EAAS+B,eAChC3J,KAAK4Z,gBAAgBhS,EAAS+B,cAAerC,GAEjD,IAAIuS,EAAkB7Z,KAAK8Z,eAAelS,EAAS4B,aAAa6C,MAEhE,GAAIrM,KAAKoI,UAAW,CAChB,IAAIyL,EAAU7T,KAAK+Z,gBACnBC,EAAenG,EAASgG,GACxBxS,EAAckS,YAAY1F,QAG1BmG,EAAe3S,EAAewS,IAItC,YAAAD,gBAAA,SAAgBK,EAA0B3S,GACtC,I,eAAQ4S,GACJ,EAAKtS,SAASgD,SAASsP,EAAErO,MAAOqO,EAAEtO,SAAS3L,MAAK,SAAAka,GAC5C,IAAIC,EAAU,mDACMF,EAAE/b,KAAI,oCACXgc,EAAQ,wBAGvBb,EAAchS,EAAgB,QAAQ4S,EAAE/b,MACxCmJ,EAAeiS,YAAYc,EAAmBD,Q,OARzC,MAAAH,EAAU1O,MAAM0G,QAAO,SAAAlR,GAAK,OAAAA,EAAE8K,SAA9B,eAAsC,C,EAA1C,QAab,YAAAyO,iBAAA,SAAiBha,GACb,OAAKA,EAGKN,KAAKM,UAAS,IAAIA,EAFjBN,KAAKM,WAKpB,YAAAmZ,cAAA,SAAc7K,GAGV,IAFA,IAAI2L,EAAuC,GAEzB,MAAA3L,EAAOqD,QAAO,SAAAlR,GAAK,OAAQ,MAARA,EAAEoC,MAArB,eAAkC,CAChDoX,GADKtX,EAAK,MACME,IAAMF,EAG1B,IAAkB,UAAA2L,EAAOqD,QAAO,SAAAlR,GAAK,OAAAA,EAAEqO,WAArB,eAA+B,CAA5C,IACGoL,EAAYD,GADXtX,EAAK,MACsBmM,SAEhC,GAAIoL,EACA,I,IACQC,E,WADCC,IACDD,EAAaD,EAAU5L,OAAOqD,QAAO,SAAAlR,GAAK,OAAAA,EAAE0D,QAAUiW,EAAYjW,YAEpDgW,EAAWtV,OAAS,GAClC,EAAKwV,oBAAoBF,EAAW,GAAG5J,OAAQ6J,EAAY7J,S,OAJ3C,MAAA5N,EAAM2L,OAAN,eAAc,C,EAAlB,WAOf5O,KAAK6H,QAAQK,OAClBkJ,QAAQC,KAAK,yBAAyBpO,EAAMmM,SAGpD,IAAkB,UAAAR,EAAA,eAAQ,CAArB,IAAI3L,KAAK,MACJ2X,QAAU5a,KAAKsa,iBAAiBta,KAAK6a,gBAAgB5X,EAAME,KAGrE,OAAOoX,GAGX,YAAAO,eAAA,SAAeva,GACX,GAAIA,EAAQ6P,SACR,IAAc,UAAA7P,EAAQ6P,SAAR,eAAkB,CAA3B,IAAIvN,EAAC,KACNA,EAAEvC,UAAYN,KAAKsa,iBAAiBzX,EAAEvC,WACtCuC,EAAEgQ,OAAStS,EAEPsC,EAAEqB,MAAQ,EAAAI,QAAQgR,MAClBtV,KAAK+a,aAAalY,GAGlB7C,KAAK8a,eAAejY,KAMpC,YAAAkY,aAAA,SAAarF,GACT,IAAc,UAAAA,EAAMtF,SAAN,eACV,IADC,IACa,MADR,KACUA,SAAF,eAAY,CAArB,IAAInS,EAAC,KACNA,EAAEoS,SAAWrQ,KAAK2a,oBAAoBjF,EAAMC,UAAW1X,EAAEoS,SAAU,CAC/D,cAAe,eAAgB,aAAc,gBAC7C,eAAgB,gBAAiB,cAAe,mBAGpDrQ,KAAK8a,eAAe7c,KAKhC,YAAA0c,oBAAA,SAAoBK,EAA+B/C,EAAgCgD,GAC/E,QAD+E,IAAAA,MAAA,OAC1ED,EACD,OAAO/C,EAEG,MAAVA,IAAgBA,EAAS,IAChB,MAATgD,IAAeA,EAAQ3c,OAAO4c,oBAAoBF,IAEtD,IAAgB,UAAAC,EAAA,eAAO,CAAlB,IAAI9b,EAAG,KACJ6b,EAAMvb,eAAeN,KAAS8Y,EAAOxY,eAAeN,KACpD8Y,EAAO9Y,GAAO6b,EAAM7b,IAG5B,OAAO8Y,GAGX,YAAAkD,cAAA,SAAc7a,EAAmBY,GAC7B,IAAID,EAAOjB,KAAKmZ,aAAaiC,cAAc,WA6B3C,OA3BAna,EAAKX,UAAYA,EAEbY,IACIA,EAAM0F,cACN3F,EAAKgC,MAAMoY,YAAcrb,KAAKsb,aAAapa,EAAM0F,YAAYC,MAC7D5F,EAAKgC,MAAMsY,aAAevb,KAAKsb,aAAapa,EAAM0F,YAAYE,OAC9D7F,EAAKgC,MAAMuY,WAAaxb,KAAKsb,aAAapa,EAAM0F,YAAYG,KAC5D9F,EAAKgC,MAAMwY,cAAgBzb,KAAKsb,aAAapa,EAAM0F,YAAYI,SAG/D9F,EAAMuF,WACDzG,KAAK6H,QAAQE,cACd9G,EAAKgC,MAAMqD,MAAQtG,KAAKsb,aAAapa,EAAMuF,SAASH,QACnDtG,KAAK6H,QAAQC,eACd7G,EAAKgC,MAAMyY,UAAY1b,KAAKsb,aAAapa,EAAMuF,SAASC,UAG5DxF,EAAMmF,SAAWnF,EAAMmF,QAAQJ,kBAC/BhF,EAAKgC,MAAM0Y,YAAc,GAAGza,EAAMmF,QAAQJ,gBAC1ChF,EAAKgC,MAAM2Y,UAAY5b,KAAKsb,aAAapa,EAAMmF,QAAQH,OAEnDhF,EAAMmF,QAAQF,YACdlF,EAAKgC,MAAM4Y,WAAa,qBAK7B5a,GAGX,YAAA6Y,eAAA,SAAelS,GACX,IAAI1E,EAAS,GAEblD,KAAK8a,eAAelT,GAEpB,IAAmB,UAAA5H,KAAK8b,eAAelU,EAASwI,UAA7B,eAAwC,CAAvD,IAAI5J,EAAO,KACPuV,EAAiB/b,KAAKmb,cAAcnb,KAAKM,UAAWkG,EAAQwV,WAAapU,EAAS1G,OACtFlB,KAAKic,eAAezV,EAAQ7D,SAAUiF,EAAUmU,GAChD7Y,EAAOoC,KAAKyW,GAGhB,OAAO7Y,GAGX,YAAA4Y,eAAA,SAAenZ,GAIX,I,MAHIuZ,EAAU,CAAEF,UAAW,KAAMrZ,SAAU,IACvCO,EAAS,CAACgZ,GAEE,MAAAvZ,EAAA,eAAU,CAAtB,IAAI1B,EAAI,KACR,GAAGA,EAAKiD,MAAQ,EAAAI,QAAQ6N,UAAW,CAC/B,IAAM3P,EAAavB,EAA0BuB,UACvC7C,EAAIK,KAAKoZ,UAAY5W,EAAYxC,KAAKoZ,SAAS5W,GAAa,MAE9C,QAApB,EAAG7C,aAAC,EAADA,EAAG+N,sBAAc,eAAErL,mBAClB6Z,EAAQF,UAAYA,EACpBE,EAAU,CAAEF,UAAW,KAAMrZ,SAAU,IACvCO,EAAOoC,KAAK4W,IAMpB,GAFAA,EAAQvZ,SAAS2C,KAAKrE,GAEnBA,EAAKiD,MAAQ,EAAAI,QAAQ6N,UACxB,CACI,IAAMzS,EAAIuB,EAEN+a,EAAYtc,EAAEgC,aACdya,GAAe,EACfC,GAAe,EAenB,GAbGpc,KAAK6H,QAAQI,YAAcvI,EAAE0Q,WAC5B+L,EAAczc,EAAE0Q,SAASiM,WAAU,SAAA3d,G,QAE/B,OAAuB,IADvB0d,EAA4E,QAAjE,EAAa,QAAb,EAAG1d,EAAE0R,gBAAQ,eAAEiM,WAAU,SAAAvd,GAAK,MAA6B,QAA5BA,EAAmBwU,gBAAe,SAAM,QAKvF0I,IAA6B,GAAhBG,KACZD,EAAQF,UAAYA,EACpBE,EAAU,CAAEF,UAAW,KAAMrZ,SAAU,IACvCO,EAAOoC,KAAK4W,KAGG,GAAhBC,EAAmB,CAClB,IAAIG,EAAW5c,EAAE0Q,SAAS+L,GACtBI,EAAWH,EAAcE,EAASlM,SAASjL,OAAS,EAExD,GAAGgX,EAAczc,EAAE0Q,SAASjL,OAAS,GAAKoX,EAAU,CAChD,IAAInM,EAAWnP,EAAKmP,SAChBoM,EAAe,EAAH,KAAQvb,GAAI,CAAEmP,SAAUA,EAASqM,MAAMN,KAIvD,GAHAlb,EAAKmP,SAAWA,EAASqM,MAAM,EAAGN,GAClCD,EAAQvZ,SAAS2C,KAAKkX,GAEnBD,EAAU,CACT,IAAIG,EAAcJ,EAASlM,SACvBuM,EAAS,EAAH,KAASL,GAAQ,CAAElM,SAAUsM,EAAYD,MAAM,EAAGL,KAC5Dnb,EAAKmP,SAAS9K,KAAKqX,GACnBL,EAASlM,SAAWsM,EAAYD,MAAML,OAS1D,IAFA,IAAIQ,EAAmB,KAEdhf,EAAIsF,EAAOiC,OAAS,EAAGvH,GAAK,EAAGA,IACT,MAAvBsF,EAAOtF,GAAGoe,UACV9Y,EAAOtF,GAAGoe,UAAYY,EAEtBA,EAAmB1Z,EAAOtF,GAAGoe,UAIrC,OAAO9Y,GAGX,YAAAoY,aAAA,SAAazd,GACT,OAAOA,EAAI,GAAGA,EAAEgB,MAAQhB,EAAEqG,KAAS,MAGvC,YAAA6V,cAAA,WACI,IAAIlG,EAAUjM,SAASwT,cAAc,OAIrC,OAFAvH,EAAQvT,UAAeN,KAAKM,UAAS,WAE9BuT,GAGX,YAAA2F,mBAAA,WASI,OAAOa,EARS,IAAIra,KAAKM,UAAS,gJACvBN,KAAKM,UAAS,oBAAoBN,KAAKM,UAAS,2GAChDN,KAAKM,UAAS,+CACPN,KAAKM,UAAS,kDACrBN,KAAKM,UAAS,2DACdN,KAAKM,UAAS,eAAeN,KAAKM,UAAS,wDAC3CN,KAAKM,UAAS,wBAsE7B,YAAAqZ,gBAAA,SAAgB/K,EAAyBtH,GAIrC,IAJJ,IAKYgK,EACAuL,EANZ,OACQC,EAAY,GACZC,EAAe,G,aAMf,GAHIzL,EAAW,KAAK,EAAK0L,eAAenE,EAAI1V,GAAI0V,EAAIzV,OAChDyZ,EAAgB,OAEhBhE,EAAI3G,WAA2B,WAAd2G,EAAIvL,OAAqB,CAC1C,IAAI2P,EAAU,EAAKC,iBAAiBrE,EAAI1V,GAAI0V,EAAIzV,OAE5CyV,EAAIzV,MAAQ,EACZ0Z,GAAa,EAAKK,cAAc,KAAK,EAAKH,eAAenE,EAAI1V,GAAI0V,EAAIzV,MAAQ,GAAM,CAC/E,gBAAiB6Z,IAIrBF,EAAazX,KAAK2X,GAGtBH,GAAa,EAAKK,cAAiB7L,EAAQ,UAAW,CAClD,QAAW,EAAK8L,mBAAmBvE,EAAI3G,UAAW2G,EAAI1V,IACtD,oBAAqB8Z,SAGxB,GAAIpE,EAAI7G,OAAQ,CACjB,IAAI,GAAW,KAAK,EAAK1R,UAAS,IAAIuY,EAAI7G,OAAOD,KAAMsL,cAEvDP,GAAa,EAAKK,cAAiB7L,EAAQ,UAAW,CAClD,QAAW,MACX,QAAW,eACX,WAAc,OAAO,EAAQ,KAC9BuH,EAAI7G,OAAO/O,OAEd,EAAK2E,SAAS+C,mBAAmBkO,EAAI7G,OAAOD,KAAK9R,MAAK,SAAAmH,GAClD,IAAImG,EAAO,IAAI,EAAKjN,UAAS,cAAc,EAAQ,SAAS8G,EAAI,MAChEE,EAAeiS,YAAYc,EAAmB9M,YAIlDsP,EAAgB,EAAKS,oBAAoBzE,EAAIvL,QAGjDwP,GAAa,EAAKK,cAAc7L,EAAU,EAAF,CACpC,QAAW,YACX,sBAAuB,SACvB,kBAAmBuL,GAChBhE,EAAI5V,S,OA3CC,MAAA2L,EAAA,eAAQ,CAAnB,IAAIiK,EAAG,K,IAqDZ,OANIkE,EAAa5X,OAAS,IACtB2X,GAAa9c,KAAKmd,cAAc,IAAInd,KAAKM,UAAS,WAAY,CAC1D,gBAAiByc,EAAaQ,KAAK,QAIpClD,EAAmByC,IAG9B,YAAApD,aAAA,SAAa9K,GAIT,IAHA,IAAIkO,EAAY,GACZvC,EAAYva,KAAKoZ,SAEH,MAAAxK,EAAA,eAAQ,CAArB,IAAI3L,EAAK,KACNua,EAAava,EAAM2L,OAEvB,GAAG3L,EAAMiO,OAAQ,CACb,IAAIuM,EAAcxa,EAAMiO,QAAUqJ,EAAUtX,EAAMiO,QAE9CuM,EACAD,EAAYA,EAAUE,OAAOD,EAAY7O,QACrC5O,KAAK6H,QAAQK,OACjBkJ,QAAQC,KAAK,2BAA2BpO,EAAMiO,QAGtD,IAAqB,UAAAsM,EAAA,eAAW,CAA3B,IAAIG,EAAQ,KACTrM,EAAW,GAEXrO,EAAMwB,QAAUkZ,EAASlZ,OACzB6M,GAAerO,EAAMwB,OAAM,IAAIxB,EAAM2X,QAChC3X,EAAMwB,OACX6M,GAAerO,EAAMwB,OAAM,IAAIxB,EAAM2X,QAAO,IAAI+C,EAASlZ,OAEzD6M,GAAY,IAAIrO,EAAM2X,QAAO,IAAI+C,EAASlZ,OAE1CxB,EAAMgO,WAAahO,EAAMwB,SACzB6M,EAAW,IAAItR,KAAKM,UAAS,IAAI2C,EAAMwB,OAAM,KAAO6M,GAExDwL,GAAa9c,KAAKmd,cAAc7L,EAAUqM,EAAS9M,SAI3D,OAAOwJ,EAAmByC,IAG9B,YAAAc,cAAA,SAAc3c,EAAsB4R,GAChC,OAAQ5R,EAAKiD,MACT,KAAK,EAAAI,QAAQ6N,UACT,OAAOnS,KAAK6d,gBAAkC5c,GAElD,KAAK,EAAAqD,QAAQyU,cACT,OAAO/Y,KAAK8d,oBAA0C7c,GAE1D,KAAK,EAAAqD,QAAQ4U,YACT,OAAO,KAEX,KAAK,EAAA5U,QAAQ2O,IACT,OAAOjT,KAAK+d,UAAsB9c,GAEtC,KAAK,EAAAqD,QAAQgR,MACT,OAAOtV,KAAKge,YAAY/c,GAE5B,KAAK,EAAAqD,QAAQ6R,IACT,OAAOnW,KAAKie,eAAehd,GAE/B,KAAK,EAAAqD,QAAQiS,KACT,OAAOvW,KAAKke,gBAAgBjd,GAEhC,KAAK,EAAAqD,QAAQwO,UACT,OAAO9S,KAAKme,gBAAgBld,GAEhC,KAAK,EAAAqD,QAAQyP,QACT,OAAO/T,KAAKoe,cAAyBnd,GAEzC,KAAK,EAAAqD,QAAQ2Q,MACT,OAAOjV,KAAKqe,YAAuBpd,GAEvC,KAAK,EAAAqD,QAAQ4O,KACT,OAAOlT,KAAKse,WAAwBrd,GAExC,KAAK,EAAAqD,QAAQmP,IACT,OAAOzT,KAAKue,UAAUtd,GAE1B,KAAK,EAAAqD,QAAQ3F,OACT,OAAOqB,KAAKwe,aAA4Bvd,GAGhD,OAAO,MAGX,YAAAwd,eAAA,SAAexd,EAAsByd,GACjC,OAAO1e,KAAKic,eAAehb,EAAKmP,SAAUnP,EAAMyd,IAGpD,YAAAzC,eAAA,SAAe0C,EAAyB9L,EAAwB6L,GAAhE,WACI,GAAY,MAATC,EACC,OAAO,KAEX,IAAIzb,EAASyb,EAAM/b,KAAI,SAAAC,GAAK,SAAK+a,cAAc/a,EAAGgQ,MAASZ,QAAO,SAAApP,GAAK,OAAK,MAALA,KAEvE,GAAG6b,EACC,IAAa,UAAAxb,EAAA,eAAM,CAAf,IAAIjF,EAAC,KACLygB,EAAKnF,YAAYtb,GAEzB,OAAOiF,GAGX,YAAA2a,gBAAA,SAAgB5c,GACZ,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,KAQ7C,GANApb,KAAK4e,YAAY3d,EAAMiC,GACvBlD,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAEtClD,KAAK8e,uBAAuB5b,EAAOD,MAAOhC,GAEtCA,EAAKW,UAAW,CAChB,IAAIob,EAAiBhd,KAAKgd,eAAe/b,EAAKW,UAAUuB,GAAIlC,EAAKW,UAAUwB,OAC3EF,EAAO5C,UAAY,EAAAF,YAAY8C,EAAO5C,UAAW0c,GAGrD,GAAI/b,EAAKuB,UAAW,CAChB,IAAIuc,EAAiB/e,KAAKsa,iBAAiBta,KAAK6a,gBAAgB5Z,EAAKuB,YACrEU,EAAO5C,UAAY,EAAAF,YAAY8C,EAAO5C,UAAWye,GAGrD,OAAO7b,GAGX,YAAA8b,oBAAA,SAAoB/b,EAAY/B,GAC5BlB,KAAK8e,uBAAuB7b,EAAO/B,IAGvC,YAAA4d,uBAAA,SAAuB7b,EAAY/B,GACnB,MAATA,IAGAA,EAAMiD,QACLlB,EAAa,MAAI/B,EAAMiD,OAGvBjD,EAAMkD,WACNnB,EAAM,aAAejD,KAAKsb,aAAapa,EAAMkD,aAIrD,YAAA+Z,gBAAA,SAAgBld,GACZ,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,KAQ7C,OANApb,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAElCjC,EAAK+R,OACL9P,EAAO8P,KAAO/R,EAAK+R,MAEhB9P,GAGX,YAAAkb,cAAA,SAAcnd,GACV,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,OAS7C,OAPAlY,EAAOD,MAAMgc,QAAU,eACvB/b,EAAOD,MAAMH,SAAW,WACxBI,EAAOD,MAAMic,WAAa,MAE1Blf,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAE/BA,GAGX,YAAAmb,YAAA,SAAYpd,GACR,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,OAU7C,OARApb,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAElClD,KAAK4H,UACL5H,KAAK4H,SAAS2C,kBAAkBtJ,EAAK8Q,KAAK9R,MAAK,SAAAc,GAC3CmC,EAAO6O,IAAMhR,KAIdmC,GAGX,YAAAob,WAAA,SAAWrd,GACP,OAAOjB,KAAKmZ,aAAagG,eAAele,EAAKsM,OAGjD,YAAAiR,aAAA,SAAavd,GACT,IAAIyV,EAAO1W,KAAKmZ,aAAaiC,cAAc,QAG3C,OAFA1E,EAAKzT,MAAMmc,WAAane,EAAKsS,KAC7BmD,EAAK2I,UAAY,MAAMpe,EAAKuS,KAAI,IACzBkD,GAGX,YAAA6H,UAAA,SAAUtd,GACN,IAAIqe,EAAUtf,KAAKmZ,aAAaiC,cAAc,QAiB9C,OAfAkE,EAAQD,UAAY,SAEjBrf,KAAK6H,QAAQM,cACZoX,YAAW,WACP,IAAI/M,EA6LpB,SAA8CvR,EAAsBiD,GAChE,IAAI2O,EAAS5R,EAAK4R,OAElB,KAAiB,MAAVA,GAAkBA,EAAO3O,MAAQA,GACpC2O,EAASA,EAAOA,OAEpB,OAAUA,EAnMkB2M,CAA6Bve,EAAM,EAAAqD,QAAQ6N,WAEtC,MAAlBK,EAAUhR,OAGbgR,EAAUhR,KAAKie,MAAK,SAAC3e,EAAG6X,GAAM,OAAA7X,EAAEgC,SAASjE,MAAQ8Z,EAAE7V,SAASjE,SAC5DygB,EAAQrc,MAAMgc,QAAU,eACxB,EAAAS,cAAcJ,EAAS9M,EAAUhR,SAClC,GAGA8d,GAGX,YAAAxB,oBAAA,SAAoB7c,GAChB,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,QAE7C,OADAlY,EAAOC,GAAKlC,EAAK9C,KACV+E,GAGX,YAAA6a,UAAA,SAAU9c,GACN,GAAIA,EAAKqS,MACL,MAAqB,QAAdrS,EAAKqS,MAAkB,KAAOtT,KAAKmZ,aAAaiC,cAAc,MAEzE,GAAIna,EAAKmS,aAAenS,EAAKyS,UACzB,OAAO,KAEX,IAAIxQ,EAASlD,KAAKmZ,aAAaiC,cAAc,QAS7C,GAPGna,EAAKkC,KACJD,EAAOC,GAAKlC,EAAKkC,IAErBnD,KAAK4e,YAAY3d,EAAMiC,GACvBlD,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAElCjC,EAAK+R,KAAM,CACX,IAAIzD,EAAOvP,KAAKmZ,aAAaiC,cAAc,KAK3C,OAHA7L,EAAKyD,KAAO/R,EAAK+R,KACjBzD,EAAKgK,YAAYrW,GAEVqM,EAEN,GAAItO,EAAK4S,QAAS,CACnB,IAAIA,EAAU7T,KAAKmZ,aAAaiC,cAAcna,EAAK4S,SAEnD,OADAA,EAAQ0F,YAAYrW,GACb2Q,EAGX,OAAO3Q,GAGX,YAAA8a,YAAA,SAAY/c,GACR,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,SAS7C,OAPIna,EAAKoF,SACLnD,EAAOqW,YAAYvZ,KAAK2f,mBAAmB1e,EAAKoF,UAEpDrG,KAAK4e,YAAY3d,EAAMiC,GACvBlD,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAE/BA,GAGX,YAAAyc,mBAAA,SAAmBtZ,GAGf,IAFA,IAAInD,EAASlD,KAAKmZ,aAAaiC,cAAc,YAE7B,MAAA/U,EAAA,eAAS,CAApB,IAAIuR,EAAG,KACJgI,EAAU5f,KAAKmZ,aAAaiC,cAAc,OAE1CxD,EAAItR,QACJsZ,EAAQ3c,MAAMqD,MAAWsR,EAAItR,MAAK,MAEtCpD,EAAOqW,YAAYqG,GAGvB,OAAO1c,GAGX,YAAA+a,eAAA,SAAehd,GACX,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,MAM7C,OAJApb,KAAK4e,YAAY3d,EAAMiC,GACvBlD,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAE/BA,GAGX,YAAAgb,gBAAA,SAAgBjd,GACZ,IAAIiC,EAASlD,KAAKmZ,aAAaiC,cAAc,MAQ7C,OANApb,KAAK4e,YAAY3d,EAAMiC,GACvBlD,KAAKye,eAAexd,EAAMiC,GAC1BlD,KAAK6e,kBAAkB5d,EAAKoP,SAAUnN,GAElCjC,EAAKyV,OAAMxT,EAAO2c,QAAU5e,EAAKyV,MAE9BxT,GAGX,YAAA2b,kBAAA,SAAkB5b,EAA+B6c,GAC7C,GAAa,MAAT7c,EAGJ,IAAK,IAAI9D,KAAO8D,EACRA,EAAMxD,eAAeN,KACrB2gB,EAAM7c,MAAM9D,GAAO8D,EAAM9D,KAKrC,YAAAyf,YAAA,SAAY5D,EAAuB8E,GAC3B9E,EAAM1a,YACNwf,EAAMxf,UAAY0a,EAAM1a,YAGhC,YAAA0c,eAAA,SAAe7Z,EAAY4c,GACvB,OAAU/f,KAAKM,UAAS,QAAQ6C,EAAE,IAAI4c,GAG1C,YAAA5C,cAAA,SAAc6C,EAAmBnP,EAAgCoP,QAAA,IAAAA,MAAA,MAC7D,IAAI/c,EAAS8c,EAAY,SAEzB,IAAK,IAAM7gB,KAAO0R,EACd3N,GAAU,KAAK/D,EAAG,KAAK0R,EAAO1R,GAAI,QAMtC,OAHI8gB,IACA/c,GAAU,IAAM+c,GAEb/c,EAAS,SAGpB,YAAAga,iBAAA,SAAiB/Z,EAAY4c,GACzB,OAAU/f,KAAKM,UAAS,QAAQ6C,EAAE,IAAI4c,GAG1C,YAAA3C,mBAAA,SAAmB7P,EAAcpK,GAAjC,WAMI,MAAO,IALMoK,EAAKzI,QAAQ,SAAS,SAAAnF,GAC/B,IAAIogB,EAAM9b,SAAStE,EAAEe,UAAU,GAAI,IAAM,EACzC,MAAO,YAAY,EAAKwc,iBAAiB/Z,EAAI4c,GAAI,QAG/B,KAG1B,YAAAzC,oBAAA,SAAoBhQ,GAWhB,MAVc,CACV,KAAQ,OACR,OAAU,OACV,QAAW,UACX,YAAe,cACf,YAAe,cACf,WAAc,cACd,WAAc,eAGHA,IAAWA,GAG9B,YAAAuN,gBAAA,SAAgBva,GACZ,OAAOA,aAAS,EAATA,EAAWwE,QAAQ,SAAU,KAAKA,QAAQ,QAAS,QAElE,EAxwBA,GA0wBA,SAASkV,EAAekG,EAAwB9P,GAC5C,IAAc,UAAAA,EAAA,eAAQ,CAAjB,IAAInS,EAAC,KACNiiB,EAAU3G,YAAYtb,IAG9B,SAASob,EAAkBpY,GACvB,KAAOA,EAAKgE,YACRhE,EAAKkf,YAAYlf,EAAKgE,YAI9B,SAASoV,EAAmB4F,GACxB,IAAIG,EAAexY,SAASwT,cAAc,SAE1C,OADAgF,EAAaf,UAAYY,EAClBG,EAGX,SAAS9G,EAAcrY,EAAmBof,GACtCpf,EAAKsY,YAAY3R,SAAS0Y,cAAcD,IA5xB/B,EAAA1Y,gB,qGCdb,yBAA8B1G,EAAmBO,EAAsB+e,QAAA,IAAAA,MAAuB,KAE1F,IAAI7gB,EAAIuB,EAAKuf,QAAQ,KAEjBC,EAAMxf,EAAKyf,wBACXC,EAAMjhB,EAAEghB,wBAER7Z,GAAQ4Z,EAAI5Z,KAAO8Z,EAAI9Z,MAAQ0Z,EAC/BK,EAAMpf,EAAKyH,MAAK,SAAAnK,GAAK,MAAW,SAAXA,EAAEmE,OAAoBnE,EAAEgE,SAASjE,MAAQgI,KAElE,GAAU,MAAP+Z,EAMH,OAHA3f,EAAKgC,MAAMgc,QAAU,eACrBhe,EAAKgC,MAAMqD,MAAYsa,EAAI9d,SAASjE,MAAQgI,EAAK,KAEzC+Z,EAAI5d,QACR,IAAK,MACL,IAAK,YACD/B,EAAKgC,MAAM4d,aAAe,mBAC1B,MAEJ,IAAK,SACL,IAAK,QACL,IAAK,aACD5f,EAAKgC,MAAM4d,aAAe","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__11__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(el => {\r\n                this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseNumberingPart(xml, pkg.xmlParser));\r\n                this.domNumberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, Style, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseStylesPart(xml, pkg.xmlParser));\r\n                this.domStyles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: Style[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n\r\n    paragraphStyle: any;\r\n    runStyle: any;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseParagraphProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\nexport interface Style {\r\n    id: string;\r\n    type: StyleType;\r\n    customStyle: boolean\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): Style {\r\n    let result = {\r\n        id: xml.attr(elem, 'styleId'),\r\n        type: xml.attr(elem, 'type'),\r\n        customStyle: xml.boolAttr(elem, 'customStyle', false),\r\n        default: xml.boolAttr(elem, 'default', false),\r\n    } as Style;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlDoc: Element) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            cssStyle: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DomType, IDomTable, IDomNumbering, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunProperties } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n    currentParagrashStyle: any; \r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.domStyles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if(elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n    \r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n            \r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                \r\n                if(paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}