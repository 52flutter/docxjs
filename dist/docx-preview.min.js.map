{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/dom.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/document.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/html-renderer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomType","DomRelationshipType","document_1","document_parser_1","html_renderer_1","renderAsync","data","bodyContainer","styleContainer","options","parser","DocumentParser","renderer","HtmlRenderer","document","ignoreWidth","ignoreHeight","debug","className","inWrapper","Document","load","then","doc","render","PartType","this","zip","JSZip","docRelations","fontRelations","numRelations","styles","fonts","numbering","blob","loadAsync","z","files","loadPart","DocumentRelations","FontRelations","NumberingRelations","Style","Numbering","Promise","all","filter","x","loadDocumentImage","id","loadResource","loadNumberingImage","loadFont","relations","rel","length","resolve","target","async","part","_this","f","xml","parseDocumentRelationsFile","parseStylesFile","parseNumberingFile","parseDocumentFile","dom_1","autos","shd","color","highlight","SizeType","skipDeclaration","xmlString","xrels","parse","elements","map","stringAttr","type","values","valueOfRelType","result","domType","children","style","xbody","byTagName","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","xstyles","parseStyle","parseDefaultStyles","node","basedOn","rPr","parseDefaultProperties","pPr","isDefault","boolAttr","_i","_a","parseTableStyle","console","warn","selector","xnums","mapping","bullets","parseAbstractNumbering","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","parseNumberingLevel","level","bullet","levelText","format","domElem","sizeAttr","Paragraph","parseRun","parseHyperlink","parseBookmark","parseParagraphProperties","paragraph","parseNumbering","parseFrame","parseTabs","numberingId","numberingLevel","Run","parent","Hyperlink","anchor","href","text","textContent","break","tab","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapTopAndBottom","simplePos","posX","relative","align","offset","posY","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","classNameOfCnfStyle","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","tabs","position","leader","output","valueOfBorder","replace","DOMParser","parseFromString","firstChild","tagName","childNodes","nodeType","cb","nodeName","attrName","attributes","attr","item","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","toFixed","Border","Percent","Settings","Theme","StylesWithEffects","Styles","FontTable","WebSettings","Unknown","trim","a","b","checkMask","num","mask","classNameOftblLook","htmlDocument","digitTest","test","clearElement","appendChild","createComment","renderDefaultStyle","renderStyles","renderNumbering","documentElement","renderDocument","renderWrapper","removeChild","processClassName","processStyles","stylesMap","styles_1","styles_2","baseValues","baseStyle","styleValues","this_1","copyStyleProperties","_b","_c","processElement","element","e","processTable","input","attrs","getOwnPropertyNames","attrs_1","bodyElement","createElement","renderChildren","renderStyleValues","styleText","renderStyle","listStyleType","rootCounters","this_2","numberingClass","counter","numberingCounter","styleToString","counter-reset","content","levelTextToContent","counter-increment","__assign","display","list-style-position","list-style-type","valiable_1","toLowerCase","background","numFormatToCssValue","styles_3","join","styleContent","styleElement","innerHTML","styles_4","subStyle","renderElement","renderParagraph","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","into","renderClass","textIndent","link","renderTableColumns","columns_1","colElem","colSpan","ouput","lvl","selectors","cssText","substring","none","decimal","lowerLetter","upperLetter","lowerRoman","upperRoman"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory();\n\telse\n\t\troot[\"docx\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum DomType {\r\n    Document,\r\n    Paragraph,\r\n    Run,\r\n    Break,\r\n    Table,\r\n    Row,\r\n    Cell,\r\n    Hyperlink,\r\n    Drawing,\r\n    Image\r\n}\r\n\r\nexport enum DomRelationshipType {\r\n    Settings,\r\n    Theme,\r\n    StylesWithEffects,\r\n    Styles,\r\n    FontTable,\r\n    Image,\r\n    WebSettings,\r\n    Unknown\r\n}\r\n\r\nexport interface IDomRelationship {\r\n    id: string;\r\n    type: DomRelationshipType;\r\n    target: string;\r\n}\r\n\r\nexport interface IDomElement {\r\n    domType: DomType;\r\n    children?: IDomElement[];\r\n    style?: IDomStyleValues;\r\n    className?: string;\r\n    parent?: IDomElement;\r\n}\r\n\r\nexport interface IDomParagraph extends IDomElement {\r\n    numberingId?: string;\r\n    numberingLevel?: number;\r\n    tabs: DocxTab[];\r\n}\r\n\r\nexport interface DocxTab {\r\n    style: string;\r\n    leader: string;\r\n    position: string;\r\n}\r\n\r\nexport interface IDomHyperlink extends IDomElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface IDomRun extends IDomElement {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    text?: string;\r\n    href?: string;\r\n    tab?: boolean;\r\n}\r\n\r\nexport interface IDomTable extends IDomElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomTableRow extends IDomElement {\r\n}\r\n\r\nexport interface IDomTableCell extends IDomElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomDocument extends IDomElement {\r\n}\r\n\r\nexport interface IDomImage extends IDomDocument {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomStyle {\r\n    id: string;\r\n    name?: string;\r\n    target: string;\r\n    basedOn?: string;\r\n    isDefault?: boolean;\r\n    styles: IDomSubStyle[];\r\n}\r\n\r\nexport interface IDomSubStyle {\r\n    target: string;\r\n    values: IDomStyleValues;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: IDomStyleValues;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n\r\nexport interface IDomStyleValues {\r\n    [name: string]: string;\r\n}\r\n\r\nexport interface IDomFont {\r\n    name: string;\r\n    family: string;\r\n}\r\n","import { Document } from './document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    debug: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options = null): PromiseLike<any> {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    if (options) {\r\n        parser.ignoreWidth = options.ignoreWidth || parser.ignoreWidth;\r\n        parser.ignoreHeight = options.ignoreHeight || parser.ignoreHeight;\r\n        parser.debug = options.debug || parser.debug;\r\n\r\n        renderer.className = options.className || \"docx\";\r\n        renderer.inWrapper = options && options.inWrapper != null ? options.inWrapper : true;\r\n    }\r\n\r\n    return Document.load(data, parser)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer);\r\n            return doc;\r\n        });\r\n}","import { DocumentParser } from './document-parser';\r\nimport { IDomRelationship, IDomStyle, IDomFont, IDomNumbering, IDomDocument } from './dom';\r\n\r\nenum PartType {\r\n    Document = \"word/document.xml\",\r\n    Style = \"word/styles.xml\",\r\n    Numbering = \"word/numbering.xml\",\r\n    DocumentRelations = \"word/_rels/document.xml.rels\",\r\n    NumberingRelations = \"word/_rels/numbering.xml.rels\",\r\n    FontRelations = \"word/_rels/fontTable.xml.rels\",\r\n}\r\n\r\nexport class Document {\r\n    private zip: JSZip = new JSZip();\r\n\r\n    docRelations: IDomRelationship[] = null;\r\n    fontRelations: IDomRelationship[] = null;\r\n    numRelations: IDomRelationship[] = null;\r\n\r\n    styles: IDomStyle[] = null;\r\n    fonts: IDomFont[] = null;\r\n    numbering: IDomNumbering[] = null;\r\n    document: IDomDocument = null;\r\n\r\n    static load(blob, parser: DocumentParser): PromiseLike<Document> {\r\n        var d = new Document();\r\n\r\n        return d.zip.loadAsync(blob).then(z => {\r\n            var files = [\r\n                d.loadPart(PartType.DocumentRelations, parser),\r\n                d.loadPart(PartType.FontRelations, parser),\r\n                d.loadPart(PartType.NumberingRelations, parser),\r\n                d.loadPart(PartType.Style, parser),\r\n                d.loadPart(PartType.Numbering, parser),\r\n                d.loadPart(PartType.Document, parser)\r\n            ];\r\n\r\n            return Promise.all(files.filter(x => x != null)).then(x => d);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.docRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numRelations, id).then(x => x ? (\"data:image/png;base64,\" + x) : null);\r\n    }\r\n\r\n    loadFont(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontRelations, id)\r\n            .then(x => x ? (\"data:application/vnd.ms-package.obfuscated-opentype;charset=utf-8;base64,\" + x) : null);\r\n    }\r\n\r\n    private loadResource(relations: IDomRelationship[], id: string) {\r\n        let rel = relations.filter(x => x.id == id);\r\n\r\n        return rel.length == 0 ? Promise.resolve(null) : this.zip.files[\"word/\" + rel[0].target].async(\"base64\");\r\n    }\r\n\r\n    private loadPart(part: PartType, parser: DocumentParser) {\r\n        var f = this.zip.files[part];\r\n\r\n        return f ? f.async(\"string\").then(xml => {\r\n            switch (part) {\r\n                case PartType.FontRelations:\r\n                    this.fontRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.DocumentRelations:\r\n                    this.docRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.NumberingRelations:\r\n                    this.numRelations = parser.parseDocumentRelationsFile(xml);\r\n                    break;\r\n\r\n                case PartType.Style:\r\n                    this.styles = parser.parseStylesFile(xml);\r\n                    break;\r\n\r\n                case PartType.Numbering:\r\n                    this.numbering = parser.parseNumberingFile(xml);\r\n                    break;\r\n\r\n                case PartType.Document:\r\n                    this.document = parser.parseDocumentFile(xml);\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        }) : null;\r\n    }\r\n}\r\n","import { IDomStyle, IDomDocument, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomParagraph, IDomImage, IDomElement, IDomTableColumn, IDomTableCell,\r\n    IDomRelationship, IDomSubStyle, IDomTableRow, NumberingPicBullet, DocxTab, DomRelationshipType } from './dom';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    ignoreHeight: boolean = true;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentRelationsFile(xmlString) {\r\n        var xrels = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        return xml.elements(xrels).map(c => <IDomRelationship>{\r\n            id: xml.stringAttr(c, \"Id\"),\r\n            type: values.valueOfRelType(c),\r\n            target: xml.stringAttr(c, \"Target\"),\r\n        });\r\n    }\r\n\r\n    parseDocumentFile(xmlString) {\r\n        var result: IDomDocument = {\r\n            domType: DomType.Document,\r\n            children: [],\r\n            style: {}\r\n        };\r\n\r\n        var xbody = xml.byTagName(xml.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    this.parseSectionProperties(elem, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = {\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = xml.byTagName(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = xml.byTagName(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.className(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xmlString: string): IDomNumbering[] {\r\n        var result = [];\r\n        var xnums = xml.parse(xmlString, this.skipDeclaration);\r\n\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = xml.byTagName(elem, \"pict\");\r\n        var shape = pict && xml.byTagName(pict, \"shape\");\r\n        var imagedata = shape && xml.byTagName(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseSectionProperties(elem: Element, domElem: IDomElement) {\r\n        xml.foreach(elem, n => {\r\n            switch (n.localName) {\r\n                case \"pgMar\":\r\n                    domElem.style[\"padding-left\"] = xml.sizeAttr(n, \"left\");\r\n                    domElem.style[\"padding-right\"] = xml.sizeAttr(n, \"right\");\r\n                    domElem.style[\"padding-top\"] = xml.sizeAttr(n, \"top\");\r\n                    domElem.style[\"padding-bottom\"] = xml.sizeAttr(n, \"bottom\");\r\n                    break;\r\n\r\n                case \"pgSz\":\r\n                    if (!this.ignoreWidth)\r\n                        domElem.style[\"width\"] = xml.sizeAttr(n, \"w\");\r\n\r\n                    if (!this.ignoreHeight)\r\n                        domElem.style[\"height\"] = xml.sizeAttr(n, \"h\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseParagraph(node: Element): IDomElement {\r\n        var result = <IDomParagraph>{ domType: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(this.parseBookmark(c));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: IDomParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    paragraph.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"numPr\":\r\n                    this.parseNumbering(c, paragraph);\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"tabs\":\r\n                    this.parseTabs(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseNumbering(node: Element, paragraph: IDomParagraph) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"numId\":\r\n                    paragraph.numberingId = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"ilvl\":\r\n                    paragraph.numberingLevel = xml.intAttr(c, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: IDomParagraph) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.style[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseBookmark(node: Element): IDomElement {\r\n        var result: IDomRun = { domType: DomType.Run };\r\n\r\n        result.id = xml.stringAttr(node, \"name\");\r\n\r\n        return result;\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: IDomElement): IDomRun {\r\n        var result: IDomHyperlink = { domType: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: IDomElement): IDomRun {\r\n        var result: IDomRun = { domType: DomType.Run, parent: parent };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.text = c.textContent;//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.break = xml.stringAttr(c, \"type\") || \"textWrapping\";\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.tab = true;\r\n                    //result.text = \"\\u00A0\\u00A0\\u00A0\\u00A0\";  // TODO\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: IDomRun) {\r\n        this.parseDefaultProperties(elem, run.style = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): IDomElement {\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): IDomElement {\r\n        var result = <IDomElement>{ domType: DomType.Drawing, children: [], style: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapTopAndBottom = false;\r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of xml.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = xml.byTagName(n, \"align\");\r\n                        var offsetNode = xml.byTagName(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(node, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapTopAndBottom = true;\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapTopAndBottom) {\r\n            result.style['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.style['text-align'] = posX.align;\r\n                result.style['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.style[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): IDomElement {\r\n        var graphicData = xml.byTagName(elem, \"graphicData\");\r\n\r\n        for (let n of xml.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ domType: DomType.Image, src: \"\", style: {} };\r\n        var blipFill = xml.byTagName(elem, \"blipFill\");\r\n        var blip = xml.byTagName(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = xml.byTagName(elem, \"spPr\");\r\n        var xfrm = xml.byTagName(spPr, \"xfrm\");\r\n\r\n        result.style[\"position\"] = \"relative\";\r\n\r\n        for (var n of xml.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.style[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.style[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.style[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.style[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { domType: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.style = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.style, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.style[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                table.style[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.style[\"text-align\"];\r\n                table.style[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var vertAnchor = xml.stringAttr(node, \"vertAnchor\");\r\n        var horzAnchor = xml.stringAttr(node, \"horzAnchor\");\r\n        var tblpX = xml.sizeAttr(node, \"tblpX\");\r\n        var tblpY = xml.sizeAttr(node, \"tblpY\");\r\n        var tblpXSpec = xml.stringAttr(node, \"tblpXSpec\");\r\n        var tblpYSpec = xml.stringAttr(node, \"tblpYSpec\");\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.style[\"float\"] = 'left';\r\n        table.style[\"margin-bottom\"] = values.addSize(table.style[\"margin-bottom\"], bottomFromText);\r\n        table.style[\"margin-left\"] = values.addSize(table.style[\"margin-left\"], leftFromText);\r\n        table.style[\"margin-right\"] = values.addSize(table.style[\"margin-right\"], rightFromText);\r\n        table.style[\"margin-top\"] = values.addSize(table.style[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { domType: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): IDomElement {\r\n        var result: IDomTableCell = { domType: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.style = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: IDomStyleValues = null, childStyle: IDomStyleValues = null, handler: (prop: Element) => boolean = null): IDomStyleValues {\r\n        style = style || {};\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: IDomStyleValues) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: IDomStyleValues) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: IDomStyleValues) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: IDomStyleValues) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.sizeAttr(node, \"line\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        if (line) {\r\n            style[\"line-height\"] = line;\r\n            style[\"min-height\"] = line;\r\n        }\r\n    }\r\n\r\n    parseTabs(node: Element, paragraph: IDomParagraph) {\r\n        paragraph.tabs = xml.elements(node, \"tab\").map(n => <DocxTab>{\r\n            position: xml.sizeAttr(n, \"pos\"),\r\n            leader: xml.stringAttr(n, \"leader\"),\r\n            style: xml.stringAttr(n, \"val\"),\r\n        });\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: IDomStyleValues) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: IDomStyleValues) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static parse(xmlString, skipDeclaration = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    static elements(node: Element, tagName: string = null): Element[] {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && (tagName == null || n.localName == tagName))\r\n                result.push(n);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static byTagName(elem: Element, tagName: string): Element {\r\n        for (var i = 0; i < elem.childNodes.length; i++) {\r\n            let n = elem.childNodes[i] as Element;\r\n            if (n.nodeType == 1 && n.localName == tagName)\r\n                return <Element>elem.childNodes[i];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = xml.byTagName(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        var elem = <Element>node;\r\n\r\n        for (var i = 0; i < elem.attributes.length; i++) {\r\n            var attr = elem.attributes.item(i);\r\n\r\n            if (attr.localName == attrName)\r\n                return attr.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n        }\r\n\r\n        return defValue;\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : 0;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfRelType(c: Element) {\r\n        switch (xml.sizeAttr(c, \"Type\")) {\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\":\r\n                return DomRelationshipType.Settings;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\":\r\n                return DomRelationshipType.Theme;\r\n            case \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\":\r\n                return DomRelationshipType.StylesWithEffects;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\":\r\n                return DomRelationshipType.Styles;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\":\r\n                return DomRelationshipType.FontTable;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\":\r\n                return DomRelationshipType.Image;\r\n            case \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\":\r\n                return DomRelationshipType.WebSettings;\r\n        }\r\n\r\n        return DomRelationshipType.Unknown;\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num, mask) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let val = xml.stringAttr(c, \"val\");\r\n        let num = parseInt(val, 16);\r\n        let className = \"\";\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (values.checkMask(num, 0x0020)) className += \" first-row\";\r\n        if (values.checkMask(num, 0x0040)) className += \" last-row\";\r\n        if (values.checkMask(num, 0x0080)) className += \" first-col\";\r\n        if (values.checkMask(num, 0x0100)) className += \" last-col\";\r\n\r\n        if (!values.checkMask(num, 0x0200)) className += \" odd-row even-row\";\r\n        if (!values.checkMask(num, 0x0400)) className += \" odd-col even-col\";\r\n\r\n        return className.trim();\r\n    }\r\n}\r\n","import { Document } from './document';\r\nimport { IDomStyle, IDomDocument, DomType, IDomTable, IDomStyleValues, IDomNumbering, IDomRun, \r\n    IDomHyperlink, IDomParagraph, IDomImage, IDomElement, IDomTableColumn, IDomTableCell } from './dom';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: Document;\r\n\r\n    private digitTest = /^[0-9]/.test;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n\r\n    render(document: Document, bodyContainer: HTMLElement, styleContainer: HTMLElement = null) {\r\n        this.document = document;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        this.clearElement(styleContainer);\r\n        this.clearElement(bodyContainer);\r\n\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docxjs library predefined styles\"));\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        styleContainer.appendChild(this.htmlDocument.createComment(\"docx document styles\"));\r\n        styleContainer.appendChild(this.renderStyles(document.styles));\r\n\r\n        if (document.numbering) {\r\n            styleContainer.appendChild(this.htmlDocument.createComment(\"docx document numbering styles\"));\r\n            styleContainer.appendChild(this.renderNumbering(document.numbering, styleContainer));\r\n        }\r\n\r\n        var documentElement = this.renderDocument(document.document);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            wrapper.appendChild(documentElement);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            bodyContainer.appendChild(documentElement);\r\n        }\r\n    }\r\n\r\n    clearElement(elem: HTMLElement) {\r\n        while (elem.firstChild) {\r\n            elem.removeChild(elem.firstChild);\r\n        }\r\n    }\r\n\r\n    processClassName(className) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap = {};\r\n\r\n        for (let style of styles) {\r\n            style.id = this.processClassName(style.id);\r\n            style.basedOn = this.processClassName(style.basedOn);\r\n\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles) {\r\n            if (style.basedOn) {\r\n                var baseStyle = stylesMap[style.basedOn];\r\n\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processElement(element: IDomDocument) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n\r\n                if (e.domType == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.style = this.copyStyleProperties(table.cellStyle, c.style, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: IDomStyleValues, output: IDomStyleValues, attrs: string[] = null): IDomStyleValues {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    renderDocument(document: IDomDocument): HTMLElement {\r\n        var bodyElement = this.htmlDocument.createElement(\"section\");\r\n\r\n        bodyElement.className = this.className;\r\n\r\n        this.processElement(document);\r\n        this.renderChildren(document, bodyElement);\r\n\r\n        this.renderStyleValues(document.style, bodyElement);\r\n\r\n        return bodyElement;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; display: flex; justify-content: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n\r\n                styleText += this.styleToString(selector, {\r\n                    \"display\": \"list-item\",\r\n                    \"list-style-position\": \"inside\",\r\n                    \"list-style-type\": \"none\",\r\n                    ...num.style\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(this.renderStyle(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderStyle(styleContent) {\r\n        var styleElement = document.createElement(\"style\");\r\n        styleElement.type = \"text/css\";\r\n        styleElement.innerHTML = styleContent;\r\n        return styleElement;\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n\r\n        this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            for (var subStyle of style.styles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.id}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.id} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.id} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return this.renderStyle(styleText);\r\n    }\r\n\r\n    renderElement(elem, parent): HTMLElement {\r\n        switch (elem.domType) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(elem);\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<IDomRun>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: IDomElement, into?: HTMLElement): HTMLElement[] {\r\n        var result: HTMLElement[] = null;\r\n\r\n        if (elem.children != null)\r\n            result = elem.children.map(x => this.renderElement(x, elem)).filter(x => x != null);\r\n\r\n        if (into && result)\r\n            result.forEach(x => into.appendChild(x));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: IDomParagraph) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.numberingId && elem.numberingLevel != null) {\r\n            result.className = `${result.className} ${this.numberingClass(elem.numberingId, elem.numberingLevel)}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: IDomRun) {\r\n        if (elem.break)\r\n            return this.htmlDocument.createElement(elem.break == \"page\" ? \"hr\" : \"br\");\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.text)\r\n            result.textContent = elem.text;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.id) {\r\n            result.id = elem.id;\r\n        }\r\n\r\n        if (elem.tab) {\r\n            //TODO\r\n            // result.style.display = \"inline-block\";\r\n\r\n            // var paragraph = <IDomParagraph>elem.parent;\r\n\r\n            // while (paragraph != null && paragraph.domType != DomType.Paragraph)\r\n            //     paragraph = <IDomParagraph>paragraph.parent;\r\n\r\n            // if (paragraph && paragraph.tabs) {\r\n            //     var tab = paragraph.tabs[0];\r\n\r\n            //     result.style.width = tab.position;\r\n\r\n            //     switch (tab.leader) {\r\n            //         case \"dot\":\r\n            //         case \"middleDot\":\r\n            //             result.style.borderBottom = \"1px black dotted\";\r\n            //             break;\r\n\r\n            //         case \"hyphen\":\r\n            //         case \"heavy\":\r\n            //         case \"underscore\":\r\n            //             result.style.borderBottom = \"1px black solid\";\r\n            //             break;\r\n            //     }\r\n            // }\r\n        }\r\n        else if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: IDomElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.style, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: IDomStyleValues, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: IDomElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: IDomStyleValues, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id, lvl) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n}\r\n"],"sourceRoot":""}