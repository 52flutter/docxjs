{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/breaks.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/document.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/drawing.ts","webpack://docx/./src/document/fields.ts","webpack://docx/./src/document/hyperlink.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/document/table-cell.ts","webpack://docx/./src/document/table-row.ts","webpack://docx/./src/document/table.ts","webpack://docx/./src/document/text.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/parser/xml-serialize.ts","webpack://docx/./src/styles/document-defaults.ts","webpack://docx/./src/styles/style.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__792__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","deserialize","elem","output","deserializeElement","parseDocumentFile","xbody","element","result","WmlDocument","body","WmlBody","parseBodyElements","parseFooter","WmlFooter","parseHeader","WmlHeader","localName","children","push","parseParagraph","parseTable","parseStylesFile","xstyles","xml","foreach","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","WmlParagraph","parseRun","parseHyperlink","paragraph","cssStyle","parseParagraphProperty","props","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","WmlHyperlink","WmlRun","d","parseDrawing","run","Object","assign","parseDrawingWrapper","WmlDrawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","textContent","sizeValue","g","parseGraphic","graphicData","parsePicture","DmlPicture","blipFill","blip","resourceId","spPr","xfrm","WmlTable","parseTableRow","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","WmlTableRow","parseTableCell","parseTableRowProperties","row","WmlTableCell","parseTableCellProperties","cell","span","verticalMerge","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","fromAttribute","WmlBookmarkStart","DocxElement","WmlBookmarkEnd","parseBorder","size","lengthAttr","LengthUsage","Point","frame","shadow","top","bottom","WmlBreak","WmlLastRenderedPageBreak","ns","wordml","drawingml","picture","mul","unit","LineHeight","usage","value","defaultValue","pkg","parser","_documentParser","documentElement","DocumentPart","fromElement","parseSectionProperties","DocxContainer","WmlFieldChar","convertBoolean","WmlFieldSimple","parse","anchor","namespaceURI","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleId","position","leader","WmlText","WmlSymbol","WmlTab","WmlInstructionText","parseRunProperty","styleName","border","fonts","parseRunFonts","shading","parseShading","spacing","stretch","percentageAttr","fontSize","bold","strike","doubleStrike","italics","underline","caps","smallCaps","imprint","outline","verticalAlignment","hAscii","cs","eastAsia","foreground","background","SectionType","parseColumns","numberOfColumns","space","separator","equalWidth","columns","width","parseFooterHeaderReference","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","parseTableColumns","alignment","caption","tableLook","parseTableLook","firstColumn","firstRow","lastColumn","lastRow","noHBand","noVBand","fromText","defaults","ignoreHeight","ignoreFonts","breakPages","ignoreLastRenderedPageBreak","experimental","inWrapper","data","bodyContainer","styleContainer","userOptions","renderer","HtmlRenderer","window","document","WordDocument","doc","render","parseFonts","FontTablePart","el","family","altName","fontKey","refId","footerElement","FooterPart","headerElement","HeaderPart","htmlDocument","renderHeaders","renderFooters","domStyleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processDomStyles","domStyles","styleMap","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","keyBy","baseStyle","mergeDeep","domStylesMap","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","getOwnPropertyNames","key","hasOwnProperty","createElement","tagName","renderContainer","renderElements","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectProps","sectionElement","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","renderColor","test","listStyleType","styleText","rootCounters","numberingClass","num","toLowerCase","styleToString","loadNumberingImage","numFormatToCssValue","counter","numberingCounter","levelTextToContent","join","stylesMap","subStyles","linkedStyle","concat","subStyle","renderParagraphProperties","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderText","renderSymbol","renderTab","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderHeader","renderFooter","renderChildren","into","elems","$$docxElement","renderClass","renderStyleValues","appendClass","styleClassName","renderLineSpacing","renderRunProperties","renderShading","renderBorder","renderRunFonts","renderUnderline","renderRunVerticalAlignment","href","display","textIndent","loadDocumentImage","createTextNode","fontFamily","font","innerHTML","char","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","container","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","t","borderBottom","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","item","Node","ELEMENT_NODE","attributes","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","floatAttr","parseFloat","convertPercentage","convertLength","globalXmlParser","schemaSymbol","Symbol","deserializeSchema","schema","prop","convert","getPrototypeXmlSchema","proto","prototype","elemName","schemaObj","$attr","ops","getPrototypeOf","$$xmlElement","child","obj","create","pPrElem","rPrElem","WmlStyle","link","autoRedefine","hidden","semiHidden","locked","uiPriority","parseStylesPart","parseDocumentDefaults","StylesPart","classList","isObject","Array","isArray","si","lastIndexOf","array","by","reduce","sources","source","shift","parts","partsMap","blob","_parser","OfficeDocument","loadRelationshipPart","part","FontTable","Numbering","Styles","Footer","Header","folder","rel","loadResource","URL","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__792__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text); \r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import { DocxContainer, DocxElement, IDomNumbering, NumberingPicBullet } from './document/dom';\r\nimport * as utils from './utils';\r\nimport { WmlBody, WmlDocument } from './document/document';\r\nimport { WmlParagraph, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, WmlRun } from './document/run';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlHyperlink } from './document/hyperlink';\r\nimport { WmlTableCell } from './document/table-cell';\r\nimport { WmlTable } from './document/table';\r\nimport { WmlDrawing, DmlPicture } from './document/drawing';\r\nimport { WmlTableRow } from './document/table-row';\r\nimport { deserializeElement } from './parser/xml-serialize';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlHeader } from './header/header';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n    keepOrigin: boolean = false;\r\n\r\n    private deserialize<T>(elem: Element, output: T): T {\r\n        return deserializeElement(elem, output, { keepOrigin: this.keepOrigin });\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): WmlDocument {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        const result = new WmlDocument();\r\n        result.body = this.deserialize(xbody, new WmlBody());\r\n        this.parseBodyElements(xbody, result.body);\r\n        return result;\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): WmlFooter {\r\n        return this.parseBodyElements(xmlDoc, new WmlFooter());\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): WmlHeader {\r\n        return this.parseBodyElements(xmlDoc, new WmlHeader());\r\n    }\r\n\r\n    parseBodyElements<T extends DocxContainer>(elem: Element, output: T): T {\r\n        for(let e of globalXmlParser.elements(elem)) {\r\n            switch (e.localName) {\r\n                case \"p\":\r\n                    output.children.push(this.parseParagraph(e));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    output.children.push(this.parseTable(e));\r\n                    break;\r\n            }   \r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): WmlParagraph {\r\n        const result = this.deserialize(node, new WmlParagraph());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph.props, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: WmlParagraph) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: DocxElement): WmlHyperlink {\r\n        var result = this.deserialize(node, new WmlHyperlink(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: DocxElement): WmlRun {\r\n        var result = this.deserialize(node, new WmlRun(parent));\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: WmlRun) {\r\n\r\n        Object.assign(run.props, parseRunProperties(elem, globalXmlParser));\r\n\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): DocxElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): DocxElement {\r\n        var result = new WmlDrawing();\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): DocxElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): DmlPicture {\r\n        var result = new DmlPicture();\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.resourceId = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): WmlTable {\r\n        var result = this.deserialize(node, new WmlTable());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: WmlTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: WmlTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): WmlTableRow {\r\n        var result = this.deserialize(node, new WmlTableRow());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: WmlTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): WmlTableCell {\r\n        var result = this.deserialize(node, new WmlTableCell());\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: WmlTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    cell.verticalMerge = xml.sizeAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element(\"bookmarkStart\")\r\nexport class WmlBookmarkStart extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n    @fromAttribute(\"name\")\r\n    name: string;\r\n    @fromAttribute(\"colFirst\")\r\n    colFirst: number;\r\n    @fromAttribute(\"colLast\")\r\n    colLast: number;\r\n}\r\n\r\n@element(\"bookmarkEnd\")\r\nexport class WmlBookmarkEnd extends DocxElement {\r\n    @fromAttribute(\"id\")\r\n    id: string;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length, LengthUsage } from \"./common\";\r\n\r\nexport interface Border {\r\n    color: string;\r\n    type: string;\r\n    size: Length;\r\n    frame: boolean;\r\n    shadow: boolean;\r\n    offset: Length;\r\n}\r\n\r\nexport interface Borders {\r\n    top: Border;\r\n    left: Border;\r\n    right: Border;\r\n    bottom: Border;\r\n}\r\n\r\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\r\n    return {\r\n        type: xml.attr(elem, \"val\"),\r\n        color: xml.attr(elem, \"color\"),\r\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\r\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\r\n        frame: xml.boolAttr(elem, 'frame'),\r\n        shadow: xml.boolAttr(elem, 'shadow')\r\n    };\r\n}\r\n\r\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\r\n    var result = <Borders>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"left\": result.left = parseBorder(e, xml); break;\r\n            case \"top\": result.top = parseBorder(e, xml); break;\r\n            case \"right\": result.right = parseBorder(e, xml); break;\r\n            case \"bottom\": result.bottom = parseBorder(e, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('br')\r\nexport class WmlBreak extends DocxElement {\r\n    @fromAttribute(\"type\")\r\n    type: \"page\" | \"column\" | \"textWrapping\";\r\n    \r\n    @fromAttribute(\"clear\")\r\n    clear: \"all\" | \"left\" | \"right\" | \"none\";\r\n}\r\n\r\n@element('lastRenderedPageBreak')\r\nexport class WmlLastRenderedPageBreak extends DocxElement {\r\n}","import { attr } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface Underline {\r\n    color: string;\r\n    type: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseElementValue(elem: Element): string {\r\n    return attr(elem, \"val\");\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlDocument } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    documentElement: WmlDocument\r\n\r\n    parseXml(root: Element) {\r\n        this.documentElement = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","import { element, fromElement } from \"../parser/xml-serialize\";\r\nimport { DocxContainer, DocxElement } from \"./dom\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\n\r\n@element(\"document\")\r\nexport class WmlDocument extends DocxElement {\r\n    body: WmlBody;\r\n}\r\n\r\n@element(\"body\")\r\nexport class WmlBody extends DocxContainer {\r\n    @fromElement(\"sectPr\", parseSectionProperties)\r\n    sectionProps: SectionProperties;\r\n}","export class DocxElement {\r\n    className: string = null;\r\n    cssStyle: Record<string, string> = {};\r\n\r\n    constructor(public parent?: DocxElement) {\r\n    }\r\n}\r\n\r\nexport class DocxContainer extends DocxElement {\r\n    children: DocxElement[] = [];\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\nexport class WmlDrawing extends DocxContainer {\r\n\r\n}\r\n\r\nexport class DmlPicture extends DocxContainer {\r\n    resourceId: string;\r\n    stretch: any;\r\n    offset: any;\r\n    size: any;\r\n}\r\n\r\nexport function parseDmlPicture(elem: Element, output: DmlPicture, xml: XmlParser = globalXmlParser) {\r\n    const blipFill = xml.element(elem, \"blipFill\");\r\n    const blip = xml.element(blipFill, \"blip\");\r\n\r\n    output.resourceId = xml.attr(blip, \"embed\");\r\n}","import { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { convertBoolean, convertLength } from \"./common\";\r\nimport { DocxContainer, DocxElement } from \"./dom\";\r\n\r\n@element('fldChar')\r\nexport class WmlFieldChar extends DocxElement {\r\n    @fromAttribute('fldCharType')\r\n    type: 'begin' | 'end' | 'separate'; \r\n}\r\n\r\n@element('fldSimple')\r\nexport class WmlFieldSimple extends DocxContainer {\r\n    @fromAttribute(\"dirty\", convertBoolean)\r\n    dirty: boolean;\r\n\r\n    @fromAttribute(\"fldLock\", convertBoolean)\r\n    lock: boolean;\r\n\r\n    @fromAttribute(\"instr\")\r\n    instruction: string;\r\n}","import globalXmlParser from \"../parser/xml-parser\";\r\nimport { element, fromAttribute } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element('hyperlink')\r\nexport class WmlHyperlink extends DocxContainer {\r\n    @fromAttribute('anchor')\r\n    anchor?: string;\r\n\r\n    protected parse(elem: Element) {\r\n        this.anchor = globalXmlParser.attr(elem, \"anchor\");\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { DocxContainer } from \"./dom\";\r\nimport { Length, ns } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { WmlBookmarkEnd, WmlBookmarkStart } from \"./bookmarks\";\r\nimport { WmlFieldSimple } from \"./fields\";\r\n\r\n@element(\"p\")\r\n@children(WmlBookmarkStart, WmlBookmarkEnd, WmlFieldSimple)\r\nexport class WmlParagraph extends DocxContainer {\r\n    props: ParagraphProperties = {} as ParagraphProperties;\r\n}\r\n\r\nexport interface ParagraphProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleId: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleId = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { children, element } from \"../parser/xml-serialize\";\r\nimport { Border, parseBorder } from \"./border\";\r\nimport { WmlBreak, WmlLastRenderedPageBreak } from \"./breaks\";\r\nimport { Length, LengthUsage, Underline } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\nimport { WmlFieldChar } from \"./fields\";\r\nimport { WmlInstructionText, WmlSymbol, WmlTab, WmlText } from \"./text\";\r\n\r\n@element('r')\r\n@children(WmlText, WmlSymbol, WmlTab, WmlBreak, WmlInstructionText, WmlFieldChar, WmlLastRenderedPageBreak)\r\nexport class WmlRun extends DocxContainer {\r\n    id?: string;\r\n    styleName: string;\r\n    props: RunProperties = <RunProperties>{};\r\n}\r\n\r\nexport interface RunProperties {\r\n    styleName: string;\r\n    fontSize: Length;\r\n    color: string;\r\n    bold: boolean;\r\n    italics: boolean;\r\n    caps: boolean;\r\n    smallCaps: boolean;\r\n    strike: boolean;\r\n    doubleStrike: boolean;\r\n    outline: boolean;\r\n    imprint: boolean;\r\n    underline: Underline;\r\n    border: Border;\r\n    fonts: RunFonts;\r\n    shading: Shading;\r\n    highlight: string;\r\n    spacing: Length;\r\n    stretch: number;\r\n    verticalAlignment: 'baseline' | 'superscript' | 'subscript' | string;\r\n}\r\n\r\nexport interface Shading {\r\n    foreground: string,\r\n    background: string,\r\n    type: string\r\n}\r\n\r\nexport interface RunFonts {\r\n    ascii: string;\r\n    hAscii: string;\r\n    cs: string;\r\n    eastAsia: string;\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    switch (elem.localName) {\r\n        case 'rStyle': \r\n            props.styleName = xml.attr(elem, 'val');\r\n            break;\r\n\r\n        case 'bdr': \r\n            props.border = parseBorder(elem, xml);\r\n            break;\r\n\r\n        case 'rFonts': \r\n            props.fonts = parseRunFonts(elem, xml);\r\n            break;\r\n\r\n        case 'shd': \r\n            props.shading = parseShading(elem, xml);\r\n            break;\r\n\r\n        case 'highlight': \r\n            props.highlight = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'spacing':\r\n            props.spacing = xml.lengthAttr(elem, 'val');\r\n            break;\r\n\r\n        case 'w':\r\n            props.stretch = xml.percentageAttr(elem, 'val');\r\n            break;\r\n\r\n            case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        case \"b\":\r\n            props.bold = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"strike\":\r\n            props.strike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"dstrike\":\r\n            props.doubleStrike = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"i\":\r\n            props.italics = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case \"u\":\r\n            props.underline = {\r\n                color: xml.attr(elem, \"color\"),\r\n                type: xml.attr(elem, 'val')\r\n            };\r\n            break;\r\n            \r\n        case 'caps':\r\n            props.caps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'smallCaps':\r\n            props.smallCaps = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'imprint':\r\n            props.imprint = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'outline':\r\n            props.outline = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n\r\n        case 'vertAlign':\r\n            props.verticalAlignment = xml.attr(elem, 'val');\r\n            break;\r\n        \r\n        case 'emboss':\r\n        case 'shadow':\r\n        case 'vanish':\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseRunFonts(elem: Element, xml: XmlParser): RunFonts {\r\n    return {\r\n        ascii: xml.attr(elem, 'ascii'),\r\n        hAscii: xml.attr(elem, 'hAscii'),\r\n        cs: xml.attr(elem, 'cs'),\r\n        eastAsia: xml.attr(elem, 'eastAsia'),\r\n    };\r\n}\r\n\r\nexport function parseShading(elem: Element, xml: XmlParser): Shading {\r\n    return {\r\n        type: xml.attr(elem, 'val'),\r\n        foreground: xml.attr(elem, 'color'),\r\n        background: xml.attr(elem, 'fill')\r\n    };\r\n}","import globalXmlParser, { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string;\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tc\")\r\nexport class WmlTableCell extends DocxContainer {\r\n    span?: number;\r\n    verticalMerge: string;\r\n}","import { element } from \"../parser/xml-serialize\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tr\")\r\nexport class WmlTableRow extends DocxContainer {\r\n}","import globalXmlParser, { attr, elements, XmlParser } from \"../parser/xml-parser\";\r\nimport { element, fromElement } from \"../parser/xml-serialize\";\r\nimport { Length } from \"./common\";\r\nimport { DocxContainer } from \"./dom\";\r\n\r\n@element(\"tbl\")\r\nexport class WmlTable extends DocxContainer {\r\n    @fromElement(\"tblGrid\", parseTableColumns)\r\n    columns?: TableColumn[];\r\n    @fromElement(\"tblPr\", parseTableProperties)\r\n    props: TableProperties;\r\n\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface TableColumn {\r\n    width?: Length;\r\n}\r\n\r\nexport interface TableProperties {\r\n    alignment: string;\r\n    caption: string;\r\n    tableLook: TableLook;\r\n}\r\n\r\nexport function parseTableProperties(elem: Element): TableProperties {\r\n    const result = {} as TableProperties;\r\n\r\n    for (const e of elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"jc\":\r\n                result.alignment = attr(e, \"val\");\r\n                break;\r\n                \r\n            case \"tblCaption\":\r\n                result.caption = attr(e, \"val\");\r\n                break;\r\n\r\n            case \"tblLook\":\r\n                result.tableLook = parseTableLook(e);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport interface TableLook {\r\n    firstColumn: boolean;\r\n    firstRow: boolean;\r\n    lastColumn: boolean;\r\n    lastRow: boolean;\r\n    noHBand: boolean;\r\n    noVBand: boolean;\r\n}\r\n\r\nexport function parseTableLook(elem: Element, xml: XmlParser = globalXmlParser): TableLook {\r\n    //TODO\r\n    const intVal = xml.intAttr(elem, \"val\");\r\n\r\n    return {\r\n        firstColumn: xml.boolAttr(elem, 'firstColumn'),\r\n        firstRow: xml.boolAttr(elem, 'firstRow'),\r\n        lastColumn: xml.boolAttr(elem, 'lastColumn'),\r\n        lastRow: xml.boolAttr(elem, 'lastRow'),\r\n        noHBand: xml.boolAttr(elem, 'noHBand'),\r\n        noVBand: xml.boolAttr(elem, 'noVBand')\r\n    }\r\n}\r\n\r\nexport function parseTableColumns(elem: Element, xml: XmlParser = globalXmlParser): TableColumn[] {\r\n    return xml.elements(elem, 'gridCol').map(e => (<TableColumn>{\r\n        width: xml.lengthAttr(e, \"w\")\r\n    }));\r\n}","import { element, fromAttribute, fromText } from \"../parser/xml-serialize\";\r\nimport { DocxElement } from \"./dom\";\r\n\r\n@element('t')\r\nexport class WmlText extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}\r\n\r\n@element('sym')\r\nexport class WmlSymbol extends DocxElement {\r\n    @fromAttribute('font')\r\n    font: string;\r\n    @fromAttribute('char')\r\n    char: string;\r\n}\r\n\r\n@element('tab')\r\nexport class WmlTab extends DocxElement {\r\n}\r\n\r\n@element(\"instrText\")\r\nexport class WmlInstructionText extends DocxElement {\r\n    @fromText()\r\n    text: string;\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    trimXmlDeclaration: boolean;\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    keepOrigin: boolean;\r\n}\r\n\r\nexport const defaults = {\r\n    trimXmlDeclaration: false,\r\n    keepOrigin: false,\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options: Options = { \r\n        ...defaults,\r\n        ...userOptions\r\n    };\r\n\r\n    Object.assign(parser, options);\r\n    Object.assign(renderer, options);\r\n\r\n    return WordDocument.load(data, parser, options).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFooter } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: WmlFooter;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DocxContainer } from \"../document/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"ftr\")\r\nexport class WmlFooter extends DocxContainer {\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlHeader } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: WmlHeader;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DocxContainer } from \"../document/dom\";\r\nimport { element } from \"../parser/xml-serialize\";\r\n\r\n@element(\"hdr\")\r\nexport class WmlHeader extends DocxContainer {\r\n}","import { WordDocument } from './word-document';\r\nimport { IDomNumbering, DocxContainer, DocxElement } from './document/dom';\r\nimport { Length, Underline } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { WmlParagraph, ParagraphProperties } from './document/paragraph';\r\nimport { appendClass, keyBy, mergeDeep } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './document/section';\r\nimport { WmlRun, RunFonts, RunProperties, Shading } from './document/run';\r\nimport { WmlBookmarkStart } from './document/bookmarks';\r\nimport { IDomStyle } from './document/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\nimport { Border } from './document/border';\r\nimport { TableColumn, WmlTable } from './document/table';\r\nimport { WmlTableRow } from './document/table-row';\r\nimport { WmlTableCell } from './document/table-cell';\r\nimport { WmlHyperlink } from './document/hyperlink';\r\nimport { WmlDrawing, DmlPicture } from './document/drawing';\r\nimport { WmlBreak, WmlLastRenderedPageBreak } from './document/breaks';\r\nimport { WmlSymbol, WmlTab, WmlText } from './document/text';\r\nimport { LineSpacing } from './document/line-spacing';\r\nimport { WmlStyle } from './styles/style';\r\nimport { WmlHeader } from './header/header';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlBody } from './document/document';\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    domStyleMap: Record<string, IDomStyle>;\r\n    styleMap: Record<string, WmlStyle>;\r\n    keepOrigin: boolean = false;\r\n    renderHeaders: boolean = true;\r\n    renderFooters: boolean = true;\r\n\r\n    constructor(private htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.domStyleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            this.domStyleMap = this.processDomStyles(document.stylesPart.domStyles);\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.domStyles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.documentElement.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: WmlStyle[]) {\r\n        const styleMap = keyBy(styles, s => s.id);\r\n\r\n        for(let style of styles.filter(s => s.basedOn)) {\r\n            const baseStyle = styleMap[style.basedOn];\r\n        \r\n            if(baseStyle) {\r\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\r\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\r\n            } else if (this.options.debug) {\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n            }\r\n        }\r\n\r\n        return styleMap;\r\n    }\r\n\r\n    processDomStyles(styles: IDomStyle[]) {\r\n        var domStylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            domStylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = domStylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return domStylesMap;\r\n    }\r\n\r\n    processElement(element: DocxElement) {\r\n        if (\"children\" in element) {\r\n            for (var e of (element as DocxContainer).children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e instanceof WmlTable) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: WmlTable) {\r\n        for (var r of table.children) {\r\n            for (var c of (r as DocxContainer).children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private createElement(tagName, props = undefined) {\r\n        return Object.assign(this.htmlDocument.createElement(tagName), props);\r\n    }\r\n\r\n    private renderContainer(elem: DocxContainer, tagName: string): HTMLElement {\r\n        const result = this.createElement(tagName);\r\n        this.renderElements(elem.children, elem, result);\r\n        return result;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n        \r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: WmlBody): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            const sectionProps = section.sectProps || document.sectionProps;\r\n            var sectionElement = this.createSection(this.className, sectionProps);\r\n\r\n            // if(this.renderHeaders && sectionProps.headerRefs) {\r\n            //     for(const headerRef of sectionProps.headerRefs) {\r\n            //     }\r\n            // }\r\n\r\n            this.renderElements(section.elements, document, sectionElement);\r\n\r\n            // if(this.renderFooters && sectionProps.footerRefs) {\r\n            //     for(const headerRef of sectionProps.footerRefs) {\r\n            //         const partPath = this.document.getPathById(this.document.documentPart, headerRef.id);\r\n            //         const part = this.document.partsMap[partPath] as FooterPart;\r\n\r\n            //         this.processElement(part.footerElement);\r\n            //         sectionElement.appendChild(this.renderElement(part.footerElement, null))\r\n            //     }\r\n            // }\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isPageBreakElement(elem: DocxElement): boolean {\r\n        if (elem instanceof WmlLastRenderedPageBreak)\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return elem instanceof WmlBreak && elem.type === \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: DocxElement[]): { sectProps: SectionProperties, elements: DocxElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for(let elem of elements) {\r\n            if (elem instanceof WmlParagraph) {\r\n                const styleName = elem.props.styleId;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem instanceof WmlParagraph)\r\n            {\r\n                const p = elem as WmlParagraph;\r\n\r\n                var sectProps = p.props.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children.length > 0) {\r\n                    pBreakIndex = p.children.findIndex((r: DocxContainer) => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex] as WmlRun;\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = Object.assign(new WmlParagraph(), elem, { children: children.slice(pBreakIndex) });\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  Object.assign(new WmlRun(), breakRun, { children: runChildren.slice(0, rBreakIndex) });\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderColor(c: string, autoColor: string = 'black'): string {\r\n        if (/[a-f0-9]{6}/i.test(c))\r\n            return `#${c}`;\r\n\r\n        return c === 'auto' ? autoColor : c;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && (num.format == \"decimal\" || num.format == \"lowerLetter\")) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.domStyleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                if (style.paragraphProps && subStyle.target == \"p\") {\r\n                    this.renderParagraphProperties(subStyle.values, style.paragraphProps);\r\n                }\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: DocxElement, parent: DocxElement): Node {\r\n        if (elem instanceof WmlParagraph) {\r\n            return this.renderParagraph(elem);\r\n        } else if (elem instanceof WmlBookmarkStart) {\r\n            return this.renderBookmarkStart(elem);\r\n        } else if (elem instanceof WmlRun) {\r\n            return this.renderRun(elem);\r\n        } else if (elem instanceof WmlText) {\r\n            return this.renderText(elem);\r\n        } else if (elem instanceof WmlSymbol) {\r\n            return this.renderSymbol(elem);\r\n        } else if (elem instanceof WmlTab) {\r\n            return this.renderTab(elem);\r\n        } else if (elem instanceof WmlTable) {\r\n            return this.renderTable(elem);\r\n        } else if (elem instanceof WmlTableRow) {\r\n            return this.renderTableRow(elem);\r\n        } else if (elem instanceof WmlTableCell) {\r\n            return this.renderTableCell(elem);\r\n        } else if (elem instanceof WmlHyperlink) {\r\n            return this.renderHyperlink(elem);\r\n        } else if (elem instanceof WmlDrawing) {\r\n            return this.renderDrawing(elem);\r\n        } else if (elem instanceof DmlPicture) {\r\n            return this.renderImage(elem);\r\n        } else if (elem instanceof WmlHeader) {\r\n            return this.renderHeader(elem);\r\n        } else if (elem instanceof WmlFooter) {\r\n            return this.renderFooter(elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: DocxContainer, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: DocxElement[], parent: DocxElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => {\r\n            let n = this.renderElement(e, parent);\r\n\r\n            if(n && this.keepOrigin)\r\n                (n as any).$$docxElement = e;\r\n\r\n            return n;\r\n        }).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: WmlParagraph) {\r\n        var result = this.renderContainer(elem, \"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        const style = elem.props.styleId && this.styleMap?.[elem.props.styleId]; \r\n        const numbering = elem.props.numbering ?? style?.paragraphProps?.numbering;\r\n\r\n        if (numbering) {\r\n            var numberingClass = this.numberingClass(numbering.id, numbering.level ?? 0);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.props.styleId) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.props.styleId));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraphProperties(style: any, props: ParagraphProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch(p as keyof(ParagraphProperties)) {\r\n                case \"lineSpacing\":\r\n                    this.renderLineSpacing(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderLineSpacing(style: any, spacing: LineSpacing) {   \r\n        //TODO\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        for (const p in props) {\r\n            const v = props[p];\r\n\r\n            switch (p as keyof(RunProperties)) {\r\n                case 'highlight':\r\n                    style['background'] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'shading':\r\n                    style['background'] = this.renderShading(v);\r\n                    break;\r\n\r\n                case 'border':\r\n                    style['border'] = this.renderBorder(v);\r\n                    break;\r\n\r\n                case 'color':\r\n                    style[\"color\"] = this.renderColor(v);\r\n                    break;\r\n\r\n                case 'fontSize':\r\n                    style[\"font-size\"] = this.renderLength(v);\r\n                    break;\r\n\r\n                case 'bold':\r\n                    style[\"font-weight\"] = v ? 'bold' : 'normal';\r\n                    break;\r\n\r\n                case 'italics':\r\n                    style[\"font-style\"] = v ? 'italic' : 'normal';\r\n                    break;\r\n\r\n                case 'smallCaps':\r\n                    style[\"font-size\"] = v ? 'smaller' : 'none';\r\n                case 'caps':\r\n                    style[\"text-transform\"] = v ? 'uppercase' : 'none';\r\n                    break;\r\n                    \r\n                case 'strike':\r\n                    style[\"text-decoration\"] = v ? 'line-through' : 'none';\r\n                    break;\r\n\r\n                case 'fonts':\r\n                    style[\"font-family\"] = this.renderRunFonts(v);\r\n                    break;\r\n    \r\n                case 'underline':\r\n                    this.renderUnderline(style, v);\r\n                    break;\r\n                \r\n                case 'verticalAlignment':\r\n                    this.renderRunVerticalAlignment(style, v);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    renderRunVerticalAlignment(style: any, align: string) {\r\n        switch(align) {\r\n            case 'subscript': \r\n                style['vertical-align'] = 'sub';\r\n                style['font-size'] = 'small';\r\n                break;\r\n\r\n            case 'superscript': \r\n                style['vertical-align'] = 'super';\r\n                style['font-size'] = 'small';\r\n                break;\r\n        }\r\n    }\r\n\r\n    renderRunFonts(fonts: RunFonts) {\r\n        return [fonts.ascii, fonts.hAscii, fonts.cs, fonts.eastAsia].filter(x => x).map(x => `'${x}'`).join(',');\r\n    }\r\n\r\n    renderBorder(border: Border) {\r\n        if (border.type == 'nil')\r\n            return 'none';\r\n\r\n        return `${this.renderLength(border.size)} solid ${this.renderColor(border.color)}`;\r\n    }\r\n    \r\n    renderShading(shading: Shading) {\r\n        if (shading.type == 'clear')\r\n            return this.renderColor(shading.background, autos.shd);\r\n        \r\n        return this.renderColor(shading.background, autos.shd);\r\n    }\r\n    \r\n    renderUnderline(style: any, underline: Underline) {\r\n        if (underline.type == null || underline.type == \"none\")\r\n            return;\r\n\r\n        switch (underline.type) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        if (underline.color)\r\n            style[\"text-decoration-color\"] = this.renderColor(underline.color);\r\n    }\r\n\r\n    renderHyperlink(elem: WmlHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.anchor)\r\n            result.href = elem.anchor;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: WmlDrawing) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: DmlPicture) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.resourceId).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderHeader(elem: WmlHeader) {\r\n        return this.renderContainer(elem, \"header\");\r\n    }\r\n\r\n    renderFooter(elem: WmlHeader) {\r\n        return this.renderContainer(elem, \"footer\");\r\n    }\r\n\r\n    renderText(elem: WmlText) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: WmlSymbol) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: WmlTab) {\r\n        var tabSpan = this.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<WmlParagraph>(elem, WmlParagraph);\r\n                \r\n                if(paragraph.props.tabs == null)\r\n                    return;\r\n\r\n                paragraph.props.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.props.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: WmlRun) {\r\n        var result = this.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        //this.renderStyleValues(elem.cssStyle, result);\r\n        this.renderRunProperties(result.style, elem.props);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: WmlTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        if (elem.props?.caption) {\r\n            result.appendChild(this.createElement(\"caption\", { textContent: elem.props?.caption }));\r\n        }\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: TableColumn[]) {\r\n        const result = this.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n            colElem.style.width = this.renderLength(col.width);\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: WmlTableRow) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: WmlTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key of Object.getOwnPropertyNames(style)) {\r\n            ouput.style[key] = style[key];\r\n        }\r\n    }\r\n\r\n    renderClass(input: DocxElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = `${selectors} {\\r\\n`;\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText) \r\n            result += cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string, numformat: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends DocxElement>(elem: DocxElement, type: any): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && !(parent instanceof type))\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length, LengthUsage, LengthUsageType, convertLength, convertPercentage, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport function elements(elem: Element, localName: string = null): Element[] {\r\n    const result = [];\r\n\r\n    for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n        let c = elem.childNodes.item(i);\r\n\r\n        if (c.nodeType == Node.ELEMENT_NODE && (localName == null || (c as Element).localName == localName))\r\n            result.push(c);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function attr(elem: Element, localName: string): string {\r\n    for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n        let a = elem.attributes.item(i);\r\n\r\n        if (a.localName == localName)\r\n            return a.value;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport class XmlParser {\r\n    elements = elements;\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr = attr;\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    percentageAttr(node: Element, attrName: string): number {\r\n        return convertPercentage(this.attr(node, attrName));\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","const schemaSymbol = Symbol(\"open-xml-schema\");\r\n\r\nexport type ValueConverter = (val: string) => any;\r\n\r\nexport type ElementConverter = (val: Element) => any;\r\n\r\nexport function element(name: string) {\r\n    return function(target: any) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.elemName = name;\r\n    }\r\n}\r\n\r\nexport function children(...elements: any[]) {\r\n    return function(target) {\r\n        var schema = getPrototypeXmlSchema(target.prototype);\r\n        schema.children = {};\r\n        for(let c of elements) {\r\n            let cs = getPrototypeXmlSchema(c.prototype);\r\n            schema.children[cs.elemName] = { proto: c.prototype, schema: cs };\r\n        }\r\n    }\r\n}\r\n\r\nexport function fromText(convert: ValueConverter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.text = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromAttribute(attrName: string, convert: ValueConverter = null) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.attrs[attrName] = { prop, convert };\r\n    }\r\n}\r\n\r\nexport function fromElement(elemName: string, convert: ElementConverter) {\r\n    return function (target: any, prop: string) {\r\n        var schema = getPrototypeXmlSchema(target);\r\n        schema.elements[elemName] = { prop, convert };\r\n    }   \r\n}\r\n\r\nexport function buildXmlSchema(schemaObj: any): OpenXmlSchema {\r\n    var schema: OpenXmlSchema = {\r\n        text: null,\r\n        attrs: {},\r\n        elements: {},\r\n        elemName: null,\r\n        children: null\r\n    };\r\n\r\n    for(let p in schemaObj) {\r\n        let v = schemaObj[p];\r\n\r\n        if(p == \"$elem\") {\r\n            schema.elemName = v;\r\n        }\r\n        else if(v.$attr) {\r\n            schema.attrs[v.$attr] = { prop: p, convert: null };\r\n        }\r\n    }\r\n\r\n    return schema;\r\n}\r\n\r\nexport function deserializeElement<T = any>(n: Element, output: T, ops: DeserializeOptions): T {\r\n    var proto = Object.getPrototypeOf(output);\r\n    var schema = proto[schemaSymbol];\r\n\r\n    if (ops?.keepOrigin) {\r\n        (output as any).$$xmlElement = n;\r\n    }  \r\n\r\n    if (schema == null)\r\n        return output;\r\n\r\n    deserializeSchema(n, output, schema);\r\n\r\n    for (let i = 0, l = n.children.length; i < l; i ++) {\r\n        let elem = n.children.item(i);\r\n        let child = schema.children[elem.localName];\r\n\r\n        if (child) {\r\n            let obj = Object.create(child.proto);\r\n            deserializeElement(elem, obj, ops);\r\n            (output as any).children.push(obj);\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function deserializeSchema(n: Element, output: any, schema: OpenXmlSchema) {\r\n    if (schema.text) {\r\n        let prop = schema.text;\r\n        output[prop.prop] = prop.convert ? prop.convert(n.textContent) : n.textContent; \r\n    }\r\n\r\n    for (let i = 0, l = n.attributes.length; i < l; i++) {\r\n        const attr = n.attributes.item(i);\r\n        const prop = schema.attrs[attr.localName];\r\n\r\n        if(prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert ? prop.convert(attr.value) : attr.value; \r\n    }\r\n\r\n    for (let i = 0, l = n.childNodes.length; i < l; i ++) {\r\n        const elem = n.childNodes.item(i) as Element;\r\n        const prop = elem.nodeType === Node.ELEMENT_NODE ? schema.elements[elem.localName] : null;\r\n\r\n        if (prop == null)\r\n            continue;\r\n\r\n        output[prop.prop] = prop.convert(elem); \r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport interface DeserializeOptions {\r\n    keepOrigin: boolean\r\n}\r\n\r\nexport interface OpenXmlSchema {\r\n    elemName: string;\r\n    text: OpenXmlSchemaProperty;\r\n    attrs: Record<string, OpenXmlSchemaProperty>;\r\n    elements: Record<string, any>;\r\n    children: Record<string, any>;\r\n}\r\n\r\nexport interface OpenXmlSchemaProperty {\r\n    prop: string;\r\n    convert: ValueConverter;\r\n}\r\n\r\nfunction getPrototypeXmlSchema(proto: any): OpenXmlSchema {\r\n    return proto[schemaSymbol] || (proto[schemaSymbol] = {\r\n        text: null,\r\n        attrs: {},\r\n        children: {},\r\n        elements: {}\r\n    });\r\n}","import { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface DocumentDefaults {\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseDocumentDefaults(elem: Element, xml: XmlParser) {\r\n    let result = <DocumentDefaults>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch(e.localName) {\r\n            case \"pPrDefault\": \r\n                let pPrElem = xml.element(e, 'pPr');\r\n                \r\n                if (pPrElem)\r\n                    result.paragraphProps = parseParagraphProperties(pPrElem, xml);\r\n                break;\r\n\r\n            case \"rPrDefault\":\r\n                let rPrElem = xml.element(e, 'rPr');\r\n                \r\n                if (rPrElem)\r\n                    result.runProps = parseRunProperties(rPrElem, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { convertBoolean } from \"../document/common\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { deserializeElement, element, fromAttribute } from \"../parser/xml-serialize\";\r\n\r\nexport type StyleType = 'character' | 'numbering' | 'paragraph' | 'table';\r\n\r\n@element(\"style\")\r\nexport class WmlStyle {\r\n    @fromAttribute(\"styleId\")\r\n    id: string;\r\n    @fromAttribute(\"type\")\r\n    type: StyleType;\r\n    @fromAttribute(\"customStyle\", convertBoolean)\r\n    customStyle: boolean\r\n    @fromAttribute(\"default\", convertBoolean)\r\n    default: boolean;\r\n\r\n    name: string;\r\n    basedOn: string;\r\n    aliases: string[];\r\n    link: string;\r\n\r\n    next: string;\r\n    locked: boolean;\r\n    autoRedefine: boolean;\r\n    hidden: boolean;\r\n    semiHidden: boolean;\r\n    uiPriority: number;\r\n\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport function parseStyle(elem: Element, xml: XmlParser): WmlStyle {\r\n    let result = deserializeElement(elem, new WmlStyle(), null);\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n    \r\n            case \"name\":\r\n                result.name = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"basedOn\":\r\n                result.basedOn = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"aliases\":\r\n                result.aliases = xml.attr(e, 'val').split(',');\r\n                break;\r\n\r\n            case \"link\":\r\n                result.link = xml.attr(e, 'val');\r\n                break;\r\n\r\n            case \"next\":\r\n                result.next = xml.attr(e, 'val');\r\n                break;\r\n        \r\n            case \"autoRedefine\":\r\n                result.autoRedefine = true;\r\n                break;\r\n\r\n            case \"hidden\":\r\n                result.hidden = true;\r\n                break;\r\n\r\n            case \"semiHidden\":\r\n                result.semiHidden = true;\r\n                break;\r\n    \r\n            case \"locked\":\r\n                result.locked = true;\r\n                break;\r\n\r\n            case \"uiPriority\":\r\n                result.uiPriority = xml.intAttr(e, 'val');;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { keyBy } from \"../utils\";\r\nimport { DocumentDefaults, parseDocumentDefaults } from \"./document-defaults\";\r\nimport { parseStyle, WmlStyle, StyleType } from \"./style\";\r\n\r\nexport class StylesPart extends Part implements StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: WmlStyle[];\r\n    \r\n    domStyles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseStylesPart(root, this._package.xmlParser));\r\n        this.domStyles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}\r\n\r\nexport interface StylesPartProperties {\r\n    defaults: DocumentDefaults;\r\n    styles: WmlStyle[];\r\n}\r\n\r\nexport function parseStylesPart(elem: Element, xml: XmlParser): StylesPartProperties {\r\n    let result = {\r\n        styles: []\r\n    } as StylesPartProperties;\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"docDefaults\":\r\n                result.defaults = parseDocumentDefaults(e, xml);\r\n                break;\r\n\r\n            case \"style\":\r\n                result.styles.push(parseStyle(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { DocxElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: DocxElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n    \r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        return rel ? splitPath(part.path)[0] + rel.target : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"sourceRoot":""}